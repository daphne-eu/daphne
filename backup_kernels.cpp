// This file was generated by genKernelInst.py. Don't edit manually!

#include <iostream>
#include <iomanip>
#include <runtime/local/context/DaphneContext.h>
// #include <runtime/local/kernels/AggAll.h>
// #include <runtime/local/kernels/AggCol.h>
// #include <runtime/local/kernels/AggRow.h>
// #include <runtime/local/kernels/Cartesian.h>
// #include <runtime/local/kernels/CastObj.h>
// #include <runtime/local/kernels/CastObjSca.h>
// #include <runtime/local/kernels/CastSca.h>
// #include <runtime/local/kernels/CastScaObj.h>
// #include <runtime/local/kernels/ColBind.h>
// #include <runtime/local/kernels/ColBind.h>
// #include <runtime/local/kernels/Concat.h>
#include <runtime/local/kernels/CreateDaphneContext.h>
#include <runtime/local/kernels/CreateDistributedContext.h>
#include <runtime/local/kernels/GetDataPointer.h>
// #include <runtime/local/kernels/CreateFrame.h>
// #include <runtime/local/kernels/CTable.h>
#include <runtime/local/kernels/DestroyDaphneContext.h>
// #include <runtime/local/kernels/DiagMatrix.h>
// #include <runtime/local/kernels/EwBinaryMat.h>
// #include <runtime/local/kernels/EwBinaryMat.h>
// #include <runtime/local/kernels/EwBinaryObjSca.h>
// #include <runtime/local/kernels/EwBinaryObjSca.h>
// #include <runtime/local/kernels/EwBinarySca.h>
// #include <runtime/local/kernels/ExtractCol.h>
// #include <runtime/local/kernels/ExtractCol.h>
#include <runtime/local/kernels/Fill.h>
// #include <runtime/local/kernels/MatrixConstant.h>
// #include <runtime/local/kernels/ExtractRow.h>
// #include <runtime/local/kernels/FilterRow.h>
// #include <runtime/local/kernels/GroupJoin.h>
// #include <runtime/local/kernels/InnerJoin.h>
// #include <runtime/local/kernels/ThetaJoin.h>
// #include <runtime/local/kernels/Map.h>
// #include <runtime/local/kernels/MatMul.h>
// #include <runtime/local/kernels/Now.h>
// #include <runtime/local/kernels/OneHot.h>
// #include <runtime/local/kernels/PrintSca.h>
#include <runtime/local/kernels/PrintObj.h>
// #include <runtime/local/kernels/RandMatrix.h>
// #include <runtime/local/kernels/Sample.h>
// #include <runtime/local/kernels/Reverse.h>
// #include <runtime/local/kernels/Read.h>
// #include <runtime/local/kernels/GetColIdx.h>
// #include <runtime/local/kernels/Write.h>
// #include <runtime/local/kernels/Replace.h>
// #include <runtime/local/kernels/Reshape.h>
// #include <runtime/local/kernels/SemiJoin.h>
// #include <runtime/local/kernels/SetColLabels.h>
// #include <runtime/local/kernels/SetColLabelsPrefix.h>
// #include <runtime/local/kernels/Transpose.h>
// #include <runtime/local/kernels/Transpose.h>
// #include <runtime/local/kernels/EwUnaryMat.h>
// #include <runtime/local/kernels/EwUnarySca.h>
// #include <runtime/local/kernels/NumCols.h>
// #include <runtime/local/kernels/NumRows.h>
// #include <runtime/local/kernels/NumCells.h>
// #include <runtime/local/kernels/Seq.h>
// #include <runtime/local/kernels/Solve.h>
// #include <runtime/local/kernels/Syrk.h>
// #include <runtime/local/kernels/Gemv.h>
// #include <runtime/local/kernels/Tri.h>
// #include <runtime/local/kernels/VectorizedPipeline.h>
// #include <runtime/local/kernels/IncRef.h>
// #include <runtime/local/kernels/DecRef.h>
// #include <runtime/local/kernels/SliceRow.h>
// #include <runtime/local/kernels/SliceCol.h>
// #include <runtime/local/kernels/InsertRow.h>
// #include <runtime/local/kernels/InsertCol.h>
// #include <runtime/local/kernels/Pooling.h>
// #include <runtime/local/kernels/RowBind.h>
// #include <runtime/local/kernels/Quantize.h>
// #include <runtime/local/kernels/Activation.h>
// #include <runtime/local/kernels/Order.h>
// #include <runtime/local/kernels/Group.h>
// #include <runtime/local/kernels/DistributedPipeline.h>

extern "C" {
    // ----------------------------------------------------------------------------
    // aggAll
    // ----------------------------------------------------------------------------
    // void _sumAll__float__DenseMatrix_float(float * res, const DenseMatrix<float> * arg, DCTX(ctx)) {
    //     *res = aggAll<DenseMatrix<float>>(AggOpCode::SUM, arg, ctx);
    // }
    // void _minAll__float__DenseMatrix_float(float * res, const DenseMatrix<float> * arg, DCTX(ctx)) {
    //     *res = aggAll<DenseMatrix<float>>(AggOpCode::MIN, arg, ctx);
    // }
    // void _maxAll__float__DenseMatrix_float(float * res, const DenseMatrix<float> * arg, DCTX(ctx)) {
    //     *res = aggAll<DenseMatrix<float>>(AggOpCode::MAX, arg, ctx);
    // }
    // void _meanAll__float__DenseMatrix_float(float * res, const DenseMatrix<float> * arg, DCTX(ctx)) {
    //     *res = aggAll<DenseMatrix<float>>(AggOpCode::MEAN, arg, ctx);
    // }
    // void _sumAll__double__DenseMatrix_double(double * res, const DenseMatrix<double> * arg, DCTX(ctx)) {
    //     *res = aggAll<DenseMatrix<double>>(AggOpCode::SUM, arg, ctx);
    // }
    // void _minAll__double__DenseMatrix_double(double * res, const DenseMatrix<double> * arg, DCTX(ctx)) {
    //     *res = aggAll<DenseMatrix<double>>(AggOpCode::MIN, arg, ctx);
    // }
    // void _maxAll__double__DenseMatrix_double(double * res, const DenseMatrix<double> * arg, DCTX(ctx)) {
    //     *res = aggAll<DenseMatrix<double>>(AggOpCode::MAX, arg, ctx);
    // }
    // void _meanAll__double__DenseMatrix_double(double * res, const DenseMatrix<double> * arg, DCTX(ctx)) {
    //     *res = aggAll<DenseMatrix<double>>(AggOpCode::MEAN, arg, ctx);
    // }
    // void _sumAll__int64_t__DenseMatrix_int64_t(int64_t * res, const DenseMatrix<int64_t> * arg, DCTX(ctx)) {
    //     *res = aggAll<DenseMatrix<int64_t>>(AggOpCode::SUM, arg, ctx);
    // }
    // void _minAll__int64_t__DenseMatrix_int64_t(int64_t * res, const DenseMatrix<int64_t> * arg, DCTX(ctx)) {
    //     *res = aggAll<DenseMatrix<int64_t>>(AggOpCode::MIN, arg, ctx);
    // }
    // void _maxAll__int64_t__DenseMatrix_int64_t(int64_t * res, const DenseMatrix<int64_t> * arg, DCTX(ctx)) {
    //     *res = aggAll<DenseMatrix<int64_t>>(AggOpCode::MAX, arg, ctx);
    // }
    // void _meanAll__int64_t__DenseMatrix_int64_t(int64_t * res, const DenseMatrix<int64_t> * arg, DCTX(ctx)) {
    //     *res = aggAll<DenseMatrix<int64_t>>(AggOpCode::MEAN, arg, ctx);
    // }
    // void _sumAll__double__CSRMatrix_double(double * res, const CSRMatrix<double> * arg, DCTX(ctx)) {
    //     *res = aggAll<CSRMatrix<double>>(AggOpCode::SUM, arg, ctx);
    // }
    // void _minAll__double__CSRMatrix_double(double * res, const CSRMatrix<double> * arg, DCTX(ctx)) {
    //     *res = aggAll<CSRMatrix<double>>(AggOpCode::MIN, arg, ctx);
    // }
    // void _maxAll__double__CSRMatrix_double(double * res, const CSRMatrix<double> * arg, DCTX(ctx)) {
    //     *res = aggAll<CSRMatrix<double>>(AggOpCode::MAX, arg, ctx);
    // }
    // void _meanAll__double__CSRMatrix_double(double * res, const CSRMatrix<double> * arg, DCTX(ctx)) {
    //     *res = aggAll<CSRMatrix<double>>(AggOpCode::MEAN, arg, ctx);
    // }
    // void _sumAll__int64_t__CSRMatrix_int64_t(int64_t * res, const CSRMatrix<int64_t> * arg, DCTX(ctx)) {
    //     *res = aggAll<CSRMatrix<int64_t>>(AggOpCode::SUM, arg, ctx);
    // }
    // void _minAll__int64_t__CSRMatrix_int64_t(int64_t * res, const CSRMatrix<int64_t> * arg, DCTX(ctx)) {
    //     *res = aggAll<CSRMatrix<int64_t>>(AggOpCode::MIN, arg, ctx);
    // }
    // void _maxAll__int64_t__CSRMatrix_int64_t(int64_t * res, const CSRMatrix<int64_t> * arg, DCTX(ctx)) {
    //     *res = aggAll<CSRMatrix<int64_t>>(AggOpCode::MAX, arg, ctx);
    // }
    // void _meanAll__int64_t__CSRMatrix_int64_t(int64_t * res, const CSRMatrix<int64_t> * arg, DCTX(ctx)) {
    //     *res = aggAll<CSRMatrix<int64_t>>(AggOpCode::MEAN, arg, ctx);
    // }
    // // ----------------------------------------------------------------------------
    // // aggCol
    // // ----------------------------------------------------------------------------
    // void _sumCol__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * arg, DCTX(ctx)) {
    //     aggCol<DenseMatrix<double>, DenseMatrix<double>>(AggOpCode::SUM, *res, arg, ctx);
    // }
    // void _minCol__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * arg, DCTX(ctx)) {
    //     aggCol<DenseMatrix<double>, DenseMatrix<double>>(AggOpCode::MIN, *res, arg, ctx);
    // }
    // void _maxCol__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * arg, DCTX(ctx)) {
    //     aggCol<DenseMatrix<double>, DenseMatrix<double>>(AggOpCode::MAX, *res, arg, ctx);
    // }
    // void _meanCol__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * arg, DCTX(ctx)) {
    //     aggCol<DenseMatrix<double>, DenseMatrix<double>>(AggOpCode::MEAN, *res, arg, ctx);
    // }
    // void _stddevCol__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * arg, DCTX(ctx)) {
    //     aggCol<DenseMatrix<double>, DenseMatrix<double>>(AggOpCode::STDDEV, *res, arg, ctx);
    // }
    // void _sumCol__DenseMatrix_float__DenseMatrix_float(DenseMatrix<float> ** res, const DenseMatrix<float> * arg, DCTX(ctx)) {
    //     aggCol<DenseMatrix<float>, DenseMatrix<float>>(AggOpCode::SUM, *res, arg, ctx);
    // }
    // void _minCol__DenseMatrix_float__DenseMatrix_float(DenseMatrix<float> ** res, const DenseMatrix<float> * arg, DCTX(ctx)) {
    //     aggCol<DenseMatrix<float>, DenseMatrix<float>>(AggOpCode::MIN, *res, arg, ctx);
    // }
    // void _maxCol__DenseMatrix_float__DenseMatrix_float(DenseMatrix<float> ** res, const DenseMatrix<float> * arg, DCTX(ctx)) {
    //     aggCol<DenseMatrix<float>, DenseMatrix<float>>(AggOpCode::MAX, *res, arg, ctx);
    // }
    // void _meanCol__DenseMatrix_float__DenseMatrix_float(DenseMatrix<float> ** res, const DenseMatrix<float> * arg, DCTX(ctx)) {
    //     aggCol<DenseMatrix<float>, DenseMatrix<float>>(AggOpCode::MEAN, *res, arg, ctx);
    // }
    // void _stddevCol__DenseMatrix_float__DenseMatrix_float(DenseMatrix<float> ** res, const DenseMatrix<float> * arg, DCTX(ctx)) {
    //     aggCol<DenseMatrix<float>, DenseMatrix<float>>(AggOpCode::STDDEV, *res, arg, ctx);
    // }
    // void _sumCol__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * arg, DCTX(ctx)) {
    //     aggCol<DenseMatrix<int64_t>, DenseMatrix<int64_t>>(AggOpCode::SUM, *res, arg, ctx);
    // }
    // void _minCol__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * arg, DCTX(ctx)) {
    //     aggCol<DenseMatrix<int64_t>, DenseMatrix<int64_t>>(AggOpCode::MIN, *res, arg, ctx);
    // }
    // void _maxCol__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * arg, DCTX(ctx)) {
    //     aggCol<DenseMatrix<int64_t>, DenseMatrix<int64_t>>(AggOpCode::MAX, *res, arg, ctx);
    // }
    // void _meanCol__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * arg, DCTX(ctx)) {
    //     aggCol<DenseMatrix<int64_t>, DenseMatrix<int64_t>>(AggOpCode::MEAN, *res, arg, ctx);
    // }
    // void _stddevCol__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * arg, DCTX(ctx)) {
    //     aggCol<DenseMatrix<int64_t>, DenseMatrix<int64_t>>(AggOpCode::STDDEV, *res, arg, ctx);
    // }
    // void _sumCol__DenseMatrix_double__CSRMatrix_double(DenseMatrix<double> ** res, const CSRMatrix<double> * arg, DCTX(ctx)) {
    //     aggCol<DenseMatrix<double>, CSRMatrix<double>>(AggOpCode::SUM, *res, arg, ctx);
    // }
    // void _minCol__DenseMatrix_double__CSRMatrix_double(DenseMatrix<double> ** res, const CSRMatrix<double> * arg, DCTX(ctx)) {
    //     aggCol<DenseMatrix<double>, CSRMatrix<double>>(AggOpCode::MIN, *res, arg, ctx);
    // }
    // void _maxCol__DenseMatrix_double__CSRMatrix_double(DenseMatrix<double> ** res, const CSRMatrix<double> * arg, DCTX(ctx)) {
    //     aggCol<DenseMatrix<double>, CSRMatrix<double>>(AggOpCode::MAX, *res, arg, ctx);
    // }
    // void _meanCol__DenseMatrix_double__CSRMatrix_double(DenseMatrix<double> ** res, const CSRMatrix<double> * arg, DCTX(ctx)) {
    //     aggCol<DenseMatrix<double>, CSRMatrix<double>>(AggOpCode::MEAN, *res, arg, ctx);
    // }
    // void _stddevCol__DenseMatrix_double__CSRMatrix_double(DenseMatrix<double> ** res, const CSRMatrix<double> * arg, DCTX(ctx)) {
    //     aggCol<DenseMatrix<double>, CSRMatrix<double>>(AggOpCode::STDDEV, *res, arg, ctx);
    // }
    // void _sumCol__DenseMatrix_int64_t__CSRMatrix_int64_t(DenseMatrix<int64_t> ** res, const CSRMatrix<int64_t> * arg, DCTX(ctx)) {
    //     aggCol<DenseMatrix<int64_t>, CSRMatrix<int64_t>>(AggOpCode::SUM, *res, arg, ctx);
    // }
    // void _minCol__DenseMatrix_int64_t__CSRMatrix_int64_t(DenseMatrix<int64_t> ** res, const CSRMatrix<int64_t> * arg, DCTX(ctx)) {
    //     aggCol<DenseMatrix<int64_t>, CSRMatrix<int64_t>>(AggOpCode::MIN, *res, arg, ctx);
    // }
    // void _maxCol__DenseMatrix_int64_t__CSRMatrix_int64_t(DenseMatrix<int64_t> ** res, const CSRMatrix<int64_t> * arg, DCTX(ctx)) {
    //     aggCol<DenseMatrix<int64_t>, CSRMatrix<int64_t>>(AggOpCode::MAX, *res, arg, ctx);
    // }
    // void _meanCol__DenseMatrix_int64_t__CSRMatrix_int64_t(DenseMatrix<int64_t> ** res, const CSRMatrix<int64_t> * arg, DCTX(ctx)) {
    //     aggCol<DenseMatrix<int64_t>, CSRMatrix<int64_t>>(AggOpCode::MEAN, *res, arg, ctx);
    // }
    // void _stddevCol__DenseMatrix_int64_t__CSRMatrix_int64_t(DenseMatrix<int64_t> ** res, const CSRMatrix<int64_t> * arg, DCTX(ctx)) {
    //     aggCol<DenseMatrix<int64_t>, CSRMatrix<int64_t>>(AggOpCode::STDDEV, *res, arg, ctx);
    // }
    // // ----------------------------------------------------------------------------
    // // aggRow
    // // ----------------------------------------------------------------------------
    // void _sumRow__DenseMatrix_float__DenseMatrix_float(DenseMatrix<float> ** res, const DenseMatrix<float> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<float>, DenseMatrix<float>>(AggOpCode::SUM, *res, arg, ctx);
    // }
    // void _minRow__DenseMatrix_float__DenseMatrix_float(DenseMatrix<float> ** res, const DenseMatrix<float> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<float>, DenseMatrix<float>>(AggOpCode::MIN, *res, arg, ctx);
    // }
    // void _maxRow__DenseMatrix_float__DenseMatrix_float(DenseMatrix<float> ** res, const DenseMatrix<float> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<float>, DenseMatrix<float>>(AggOpCode::MAX, *res, arg, ctx);
    // }
    // void _meanRow__DenseMatrix_float__DenseMatrix_float(DenseMatrix<float> ** res, const DenseMatrix<float> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<float>, DenseMatrix<float>>(AggOpCode::MEAN, *res, arg, ctx);
    // }
    // void _idxminRow__DenseMatrix_float__DenseMatrix_float(DenseMatrix<float> ** res, const DenseMatrix<float> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<float>, DenseMatrix<float>>(AggOpCode::IDXMIN, *res, arg, ctx);
    // }
    // void _idxmaxRow__DenseMatrix_float__DenseMatrix_float(DenseMatrix<float> ** res, const DenseMatrix<float> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<float>, DenseMatrix<float>>(AggOpCode::IDXMAX, *res, arg, ctx);
    // }
    // void _sumRow__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<double>, DenseMatrix<double>>(AggOpCode::SUM, *res, arg, ctx);
    // }
    // void _minRow__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<double>, DenseMatrix<double>>(AggOpCode::MIN, *res, arg, ctx);
    // }
    // void _maxRow__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<double>, DenseMatrix<double>>(AggOpCode::MAX, *res, arg, ctx);
    // }
    // void _meanRow__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<double>, DenseMatrix<double>>(AggOpCode::MEAN, *res, arg, ctx);
    // }
    // void _idxminRow__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<double>, DenseMatrix<double>>(AggOpCode::IDXMIN, *res, arg, ctx);
    // }
    // void _idxmaxRow__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<double>, DenseMatrix<double>>(AggOpCode::IDXMAX, *res, arg, ctx);
    // }
    // void _sumRow__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<int64_t>, DenseMatrix<int64_t>>(AggOpCode::SUM, *res, arg, ctx);
    // }
    // void _minRow__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<int64_t>, DenseMatrix<int64_t>>(AggOpCode::MIN, *res, arg, ctx);
    // }
    // void _maxRow__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<int64_t>, DenseMatrix<int64_t>>(AggOpCode::MAX, *res, arg, ctx);
    // }
    // void _meanRow__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<int64_t>, DenseMatrix<int64_t>>(AggOpCode::MEAN, *res, arg, ctx);
    // }
    // void _idxminRow__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<int64_t>, DenseMatrix<int64_t>>(AggOpCode::IDXMIN, *res, arg, ctx);
    // }
    // void _idxmaxRow__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<int64_t>, DenseMatrix<int64_t>>(AggOpCode::IDXMAX, *res, arg, ctx);
    // }
    // void _sumRow__DenseMatrix_uint8_t__DenseMatrix_uint8_t(DenseMatrix<uint8_t> ** res, const DenseMatrix<uint8_t> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<uint8_t>, DenseMatrix<uint8_t>>(AggOpCode::SUM, *res, arg, ctx);
    // }
    // void _minRow__DenseMatrix_uint8_t__DenseMatrix_uint8_t(DenseMatrix<uint8_t> ** res, const DenseMatrix<uint8_t> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<uint8_t>, DenseMatrix<uint8_t>>(AggOpCode::MIN, *res, arg, ctx);
    // }
    // void _maxRow__DenseMatrix_uint8_t__DenseMatrix_uint8_t(DenseMatrix<uint8_t> ** res, const DenseMatrix<uint8_t> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<uint8_t>, DenseMatrix<uint8_t>>(AggOpCode::MAX, *res, arg, ctx);
    // }
    // void _meanRow__DenseMatrix_uint8_t__DenseMatrix_uint8_t(DenseMatrix<uint8_t> ** res, const DenseMatrix<uint8_t> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<uint8_t>, DenseMatrix<uint8_t>>(AggOpCode::MEAN, *res, arg, ctx);
    // }
    // void _idxminRow__DenseMatrix_uint8_t__DenseMatrix_uint8_t(DenseMatrix<uint8_t> ** res, const DenseMatrix<uint8_t> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<uint8_t>, DenseMatrix<uint8_t>>(AggOpCode::IDXMIN, *res, arg, ctx);
    // }
    // void _idxmaxRow__DenseMatrix_uint8_t__DenseMatrix_uint8_t(DenseMatrix<uint8_t> ** res, const DenseMatrix<uint8_t> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<uint8_t>, DenseMatrix<uint8_t>>(AggOpCode::IDXMAX, *res, arg, ctx);
    // }
    // void _sumRow__DenseMatrix_size_t__DenseMatrix_size_t(DenseMatrix<size_t> ** res, const DenseMatrix<size_t> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<size_t>, DenseMatrix<size_t>>(AggOpCode::SUM, *res, arg, ctx);
    // }
    // void _minRow__DenseMatrix_size_t__DenseMatrix_size_t(DenseMatrix<size_t> ** res, const DenseMatrix<size_t> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<size_t>, DenseMatrix<size_t>>(AggOpCode::MIN, *res, arg, ctx);
    // }
    // void _maxRow__DenseMatrix_size_t__DenseMatrix_size_t(DenseMatrix<size_t> ** res, const DenseMatrix<size_t> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<size_t>, DenseMatrix<size_t>>(AggOpCode::MAX, *res, arg, ctx);
    // }
    // void _meanRow__DenseMatrix_size_t__DenseMatrix_size_t(DenseMatrix<size_t> ** res, const DenseMatrix<size_t> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<size_t>, DenseMatrix<size_t>>(AggOpCode::MEAN, *res, arg, ctx);
    // }
    // void _idxminRow__DenseMatrix_size_t__DenseMatrix_size_t(DenseMatrix<size_t> ** res, const DenseMatrix<size_t> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<size_t>, DenseMatrix<size_t>>(AggOpCode::IDXMIN, *res, arg, ctx);
    // }
    // void _idxmaxRow__DenseMatrix_size_t__DenseMatrix_size_t(DenseMatrix<size_t> ** res, const DenseMatrix<size_t> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<size_t>, DenseMatrix<size_t>>(AggOpCode::IDXMAX, *res, arg, ctx);
    // }
    // void _sumRow__DenseMatrix_double__CSRMatrix_double(DenseMatrix<double> ** res, const CSRMatrix<double> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<double>, CSRMatrix<double>>(AggOpCode::SUM, *res, arg, ctx);
    // }
    // void _minRow__DenseMatrix_double__CSRMatrix_double(DenseMatrix<double> ** res, const CSRMatrix<double> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<double>, CSRMatrix<double>>(AggOpCode::MIN, *res, arg, ctx);
    // }
    // void _maxRow__DenseMatrix_double__CSRMatrix_double(DenseMatrix<double> ** res, const CSRMatrix<double> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<double>, CSRMatrix<double>>(AggOpCode::MAX, *res, arg, ctx);
    // }
    // void _meanRow__DenseMatrix_double__CSRMatrix_double(DenseMatrix<double> ** res, const CSRMatrix<double> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<double>, CSRMatrix<double>>(AggOpCode::MEAN, *res, arg, ctx);
    // }
    // void _idxminRow__DenseMatrix_double__CSRMatrix_double(DenseMatrix<double> ** res, const CSRMatrix<double> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<double>, CSRMatrix<double>>(AggOpCode::IDXMIN, *res, arg, ctx);
    // }
    // void _idxmaxRow__DenseMatrix_double__CSRMatrix_double(DenseMatrix<double> ** res, const CSRMatrix<double> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<double>, CSRMatrix<double>>(AggOpCode::IDXMAX, *res, arg, ctx);
    // }
    // void _sumRow__DenseMatrix_int64_t__CSRMatrix_int64_t(DenseMatrix<int64_t> ** res, const CSRMatrix<int64_t> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<int64_t>, CSRMatrix<int64_t>>(AggOpCode::SUM, *res, arg, ctx);
    // }
    // void _minRow__DenseMatrix_int64_t__CSRMatrix_int64_t(DenseMatrix<int64_t> ** res, const CSRMatrix<int64_t> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<int64_t>, CSRMatrix<int64_t>>(AggOpCode::MIN, *res, arg, ctx);
    // }
    // void _maxRow__DenseMatrix_int64_t__CSRMatrix_int64_t(DenseMatrix<int64_t> ** res, const CSRMatrix<int64_t> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<int64_t>, CSRMatrix<int64_t>>(AggOpCode::MAX, *res, arg, ctx);
    // }
    // void _meanRow__DenseMatrix_int64_t__CSRMatrix_int64_t(DenseMatrix<int64_t> ** res, const CSRMatrix<int64_t> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<int64_t>, CSRMatrix<int64_t>>(AggOpCode::MEAN, *res, arg, ctx);
    // }
    // void _idxminRow__DenseMatrix_int64_t__CSRMatrix_int64_t(DenseMatrix<int64_t> ** res, const CSRMatrix<int64_t> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<int64_t>, CSRMatrix<int64_t>>(AggOpCode::IDXMIN, *res, arg, ctx);
    // }
    // void _idxmaxRow__DenseMatrix_int64_t__CSRMatrix_int64_t(DenseMatrix<int64_t> ** res, const CSRMatrix<int64_t> * arg, DCTX(ctx)) {
    //     aggRow<DenseMatrix<int64_t>, CSRMatrix<int64_t>>(AggOpCode::IDXMAX, *res, arg, ctx);
    // }
    // // ----------------------------------------------------------------------------
    // // cartesian
    // // ----------------------------------------------------------------------------
    // void _cartesian__Frame__Frame__Frame(Frame ** res, const Frame * lhs, const Frame * rhs, DCTX(ctx)) {
    //     cartesian(*res, lhs, rhs, ctx);
    // }
    // // ----------------------------------------------------------------------------
    // // castObj
    // // ----------------------------------------------------------------------------
    // void _cast__DenseMatrix_double__Frame(DenseMatrix<double> ** res, const Frame * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<double>, Frame>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_int64_t__Frame(DenseMatrix<int64_t> ** res, const Frame * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<int64_t>, Frame>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_uint64_t__Frame(DenseMatrix<uint64_t> ** res, const Frame * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<uint64_t>, Frame>(*res, arg, ctx);
    // }
    // void _cast__Frame__DenseMatrix_double(Frame ** res, const DenseMatrix<double> * arg, DCTX(ctx)) {
    //     castObj<Frame, DenseMatrix<double>>(*res, arg, ctx);
    // }
    // void _cast__Frame__DenseMatrix_int64_t(Frame ** res, const DenseMatrix<int64_t> * arg, DCTX(ctx)) {
    //     castObj<Frame, DenseMatrix<int64_t>>(*res, arg, ctx);
    // }
    // void _cast__Frame__DenseMatrix_uint64_t(Frame ** res, const DenseMatrix<uint64_t> * arg, DCTX(ctx)) {
    //     castObj<Frame, DenseMatrix<uint64_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<double>, DenseMatrix<double>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_double__DenseMatrix_float(DenseMatrix<double> ** res, const DenseMatrix<float> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<double>, DenseMatrix<float>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_double__DenseMatrix_int64_t(DenseMatrix<double> ** res, const DenseMatrix<int64_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<double>, DenseMatrix<int64_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_double__DenseMatrix_int32_t(DenseMatrix<double> ** res, const DenseMatrix<int32_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<double>, DenseMatrix<int32_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_double__DenseMatrix_int8_t(DenseMatrix<double> ** res, const DenseMatrix<int8_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<double>, DenseMatrix<int8_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_double__DenseMatrix_uint64_t(DenseMatrix<double> ** res, const DenseMatrix<uint64_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<double>, DenseMatrix<uint64_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_double__DenseMatrix_uint32_t(DenseMatrix<double> ** res, const DenseMatrix<uint32_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<double>, DenseMatrix<uint32_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_double__DenseMatrix_uint8_t(DenseMatrix<double> ** res, const DenseMatrix<uint8_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<double>, DenseMatrix<uint8_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_double__DenseMatrix_size_t(DenseMatrix<double> ** res, const DenseMatrix<size_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<double>, DenseMatrix<size_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_float__DenseMatrix_double(DenseMatrix<float> ** res, const DenseMatrix<double> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<float>, DenseMatrix<double>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_float__DenseMatrix_float(DenseMatrix<float> ** res, const DenseMatrix<float> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<float>, DenseMatrix<float>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_float__DenseMatrix_int64_t(DenseMatrix<float> ** res, const DenseMatrix<int64_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<float>, DenseMatrix<int64_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_float__DenseMatrix_int32_t(DenseMatrix<float> ** res, const DenseMatrix<int32_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<float>, DenseMatrix<int32_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_float__DenseMatrix_int8_t(DenseMatrix<float> ** res, const DenseMatrix<int8_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<float>, DenseMatrix<int8_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_float__DenseMatrix_uint64_t(DenseMatrix<float> ** res, const DenseMatrix<uint64_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<float>, DenseMatrix<uint64_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_float__DenseMatrix_uint32_t(DenseMatrix<float> ** res, const DenseMatrix<uint32_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<float>, DenseMatrix<uint32_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_float__DenseMatrix_uint8_t(DenseMatrix<float> ** res, const DenseMatrix<uint8_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<float>, DenseMatrix<uint8_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_float__DenseMatrix_size_t(DenseMatrix<float> ** res, const DenseMatrix<size_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<float>, DenseMatrix<size_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_int64_t__DenseMatrix_double(DenseMatrix<int64_t> ** res, const DenseMatrix<double> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<int64_t>, DenseMatrix<double>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_int64_t__DenseMatrix_float(DenseMatrix<int64_t> ** res, const DenseMatrix<float> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<int64_t>, DenseMatrix<float>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<int64_t>, DenseMatrix<int64_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_int64_t__DenseMatrix_int32_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int32_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<int64_t>, DenseMatrix<int32_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_int64_t__DenseMatrix_int8_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int8_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<int64_t>, DenseMatrix<int8_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_int64_t__DenseMatrix_uint64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<uint64_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<int64_t>, DenseMatrix<uint64_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_int64_t__DenseMatrix_uint32_t(DenseMatrix<int64_t> ** res, const DenseMatrix<uint32_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<int64_t>, DenseMatrix<uint32_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_int64_t__DenseMatrix_uint8_t(DenseMatrix<int64_t> ** res, const DenseMatrix<uint8_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<int64_t>, DenseMatrix<uint8_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_int64_t__DenseMatrix_size_t(DenseMatrix<int64_t> ** res, const DenseMatrix<size_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<int64_t>, DenseMatrix<size_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_int32_t__DenseMatrix_double(DenseMatrix<int32_t> ** res, const DenseMatrix<double> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<int32_t>, DenseMatrix<double>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_int32_t__DenseMatrix_float(DenseMatrix<int32_t> ** res, const DenseMatrix<float> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<int32_t>, DenseMatrix<float>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_int32_t__DenseMatrix_int64_t(DenseMatrix<int32_t> ** res, const DenseMatrix<int64_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<int32_t>, DenseMatrix<int64_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_int32_t__DenseMatrix_int32_t(DenseMatrix<int32_t> ** res, const DenseMatrix<int32_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<int32_t>, DenseMatrix<int32_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_int32_t__DenseMatrix_int8_t(DenseMatrix<int32_t> ** res, const DenseMatrix<int8_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<int32_t>, DenseMatrix<int8_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_int32_t__DenseMatrix_uint64_t(DenseMatrix<int32_t> ** res, const DenseMatrix<uint64_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<int32_t>, DenseMatrix<uint64_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_int32_t__DenseMatrix_uint32_t(DenseMatrix<int32_t> ** res, const DenseMatrix<uint32_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<int32_t>, DenseMatrix<uint32_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_int32_t__DenseMatrix_uint8_t(DenseMatrix<int32_t> ** res, const DenseMatrix<uint8_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<int32_t>, DenseMatrix<uint8_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_int32_t__DenseMatrix_size_t(DenseMatrix<int32_t> ** res, const DenseMatrix<size_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<int32_t>, DenseMatrix<size_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_int8_t__DenseMatrix_double(DenseMatrix<int8_t> ** res, const DenseMatrix<double> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<int8_t>, DenseMatrix<double>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_int8_t__DenseMatrix_float(DenseMatrix<int8_t> ** res, const DenseMatrix<float> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<int8_t>, DenseMatrix<float>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_int8_t__DenseMatrix_int64_t(DenseMatrix<int8_t> ** res, const DenseMatrix<int64_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<int8_t>, DenseMatrix<int64_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_int8_t__DenseMatrix_int32_t(DenseMatrix<int8_t> ** res, const DenseMatrix<int32_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<int8_t>, DenseMatrix<int32_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_int8_t__DenseMatrix_int8_t(DenseMatrix<int8_t> ** res, const DenseMatrix<int8_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<int8_t>, DenseMatrix<int8_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_int8_t__DenseMatrix_uint64_t(DenseMatrix<int8_t> ** res, const DenseMatrix<uint64_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<int8_t>, DenseMatrix<uint64_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_int8_t__DenseMatrix_uint32_t(DenseMatrix<int8_t> ** res, const DenseMatrix<uint32_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<int8_t>, DenseMatrix<uint32_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_int8_t__DenseMatrix_uint8_t(DenseMatrix<int8_t> ** res, const DenseMatrix<uint8_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<int8_t>, DenseMatrix<uint8_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_int8_t__DenseMatrix_size_t(DenseMatrix<int8_t> ** res, const DenseMatrix<size_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<int8_t>, DenseMatrix<size_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_uint64_t__DenseMatrix_double(DenseMatrix<uint64_t> ** res, const DenseMatrix<double> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<uint64_t>, DenseMatrix<double>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_uint64_t__DenseMatrix_float(DenseMatrix<uint64_t> ** res, const DenseMatrix<float> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<uint64_t>, DenseMatrix<float>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_uint64_t__DenseMatrix_int64_t(DenseMatrix<uint64_t> ** res, const DenseMatrix<int64_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<uint64_t>, DenseMatrix<int64_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_uint64_t__DenseMatrix_int32_t(DenseMatrix<uint64_t> ** res, const DenseMatrix<int32_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<uint64_t>, DenseMatrix<int32_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_uint64_t__DenseMatrix_int8_t(DenseMatrix<uint64_t> ** res, const DenseMatrix<int8_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<uint64_t>, DenseMatrix<int8_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_uint64_t__DenseMatrix_uint64_t(DenseMatrix<uint64_t> ** res, const DenseMatrix<uint64_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<uint64_t>, DenseMatrix<uint64_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_uint64_t__DenseMatrix_uint32_t(DenseMatrix<uint64_t> ** res, const DenseMatrix<uint32_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<uint64_t>, DenseMatrix<uint32_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_uint64_t__DenseMatrix_uint8_t(DenseMatrix<uint64_t> ** res, const DenseMatrix<uint8_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<uint64_t>, DenseMatrix<uint8_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_uint64_t__DenseMatrix_size_t(DenseMatrix<uint64_t> ** res, const DenseMatrix<size_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<uint64_t>, DenseMatrix<size_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_uint32_t__DenseMatrix_double(DenseMatrix<uint32_t> ** res, const DenseMatrix<double> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<uint32_t>, DenseMatrix<double>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_uint32_t__DenseMatrix_float(DenseMatrix<uint32_t> ** res, const DenseMatrix<float> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<uint32_t>, DenseMatrix<float>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_uint32_t__DenseMatrix_int64_t(DenseMatrix<uint32_t> ** res, const DenseMatrix<int64_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<uint32_t>, DenseMatrix<int64_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_uint32_t__DenseMatrix_int32_t(DenseMatrix<uint32_t> ** res, const DenseMatrix<int32_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<uint32_t>, DenseMatrix<int32_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_uint32_t__DenseMatrix_int8_t(DenseMatrix<uint32_t> ** res, const DenseMatrix<int8_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<uint32_t>, DenseMatrix<int8_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_uint32_t__DenseMatrix_uint64_t(DenseMatrix<uint32_t> ** res, const DenseMatrix<uint64_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<uint32_t>, DenseMatrix<uint64_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_uint32_t__DenseMatrix_uint32_t(DenseMatrix<uint32_t> ** res, const DenseMatrix<uint32_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<uint32_t>, DenseMatrix<uint32_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_uint32_t__DenseMatrix_uint8_t(DenseMatrix<uint32_t> ** res, const DenseMatrix<uint8_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<uint32_t>, DenseMatrix<uint8_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_uint32_t__DenseMatrix_size_t(DenseMatrix<uint32_t> ** res, const DenseMatrix<size_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<uint32_t>, DenseMatrix<size_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_uint8_t__DenseMatrix_double(DenseMatrix<uint8_t> ** res, const DenseMatrix<double> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<uint8_t>, DenseMatrix<double>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_uint8_t__DenseMatrix_float(DenseMatrix<uint8_t> ** res, const DenseMatrix<float> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<uint8_t>, DenseMatrix<float>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_uint8_t__DenseMatrix_int64_t(DenseMatrix<uint8_t> ** res, const DenseMatrix<int64_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<uint8_t>, DenseMatrix<int64_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_uint8_t__DenseMatrix_int32_t(DenseMatrix<uint8_t> ** res, const DenseMatrix<int32_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<uint8_t>, DenseMatrix<int32_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_uint8_t__DenseMatrix_int8_t(DenseMatrix<uint8_t> ** res, const DenseMatrix<int8_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<uint8_t>, DenseMatrix<int8_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_uint8_t__DenseMatrix_uint64_t(DenseMatrix<uint8_t> ** res, const DenseMatrix<uint64_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<uint8_t>, DenseMatrix<uint64_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_uint8_t__DenseMatrix_uint32_t(DenseMatrix<uint8_t> ** res, const DenseMatrix<uint32_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<uint8_t>, DenseMatrix<uint32_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_uint8_t__DenseMatrix_uint8_t(DenseMatrix<uint8_t> ** res, const DenseMatrix<uint8_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<uint8_t>, DenseMatrix<uint8_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_uint8_t__DenseMatrix_size_t(DenseMatrix<uint8_t> ** res, const DenseMatrix<size_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<uint8_t>, DenseMatrix<size_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_size_t__DenseMatrix_double(DenseMatrix<size_t> ** res, const DenseMatrix<double> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<size_t>, DenseMatrix<double>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_size_t__DenseMatrix_float(DenseMatrix<size_t> ** res, const DenseMatrix<float> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<size_t>, DenseMatrix<float>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_size_t__DenseMatrix_int64_t(DenseMatrix<size_t> ** res, const DenseMatrix<int64_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<size_t>, DenseMatrix<int64_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_size_t__DenseMatrix_int32_t(DenseMatrix<size_t> ** res, const DenseMatrix<int32_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<size_t>, DenseMatrix<int32_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_size_t__DenseMatrix_int8_t(DenseMatrix<size_t> ** res, const DenseMatrix<int8_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<size_t>, DenseMatrix<int8_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_size_t__DenseMatrix_uint64_t(DenseMatrix<size_t> ** res, const DenseMatrix<uint64_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<size_t>, DenseMatrix<uint64_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_size_t__DenseMatrix_uint32_t(DenseMatrix<size_t> ** res, const DenseMatrix<uint32_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<size_t>, DenseMatrix<uint32_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_size_t__DenseMatrix_uint8_t(DenseMatrix<size_t> ** res, const DenseMatrix<uint8_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<size_t>, DenseMatrix<uint8_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_size_t__DenseMatrix_size_t(DenseMatrix<size_t> ** res, const DenseMatrix<size_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<size_t>, DenseMatrix<size_t>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_double__CSRMatrix_double(DenseMatrix<double> ** res, const CSRMatrix<double> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<double>, CSRMatrix<double>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_float__CSRMatrix_float(DenseMatrix<float> ** res, const CSRMatrix<float> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<float>, CSRMatrix<float>>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_int64_t__CSRMatrix_int64_t(DenseMatrix<int64_t> ** res, const CSRMatrix<int64_t> * arg, DCTX(ctx)) {
    //     castObj<DenseMatrix<int64_t>, CSRMatrix<int64_t>>(*res, arg, ctx);
    // }
    // void _cast__CSRMatrix_double__DenseMatrix_double(CSRMatrix<double> ** res, const DenseMatrix<double> * arg, DCTX(ctx)) {
    //     castObj<CSRMatrix<double>, DenseMatrix<double>>(*res, arg, ctx);
    // }
    // void _cast__CSRMatrix_float__DenseMatrix_float(CSRMatrix<float> ** res, const DenseMatrix<float> * arg, DCTX(ctx)) {
    //     castObj<CSRMatrix<float>, DenseMatrix<float>>(*res, arg, ctx);
    // }
    // void _cast__CSRMatrix_int64_t__DenseMatrix_int64_t(CSRMatrix<int64_t> ** res, const DenseMatrix<int64_t> * arg, DCTX(ctx)) {
    //     castObj<CSRMatrix<int64_t>, DenseMatrix<int64_t>>(*res, arg, ctx);
    // }
    // // ----------------------------------------------------------------------------
    // // castObjSca
    // // ----------------------------------------------------------------------------
    // void _cast__double__DenseMatrix_double(double * res, const DenseMatrix<double> * arg, DCTX(ctx)) {
    //     *res = castObjSca<double, DenseMatrix<double>>(arg, ctx);
    // }
    // void _cast__double__DenseMatrix_float(double * res, const DenseMatrix<float> * arg, DCTX(ctx)) {
    //     *res = castObjSca<double, DenseMatrix<float>>(arg, ctx);
    // }
    // void _cast__double__DenseMatrix_int64_t(double * res, const DenseMatrix<int64_t> * arg, DCTX(ctx)) {
    //     *res = castObjSca<double, DenseMatrix<int64_t>>(arg, ctx);
    // }
    // void _cast__double__DenseMatrix_int32_t(double * res, const DenseMatrix<int32_t> * arg, DCTX(ctx)) {
    //     *res = castObjSca<double, DenseMatrix<int32_t>>(arg, ctx);
    // }
    // void _cast__double__DenseMatrix_int8_t(double * res, const DenseMatrix<int8_t> * arg, DCTX(ctx)) {
    //     *res = castObjSca<double, DenseMatrix<int8_t>>(arg, ctx);
    // }
    // void _cast__double__DenseMatrix_uint64_t(double * res, const DenseMatrix<uint64_t> * arg, DCTX(ctx)) {
    //     *res = castObjSca<double, DenseMatrix<uint64_t>>(arg, ctx);
    // }
    // void _cast__double__DenseMatrix_uint32_t(double * res, const DenseMatrix<uint32_t> * arg, DCTX(ctx)) {
    //     *res = castObjSca<double, DenseMatrix<uint32_t>>(arg, ctx);
    // }
    // void _cast__double__DenseMatrix_uint8_t(double * res, const DenseMatrix<uint8_t> * arg, DCTX(ctx)) {
    //     *res = castObjSca<double, DenseMatrix<uint8_t>>(arg, ctx);
    // }
    // void _cast__double__DenseMatrix_size_t(double * res, const DenseMatrix<size_t> * arg, DCTX(ctx)) {
    //     *res = castObjSca<double, DenseMatrix<size_t>>(arg, ctx);
    // }
    // void _cast__int64_t__DenseMatrix_double(int64_t * res, const DenseMatrix<double> * arg, DCTX(ctx)) {
    //     *res = castObjSca<int64_t, DenseMatrix<double>>(arg, ctx);
    // }
    // void _cast__int64_t__DenseMatrix_float(int64_t * res, const DenseMatrix<float> * arg, DCTX(ctx)) {
    //     *res = castObjSca<int64_t, DenseMatrix<float>>(arg, ctx);
    // }
    // void _cast__int64_t__DenseMatrix_int64_t(int64_t * res, const DenseMatrix<int64_t> * arg, DCTX(ctx)) {
    //     *res = castObjSca<int64_t, DenseMatrix<int64_t>>(arg, ctx);
    // }
    // void _cast__int64_t__DenseMatrix_int32_t(int64_t * res, const DenseMatrix<int32_t> * arg, DCTX(ctx)) {
    //     *res = castObjSca<int64_t, DenseMatrix<int32_t>>(arg, ctx);
    // }
    // void _cast__int64_t__DenseMatrix_int8_t(int64_t * res, const DenseMatrix<int8_t> * arg, DCTX(ctx)) {
    //     *res = castObjSca<int64_t, DenseMatrix<int8_t>>(arg, ctx);
    // }
    // void _cast__int64_t__DenseMatrix_uint64_t(int64_t * res, const DenseMatrix<uint64_t> * arg, DCTX(ctx)) {
    //     *res = castObjSca<int64_t, DenseMatrix<uint64_t>>(arg, ctx);
    // }
    // void _cast__int64_t__DenseMatrix_uint32_t(int64_t * res, const DenseMatrix<uint32_t> * arg, DCTX(ctx)) {
    //     *res = castObjSca<int64_t, DenseMatrix<uint32_t>>(arg, ctx);
    // }
    // void _cast__int64_t__DenseMatrix_uint8_t(int64_t * res, const DenseMatrix<uint8_t> * arg, DCTX(ctx)) {
    //     *res = castObjSca<int64_t, DenseMatrix<uint8_t>>(arg, ctx);
    // }
    // void _cast__int64_t__DenseMatrix_size_t(int64_t * res, const DenseMatrix<size_t> * arg, DCTX(ctx)) {
    //     *res = castObjSca<int64_t, DenseMatrix<size_t>>(arg, ctx);
    // }
    // void _cast__double__Frame(double * res, const Frame * arg, DCTX(ctx)) {
    //     *res = castObjSca<double, Frame>(arg, ctx);
    // }
    // void _cast__int64_t__Frame(int64_t * res, const Frame * arg, DCTX(ctx)) {
    //     *res = castObjSca<int64_t, Frame>(arg, ctx);
    // }
    // // ----------------------------------------------------------------------------
    // // castSca
    // // ----------------------------------------------------------------------------
    // void _cast__double__double(double * res, double arg, DCTX(ctx)) {
    //     *res = castSca<double, double>(arg, ctx);
    // }
    // void _cast__double__int64_t(double * res, int64_t arg, DCTX(ctx)) {
    //     *res = castSca<double, int64_t>(arg, ctx);
    // }
    // void _cast__double__size_t(double * res, size_t arg, DCTX(ctx)) {
    //     *res = castSca<double, size_t>(arg, ctx);
    // }
    // void _cast__double__bool(double * res, bool arg, DCTX(ctx)) {
    //     *res = castSca<double, bool>(arg, ctx);
    // }
    // void _cast__float__float(float * res, float arg, DCTX(ctx)) {
    //     *res = castSca<float, float>(arg, ctx);
    // }
    // void _cast__float__double(float * res, double arg, DCTX(ctx)) {
    //     *res = castSca<float, double>(arg, ctx);
    // }
    // void _cast__float__size_t(float * res, size_t arg, DCTX(ctx)) {
    //     *res = castSca<float, size_t>(arg, ctx);
    // }
    // void _cast__float__uint32_t(float * res, uint32_t arg, DCTX(ctx)) {
    //     *res = castSca<float, uint32_t>(arg, ctx);
    // }
    // void _cast__float__int64_t(float * res, int64_t arg, DCTX(ctx)) {
    //     *res = castSca<float, int64_t>(arg, ctx);
    // }
    // void _cast__int64_t__double(int64_t * res, double arg, DCTX(ctx)) {
    //     *res = castSca<int64_t, double>(arg, ctx);
    // }
    // void _cast__int64_t__float(int64_t * res, float arg, DCTX(ctx)) {
    //     *res = castSca<int64_t, float>(arg, ctx);
    // }
    // void _cast__int64_t__int64_t(int64_t * res, int64_t arg, DCTX(ctx)) {
    //     *res = castSca<int64_t, int64_t>(arg, ctx);
    // }
    // void _cast__int64_t__size_t(int64_t * res, size_t arg, DCTX(ctx)) {
    //     *res = castSca<int64_t, size_t>(arg, ctx);
    // }
    // void _cast__int64_t__uint32_t(int64_t * res, uint32_t arg, DCTX(ctx)) {
    //     *res = castSca<int64_t, uint32_t>(arg, ctx);
    // }
    // void _cast__int64_t__bool(int64_t * res, bool arg, DCTX(ctx)) {
    //     *res = castSca<int64_t, bool>(arg, ctx);
    // }
    // void _cast__size_t__double(size_t * res, double arg, DCTX(ctx)) {
    //     *res = castSca<size_t, double>(arg, ctx);
    // }
    // void _cast__size_t__int64_t(size_t * res, int64_t arg, DCTX(ctx)) {
    //     *res = castSca<size_t, int64_t>(arg, ctx);
    // }
    // void _cast__size_t__uint32_t(size_t * res, uint32_t arg, DCTX(ctx)) {
    //     *res = castSca<size_t, uint32_t>(arg, ctx);
    // }
    // void _cast__size_t__uint64_t(size_t * res, uint64_t arg, DCTX(ctx)) {
    //     *res = castSca<size_t, uint64_t>(arg, ctx);
    // }
    // void _cast__size_t__size_t(size_t * res, size_t arg, DCTX(ctx)) {
    //     *res = castSca<size_t, size_t>(arg, ctx);
    // }
    // void _cast__size_t__bool(size_t * res, bool arg, DCTX(ctx)) {
    //     *res = castSca<size_t, bool>(arg, ctx);
    // }
    // void _cast__bool__double(bool * res, double arg, DCTX(ctx)) {
    //     *res = castSca<bool, double>(arg, ctx);
    // }
    // void _cast__bool__int64_t(bool * res, int64_t arg, DCTX(ctx)) {
    //     *res = castSca<bool, int64_t>(arg, ctx);
    // }
    // void _cast__bool__size_t(bool * res, size_t arg, DCTX(ctx)) {
    //     *res = castSca<bool, size_t>(arg, ctx);
    // }
    // void _cast__uint32_t__uint8_t(uint32_t * res, uint8_t arg, DCTX(ctx)) {
    //     *res = castSca<uint32_t, uint8_t>(arg, ctx);
    // }
    // void _cast__uint32_t__int64_t(uint32_t * res, int64_t arg, DCTX(ctx)) {
    //     *res = castSca<uint32_t, int64_t>(arg, ctx);
    // }
    // void _cast__uint64_t__int64_t(uint64_t * res, int64_t arg, DCTX(ctx)) {
    //     *res = castSca<uint64_t, int64_t>(arg, ctx);
    // }
    // void _cast__uint32_t__size_t(uint32_t * res, size_t arg, DCTX(ctx)) {
    //     *res = castSca<uint32_t, size_t>(arg, ctx);
    // }
    // void _cast__uint32_t__float(uint32_t * res, float arg, DCTX(ctx)) {
    //     *res = castSca<uint32_t, float>(arg, ctx);
    // }
    // void _cast__uint8_t__int64_t(uint8_t * res, int64_t arg, DCTX(ctx)) {
    //     *res = castSca<uint8_t, int64_t>(arg, ctx);
    // }
    // void _cast__bool__bool(bool * res, bool arg, DCTX(ctx)) {
    //     *res = castSca<bool, bool>(arg, ctx);
    // }
    // void _cast__char__double(const char * * res, double arg, DCTX(ctx)) {
    //     *res = castSca<const char *, double>(arg, ctx);
    // }
    // void _cast__char__int64_t(const char * * res, int64_t arg, DCTX(ctx)) {
    //     *res = castSca<const char *, int64_t>(arg, ctx);
    // }
    // // ----------------------------------------------------------------------------
    // // castScaObj
    // // ----------------------------------------------------------------------------
    // void _cast__DenseMatrix_double__double(DenseMatrix<double> ** res, double arg, DCTX(ctx)) {
    //     castScaObj<DenseMatrix<double>, double>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_float__double(DenseMatrix<float> ** res, double arg, DCTX(ctx)) {
    //     castScaObj<DenseMatrix<float>, double>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_int64_t__double(DenseMatrix<int64_t> ** res, double arg, DCTX(ctx)) {
    //     castScaObj<DenseMatrix<int64_t>, double>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_int32_t__double(DenseMatrix<int32_t> ** res, double arg, DCTX(ctx)) {
    //     castScaObj<DenseMatrix<int32_t>, double>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_int8_t__double(DenseMatrix<int8_t> ** res, double arg, DCTX(ctx)) {
    //     castScaObj<DenseMatrix<int8_t>, double>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_uint64_t__double(DenseMatrix<uint64_t> ** res, double arg, DCTX(ctx)) {
    //     castScaObj<DenseMatrix<uint64_t>, double>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_uint32_t__double(DenseMatrix<uint32_t> ** res, double arg, DCTX(ctx)) {
    //     castScaObj<DenseMatrix<uint32_t>, double>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_uint8_t__double(DenseMatrix<uint8_t> ** res, double arg, DCTX(ctx)) {
    //     castScaObj<DenseMatrix<uint8_t>, double>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_double__int64_t(DenseMatrix<double> ** res, int64_t arg, DCTX(ctx)) {
    //     castScaObj<DenseMatrix<double>, int64_t>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_float__int64_t(DenseMatrix<float> ** res, int64_t arg, DCTX(ctx)) {
    //     castScaObj<DenseMatrix<float>, int64_t>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_int64_t__int64_t(DenseMatrix<int64_t> ** res, int64_t arg, DCTX(ctx)) {
    //     castScaObj<DenseMatrix<int64_t>, int64_t>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_int32_t__int64_t(DenseMatrix<int32_t> ** res, int64_t arg, DCTX(ctx)) {
    //     castScaObj<DenseMatrix<int32_t>, int64_t>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_int8_t__int64_t(DenseMatrix<int8_t> ** res, int64_t arg, DCTX(ctx)) {
    //     castScaObj<DenseMatrix<int8_t>, int64_t>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_uint64_t__int64_t(DenseMatrix<uint64_t> ** res, int64_t arg, DCTX(ctx)) {
    //     castScaObj<DenseMatrix<uint64_t>, int64_t>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_uint32_t__int64_t(DenseMatrix<uint32_t> ** res, int64_t arg, DCTX(ctx)) {
    //     castScaObj<DenseMatrix<uint32_t>, int64_t>(*res, arg, ctx);
    // }
    // void _cast__DenseMatrix_uint8_t__int64_t(DenseMatrix<uint8_t> ** res, int64_t arg, DCTX(ctx)) {
    //     castScaObj<DenseMatrix<uint8_t>, int64_t>(*res, arg, ctx);
    // }
    // void _cast__Frame__double(Frame ** res, double arg, DCTX(ctx)) {
    //     castScaObj<Frame, double>(*res, arg, ctx);
    // }
    // void _cast__Frame__int64_t(Frame ** res, int64_t arg, DCTX(ctx)) {
    //     castScaObj<Frame, int64_t>(*res, arg, ctx);
    // }
    // // ----------------------------------------------------------------------------
    // // colBind
    // // ----------------------------------------------------------------------------
    // void _colBind__DenseMatrix_double__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * lhs, const DenseMatrix<double> * rhs, DCTX(ctx)) {
    //     colBind<DenseMatrix<double>, DenseMatrix<double>, DenseMatrix<double>>(*res, lhs, rhs, ctx);
    // }
    // void _colBind__DenseMatrix_float__DenseMatrix_float__DenseMatrix_float(DenseMatrix<float> ** res, const DenseMatrix<float> * lhs, const DenseMatrix<float> * rhs, DCTX(ctx)) {
    //     colBind<DenseMatrix<float>, DenseMatrix<float>, DenseMatrix<float>>(*res, lhs, rhs, ctx);
    // }
    // void _colBind__DenseMatrix_int64_t__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * lhs, const DenseMatrix<int64_t> * rhs, DCTX(ctx)) {
    //     colBind<DenseMatrix<int64_t>, DenseMatrix<int64_t>, DenseMatrix<int64_t>>(*res, lhs, rhs, ctx);
    // }
    // // ----------------------------------------------------------------------------
    // // colBind
    // // ----------------------------------------------------------------------------
    // void _colBind__Frame__Frame__Frame(Frame ** res, const Frame * lhs, const Frame * rhs, DCTX(ctx)) {
    //     colBind<Frame, Frame, Frame>(*res, lhs, rhs, ctx);
    // }
    // void _colBind__CSRMatrix_double__CSRMatrix_double__CSRMatrix_double(CSRMatrix<double> ** res, const CSRMatrix<double> * lhs, const CSRMatrix<double> * rhs, DCTX(ctx)) {
    //     colBind<CSRMatrix<double>, CSRMatrix<double>, CSRMatrix<double>>(*res, lhs, rhs, ctx);
    // }
    // void _colBind__CSRMatrix_int64_t__CSRMatrix_int64_t__CSRMatrix_int64_t(CSRMatrix<int64_t> ** res, const CSRMatrix<int64_t> * lhs, const CSRMatrix<int64_t> * rhs, DCTX(ctx)) {
    //     colBind<CSRMatrix<int64_t>, CSRMatrix<int64_t>, CSRMatrix<int64_t>>(*res, lhs, rhs, ctx);
    // }
    // // ----------------------------------------------------------------------------
    // // concat
    // // ----------------------------------------------------------------------------
    // void _concat__char__char__char(char ** res, const char * lhs, const char * rhs, DCTX(ctx)) {
    //     concat(*res, lhs, rhs, ctx);
    // }
    // ----------------------------------------------------------------------------
    // createDaphneContext
    // ----------------------------------------------------------------------------
    void _createDaphneContext__DaphneContext__uint64_t(DaphneContext ** res, uint64_t configPtr) {
        createDaphneContext(*res, configPtr);
    }
    // ----------------------------------------------------------------------------
    // createDistributedContext
    // ----------------------------------------------------------------------------
    void _createDistributedContext(DCTX(ctx)) {
        createDistributedContext(ctx);
    }
    // ----------------------------------------------------------------------------
    // getDataPointer
    // ----------------------------------------------------------------------------

    // void _printMemRef__StridedMemRefType_(StridedMemRefType<double, 2>* memref) {
    void
    _printMemRef__size_t__size_t__size_t__size_t__size_t__size_t(//StridedMemRefType<double,2> *memref,
    // _printMemRef__StridedMemRefType___size_t__size_t__size_t__size_t__size_t(StridedMemRefType<double,2> *memref,
        double *basePtr, /*double*data,*/ size_t offset, size_t size0, size_t size1,
        size_t stride0, size_t stride1) {
        for (int r = 0; r < size0; ++r) {
            for (int c = 0; c < size1; ++c) {
                std::cout << basePtr[size0 * c + r ] << " ";
            }
            std::cout << "\n";
        }
        std::cout <<"\noffset: " << offset << "\nsize0: " << size0 << " size1: " <<size1<<"\nstride0: " << stride0 << " stride1: " << stride1 << "\n";

        int range = 32;
        for (int i = 0; i < range; i++ )
        {
            std::cout << "addr: " << ((uint64_t*)&basePtr - range/2 + i) << "\tvalue: 0x" << std::hex <<  *((uint64_t*)&basePtr - range/2 + i);
            if (i == (range/2))
                std::cout << "\t\t\t <--------------";
            std::cout << "\n";
        }

    //     std::cout << "\nStridedMemRefType@" << "\n"
    //         << "\tbasePtr: \t" << basePtr << "\t\tdata: " << data << "\n"
    //         << "\toffset: \t" << offset << "\n"
    //         << "\tsizes[0]: \t" << sizes0 <<   "\t\tsizes[1]: " << sizes1 << "\n"
    //         << "\tstrides[0]: \t" << strides0 <<   "\t\tstrides[1]: " << strides1 << "\n\n";

#if 0
        std::cout << "memref@" << memref << "\t(StridedMemRefType*)&memref@" << &memref<< "\n";

        for (int i = 0; i < 128; i++ )
        {
            std::cout << "addr: " << ((uint64_t*)&memref - 64 + i) << "\tvalue: 0x" << std::hex <<  *((uint64_t*)&memref - 64 + i);
            if (i == 64)
                std::cout << "\t\t\t <--------------";
            std::cout << "\n";
        }
        std::cout << "\nStridedMemRefType@" << memref << "\n"
            << "\tbasePtr: \t0x" << memref->basePtr << "\t\tdata: " << memref->data << "\n"
            << "\toffset: \t0x" << memref->offset << "\n"
            << "\tsizes[0]: \t0x" << memref->sizes[0] <<   "\t\tsizes[1]: " << memref->sizes[1] << "\n"
            << "\tstrides[0]: \t0x" << memref->strides[0] <<   "\t\tstrides[1]: " << memref->strides[1] << "\n\n";


        StridedMemRefType<double,2>* ptr = (StridedMemRefType<double,2>*)&memref;
        std::cout << "\nStridedMemRefType@addr of input, cast to single *" << ptr << "\n"
            << "\tbasePtr: \t" << ptr->basePtr << "\t\tdata: " << ptr->data << "\n"
            << "\toffset: \t0x" << ptr->offset << "\n"
            << "\tsizes[0]: \t0x" << ptr->sizes[0] <<   "\t\tsizes[1]: " << ptr->sizes[1] << "\n"
            << "\tstrides[0]: \t0x" << ptr->strides[0] <<   "\t\tstrides[1]: " << ptr->strides[1] << "\n\n";
#endif
    }

    // void _getDenseMatrixFromMemRef__DenseMatrix_double__StridedMemRefType_(DenseMatrix<double>**res, StridedMemRefType<double, 2> *input, DaphneContext *ctx) {
    void _getDenseMatrixFromMemRef__DenseMatrix_double__size_t__size_t__size_t__size_t__size_t__size_t(DenseMatrix<double>**res,
        double *basePtr, size_t offset, size_t size0, size_t size1,
        size_t stride0, size_t stride1, DaphneContext *ctx) {

        // TODO(phil):
        // if StridedMemRefType comes from a GetMemRefDenseMatrix call (daphne::DM as source)
        // we need to pass the StridedMemRefType* as is
        // if we memref::AllocOp the StridedMemRefType we need to take it's address
        //
#if 0
        std::cout << "StridedMemRefType sizeof: " << sizeof(StridedMemRefType<double, 2>) << "\n";
        std::cout << "res@" << res << "\tinput@" << input << "\tctx@" << ctx << "\n";

        std::cout << "&res@" << &res << "\t&input@" << &input << "\t&ctx@" << &ctx << "\n";


        for (int i = 0; i < 64; i++ )
        {
            std::cout << "addr: " << ((uint64_t*)&ctx - 32 + i) << "\tvalue: 0x" << std::hex <<  *((uint64_t*)&ctx - 32 + i) << "\n";
        }

        StridedMemRefType<double,2>* ptr = (StridedMemRefType<double,2>*)&input;
        std::cout << "\nStridedMemRefType@addr of input, cast to single *" << ptr << "\n"
            << "\tbasePtr: " << ptr->basePtr << "\n"
            << "\tdata: " << ptr->data << "\n"
            << "\toffset: " << ptr->offset << "\n"
            << "\tsizes[0]: " << ptr->sizes[0] <<   "sizes[1]: " << ptr->sizes[1] << "\n"
            << "\tstrides[0]: " << ptr->strides[0] <<   "strides[1]: " << ptr->strides[1] << "\n\n";
#endif

        convertMemRefToDenseMatrix(*res, basePtr, offset, size0, size1, stride0, stride1, ctx);
        // convertMemRefToDenseMatrix(*res, (StridedMemRefType<double, 2>*)&input, ctx);
        // convertMemRefToDenseMatrix(*res, input, ctx);
        // convertMemRefToDenseMatrix(*res, input, ctx);
    }

    // TODO MSC: also rewrite to ** result value passing
    // Check pointers for input and ctx with ref counting
    void _getMemRefDenseMatrix__StridedMemRefType___DenseMatrix_double(StridedMemRefType<double,2> *res, const DenseMatrix<double>* input, DCTX(ctx)) {
        *res = convertDenseMatrixToMemRef(input, ctx);
    }
    // void _getMemRefDenseMatrix__StridedMemRefType___DenseMatrix_float(StridedMemRefType<float,2> **res, const DenseMatrix<float>* input, DCTX(ctx)) {
    //     convertDenseMatrixToMemRef(*res, input, ctx);
    // }
    // void _getMemRefDenseMatrix__StridedMemRefType___DenseMatrix_float(StridedMemRefType<float,2> ** res, const DenseMatrix<float>* input, DCTX(ctx)) {
    //     getMemRefDenseMatrix(*res, input, ctx);
    // }
    // ----------------------------------------------------------------------------
    // createFrame
    // ----------------------------------------------------------------------------
    // void _createFrame__Frame__Structure_variadic__size_t__char_variadic__size_t(Frame ** res, Structure ** colMats, size_t numColMats, const char ** labels, size_t numLabels, DCTX(ctx)) {
    //     createFrame(*res, colMats, numColMats, labels, numLabels, ctx);
    // }
    // // ----------------------------------------------------------------------------
    // // ctable
    // // ----------------------------------------------------------------------------
    // void _ctable__DenseMatrix_int64_t__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * lhs, const DenseMatrix<int64_t> * rhs, DCTX(ctx)) {
    //     ctable<DenseMatrix<int64_t>, DenseMatrix<int64_t>, DenseMatrix<int64_t>>(*res, lhs, rhs, ctx);
    // }
    // void _ctable__DenseMatrix_int32_t__DenseMatrix_int32_t__DenseMatrix_int32_t(DenseMatrix<int32_t> ** res, const DenseMatrix<int32_t> * lhs, const DenseMatrix<int32_t> * rhs, DCTX(ctx)) {
    //     ctable<DenseMatrix<int32_t>, DenseMatrix<int32_t>, DenseMatrix<int32_t>>(*res, lhs, rhs, ctx);
    // }
    // void _ctable__DenseMatrix_double__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * lhs, const DenseMatrix<double> * rhs, DCTX(ctx)) {
    //     ctable<DenseMatrix<double>, DenseMatrix<double>, DenseMatrix<double>>(*res, lhs, rhs, ctx);
    // }
    // void _ctable__CSRMatrix_int64_t__DenseMatrix_int64_t__DenseMatrix_int64_t(CSRMatrix<int64_t> ** res, const DenseMatrix<int64_t> * lhs, const DenseMatrix<int64_t> * rhs, DCTX(ctx)) {
    //     ctable<CSRMatrix<int64_t>, DenseMatrix<int64_t>, DenseMatrix<int64_t>>(*res, lhs, rhs, ctx);
    // }
    // void _ctable__CSRMatrix_int32_t__DenseMatrix_int32_t__DenseMatrix_int32_t(CSRMatrix<int32_t> ** res, const DenseMatrix<int32_t> * lhs, const DenseMatrix<int32_t> * rhs, DCTX(ctx)) {
    //     ctable<CSRMatrix<int32_t>, DenseMatrix<int32_t>, DenseMatrix<int32_t>>(*res, lhs, rhs, ctx);
    // }
    // void _ctable__CSRMatrix_double__DenseMatrix_double__DenseMatrix_double(CSRMatrix<double> ** res, const DenseMatrix<double> * lhs, const DenseMatrix<double> * rhs, DCTX(ctx)) {
    //     ctable<CSRMatrix<double>, DenseMatrix<double>, DenseMatrix<double>>(*res, lhs, rhs, ctx);
    // }
    // ----------------------------------------------------------------------------
    // destroyDaphneContext
    // ----------------------------------------------------------------------------
    void _destroyDaphneContext(DCTX(ctx)) {
        destroyDaphneContext(ctx);
    }
    // ----------------------------------------------------------------------------
    // diagMatrix
    // ----------------------------------------------------------------------------
    /*
    void _diagMatrix__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * arg, DCTX(ctx)) {
        diagMatrix<DenseMatrix<double>, DenseMatrix<double>>(*res, arg, ctx);
    }
    void _diagMatrix__DenseMatrix_float__DenseMatrix_float(DenseMatrix<float> ** res, const DenseMatrix<float> * arg, DCTX(ctx)) {
        diagMatrix<DenseMatrix<float>, DenseMatrix<float>>(*res, arg, ctx);
    }
    void _diagMatrix__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * arg, DCTX(ctx)) {
        diagMatrix<DenseMatrix<int64_t>, DenseMatrix<int64_t>>(*res, arg, ctx);
    }
    void _diagMatrix__DenseMatrix_int32_t__DenseMatrix_int32_t(DenseMatrix<int32_t> ** res, const DenseMatrix<int32_t> * arg, DCTX(ctx)) {
        diagMatrix<DenseMatrix<int32_t>, DenseMatrix<int32_t>>(*res, arg, ctx);
    }
    void _diagMatrix__CSRMatrix_double__DenseMatrix_double(CSRMatrix<double> ** res, const DenseMatrix<double> * arg, DCTX(ctx)) {
        diagMatrix<CSRMatrix<double>, DenseMatrix<double>>(*res, arg, ctx);
    }
    void _diagMatrix__CSRMatrix_float__DenseMatrix_float(CSRMatrix<float> ** res, const DenseMatrix<float> * arg, DCTX(ctx)) {
        diagMatrix<CSRMatrix<float>, DenseMatrix<float>>(*res, arg, ctx);
    }
    void _diagMatrix__CSRMatrix_int64_t__DenseMatrix_int64_t(CSRMatrix<int64_t> ** res, const DenseMatrix<int64_t> * arg, DCTX(ctx)) {
        diagMatrix<CSRMatrix<int64_t>, DenseMatrix<int64_t>>(*res, arg, ctx);
    }
    void _diagMatrix__CSRMatrix_int32_t__DenseMatrix_int32_t(CSRMatrix<int32_t> ** res, const DenseMatrix<int32_t> * arg, DCTX(ctx)) {
        diagMatrix<CSRMatrix<int32_t>, DenseMatrix<int32_t>>(*res, arg, ctx);
    }
    void _diagMatrix__CSRMatrix_double__CSRMatrix_double(CSRMatrix<double> ** res, const CSRMatrix<double> * arg, DCTX(ctx)) {
        diagMatrix<CSRMatrix<double>, CSRMatrix<double>>(*res, arg, ctx);
    }
    void _diagMatrix__CSRMatrix_float__CSRMatrix_float(CSRMatrix<float> ** res, const CSRMatrix<float> * arg, DCTX(ctx)) {
        diagMatrix<CSRMatrix<float>, CSRMatrix<float>>(*res, arg, ctx);
    }
    void _diagMatrix__CSRMatrix_int64_t__CSRMatrix_int64_t(CSRMatrix<int64_t> ** res, const CSRMatrix<int64_t> * arg, DCTX(ctx)) {
        diagMatrix<CSRMatrix<int64_t>, CSRMatrix<int64_t>>(*res, arg, ctx);
    }
    void _diagMatrix__CSRMatrix_int32_t__CSRMatrix_int32_t(CSRMatrix<int32_t> ** res, const CSRMatrix<int32_t> * arg, DCTX(ctx)) {
        diagMatrix<CSRMatrix<int32_t>, CSRMatrix<int32_t>>(*res, arg, ctx);
    }
    // ----------------------------------------------------------------------------
    // ewBinaryMat
    // ----------------------------------------------------------------------------
    void _ewAdd__DenseMatrix_float__DenseMatrix_float__DenseMatrix_float(DenseMatrix<float> ** res, const DenseMatrix<float> * lhs, const DenseMatrix<float> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<float>, DenseMatrix<float>, DenseMatrix<float>>(BinaryOpCode::ADD, *res, lhs, rhs, ctx);
    }
    void _ewSub__DenseMatrix_float__DenseMatrix_float__DenseMatrix_float(DenseMatrix<float> ** res, const DenseMatrix<float> * lhs, const DenseMatrix<float> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<float>, DenseMatrix<float>, DenseMatrix<float>>(BinaryOpCode::SUB, *res, lhs, rhs, ctx);
    }
    void _ewMul__DenseMatrix_float__DenseMatrix_float__DenseMatrix_float(DenseMatrix<float> ** res, const DenseMatrix<float> * lhs, const DenseMatrix<float> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<float>, DenseMatrix<float>, DenseMatrix<float>>(BinaryOpCode::MUL, *res, lhs, rhs, ctx);
    }
    void _ewDiv__DenseMatrix_float__DenseMatrix_float__DenseMatrix_float(DenseMatrix<float> ** res, const DenseMatrix<float> * lhs, const DenseMatrix<float> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<float>, DenseMatrix<float>, DenseMatrix<float>>(BinaryOpCode::DIV, *res, lhs, rhs, ctx);
    }
    void _ewPow__DenseMatrix_float__DenseMatrix_float__DenseMatrix_float(DenseMatrix<float> ** res, const DenseMatrix<float> * lhs, const DenseMatrix<float> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<float>, DenseMatrix<float>, DenseMatrix<float>>(BinaryOpCode::POW, *res, lhs, rhs, ctx);
    }
    void _ewLog__DenseMatrix_float__DenseMatrix_float__DenseMatrix_float(DenseMatrix<float> ** res, const DenseMatrix<float> * lhs, const DenseMatrix<float> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<float>, DenseMatrix<float>, DenseMatrix<float>>(BinaryOpCode::LOG, *res, lhs, rhs, ctx);
    }
    void _ewEq__DenseMatrix_float__DenseMatrix_float__DenseMatrix_float(DenseMatrix<float> ** res, const DenseMatrix<float> * lhs, const DenseMatrix<float> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<float>, DenseMatrix<float>, DenseMatrix<float>>(BinaryOpCode::EQ, *res, lhs, rhs, ctx);
    }
    void _ewNeq__DenseMatrix_float__DenseMatrix_float__DenseMatrix_float(DenseMatrix<float> ** res, const DenseMatrix<float> * lhs, const DenseMatrix<float> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<float>, DenseMatrix<float>, DenseMatrix<float>>(BinaryOpCode::NEQ, *res, lhs, rhs, ctx);
    }
    void _ewLt__DenseMatrix_float__DenseMatrix_float__DenseMatrix_float(DenseMatrix<float> ** res, const DenseMatrix<float> * lhs, const DenseMatrix<float> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<float>, DenseMatrix<float>, DenseMatrix<float>>(BinaryOpCode::LT, *res, lhs, rhs, ctx);
    }
    void _ewLe__DenseMatrix_float__DenseMatrix_float__DenseMatrix_float(DenseMatrix<float> ** res, const DenseMatrix<float> * lhs, const DenseMatrix<float> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<float>, DenseMatrix<float>, DenseMatrix<float>>(BinaryOpCode::LE, *res, lhs, rhs, ctx);
    }
    void _ewGt__DenseMatrix_float__DenseMatrix_float__DenseMatrix_float(DenseMatrix<float> ** res, const DenseMatrix<float> * lhs, const DenseMatrix<float> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<float>, DenseMatrix<float>, DenseMatrix<float>>(BinaryOpCode::GT, *res, lhs, rhs, ctx);
    }
    void _ewGe__DenseMatrix_float__DenseMatrix_float__DenseMatrix_float(DenseMatrix<float> ** res, const DenseMatrix<float> * lhs, const DenseMatrix<float> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<float>, DenseMatrix<float>, DenseMatrix<float>>(BinaryOpCode::GE, *res, lhs, rhs, ctx);
    }
    void _ewMin__DenseMatrix_float__DenseMatrix_float__DenseMatrix_float(DenseMatrix<float> ** res, const DenseMatrix<float> * lhs, const DenseMatrix<float> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<float>, DenseMatrix<float>, DenseMatrix<float>>(BinaryOpCode::MIN, *res, lhs, rhs, ctx);
    }
    void _ewMax__DenseMatrix_float__DenseMatrix_float__DenseMatrix_float(DenseMatrix<float> ** res, const DenseMatrix<float> * lhs, const DenseMatrix<float> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<float>, DenseMatrix<float>, DenseMatrix<float>>(BinaryOpCode::MAX, *res, lhs, rhs, ctx);
    }
    void _ewAnd__DenseMatrix_float__DenseMatrix_float__DenseMatrix_float(DenseMatrix<float> ** res, const DenseMatrix<float> * lhs, const DenseMatrix<float> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<float>, DenseMatrix<float>, DenseMatrix<float>>(BinaryOpCode::AND, *res, lhs, rhs, ctx);
    }
    void _ewOr__DenseMatrix_float__DenseMatrix_float__DenseMatrix_float(DenseMatrix<float> ** res, const DenseMatrix<float> * lhs, const DenseMatrix<float> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<float>, DenseMatrix<float>, DenseMatrix<float>>(BinaryOpCode::OR, *res, lhs, rhs, ctx);
    }
    void _ewAdd__DenseMatrix_double__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * lhs, const DenseMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<double>, DenseMatrix<double>, DenseMatrix<double>>(BinaryOpCode::ADD, *res, lhs, rhs, ctx);
    }
    void _ewSub__DenseMatrix_double__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * lhs, const DenseMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<double>, DenseMatrix<double>, DenseMatrix<double>>(BinaryOpCode::SUB, *res, lhs, rhs, ctx);
    }
    void _ewMul__DenseMatrix_double__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * lhs, const DenseMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<double>, DenseMatrix<double>, DenseMatrix<double>>(BinaryOpCode::MUL, *res, lhs, rhs, ctx);
    }
    void _ewDiv__DenseMatrix_double__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * lhs, const DenseMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<double>, DenseMatrix<double>, DenseMatrix<double>>(BinaryOpCode::DIV, *res, lhs, rhs, ctx);
    }
    void _ewPow__DenseMatrix_double__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * lhs, const DenseMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<double>, DenseMatrix<double>, DenseMatrix<double>>(BinaryOpCode::POW, *res, lhs, rhs, ctx);
    }
    void _ewLog__DenseMatrix_double__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * lhs, const DenseMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<double>, DenseMatrix<double>, DenseMatrix<double>>(BinaryOpCode::LOG, *res, lhs, rhs, ctx);
    }
    void _ewEq__DenseMatrix_double__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * lhs, const DenseMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<double>, DenseMatrix<double>, DenseMatrix<double>>(BinaryOpCode::EQ, *res, lhs, rhs, ctx);
    }
    void _ewNeq__DenseMatrix_double__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * lhs, const DenseMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<double>, DenseMatrix<double>, DenseMatrix<double>>(BinaryOpCode::NEQ, *res, lhs, rhs, ctx);
    }
    void _ewLt__DenseMatrix_double__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * lhs, const DenseMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<double>, DenseMatrix<double>, DenseMatrix<double>>(BinaryOpCode::LT, *res, lhs, rhs, ctx);
    }
    void _ewLe__DenseMatrix_double__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * lhs, const DenseMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<double>, DenseMatrix<double>, DenseMatrix<double>>(BinaryOpCode::LE, *res, lhs, rhs, ctx);
    }
    void _ewGt__DenseMatrix_double__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * lhs, const DenseMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<double>, DenseMatrix<double>, DenseMatrix<double>>(BinaryOpCode::GT, *res, lhs, rhs, ctx);
    }
    void _ewGe__DenseMatrix_double__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * lhs, const DenseMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<double>, DenseMatrix<double>, DenseMatrix<double>>(BinaryOpCode::GE, *res, lhs, rhs, ctx);
    }
    void _ewMin__DenseMatrix_double__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * lhs, const DenseMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<double>, DenseMatrix<double>, DenseMatrix<double>>(BinaryOpCode::MIN, *res, lhs, rhs, ctx);
    }
    void _ewMax__DenseMatrix_double__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * lhs, const DenseMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<double>, DenseMatrix<double>, DenseMatrix<double>>(BinaryOpCode::MAX, *res, lhs, rhs, ctx);
    }
    void _ewAnd__DenseMatrix_double__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * lhs, const DenseMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<double>, DenseMatrix<double>, DenseMatrix<double>>(BinaryOpCode::AND, *res, lhs, rhs, ctx);
    }
    void _ewOr__DenseMatrix_double__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * lhs, const DenseMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<double>, DenseMatrix<double>, DenseMatrix<double>>(BinaryOpCode::OR, *res, lhs, rhs, ctx);
    }
    void _ewAdd__DenseMatrix_int64_t__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * lhs, const DenseMatrix<int64_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<int64_t>, DenseMatrix<int64_t>, DenseMatrix<int64_t>>(BinaryOpCode::ADD, *res, lhs, rhs, ctx);
    }
    void _ewSub__DenseMatrix_int64_t__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * lhs, const DenseMatrix<int64_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<int64_t>, DenseMatrix<int64_t>, DenseMatrix<int64_t>>(BinaryOpCode::SUB, *res, lhs, rhs, ctx);
    }
    void _ewMul__DenseMatrix_int64_t__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * lhs, const DenseMatrix<int64_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<int64_t>, DenseMatrix<int64_t>, DenseMatrix<int64_t>>(BinaryOpCode::MUL, *res, lhs, rhs, ctx);
    }
    void _ewDiv__DenseMatrix_int64_t__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * lhs, const DenseMatrix<int64_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<int64_t>, DenseMatrix<int64_t>, DenseMatrix<int64_t>>(BinaryOpCode::DIV, *res, lhs, rhs, ctx);
    }
    void _ewPow__DenseMatrix_int64_t__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * lhs, const DenseMatrix<int64_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<int64_t>, DenseMatrix<int64_t>, DenseMatrix<int64_t>>(BinaryOpCode::POW, *res, lhs, rhs, ctx);
    }
    void _ewLog__DenseMatrix_int64_t__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * lhs, const DenseMatrix<int64_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<int64_t>, DenseMatrix<int64_t>, DenseMatrix<int64_t>>(BinaryOpCode::LOG, *res, lhs, rhs, ctx);
    }
    void _ewEq__DenseMatrix_int64_t__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * lhs, const DenseMatrix<int64_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<int64_t>, DenseMatrix<int64_t>, DenseMatrix<int64_t>>(BinaryOpCode::EQ, *res, lhs, rhs, ctx);
    }
    void _ewNeq__DenseMatrix_int64_t__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * lhs, const DenseMatrix<int64_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<int64_t>, DenseMatrix<int64_t>, DenseMatrix<int64_t>>(BinaryOpCode::NEQ, *res, lhs, rhs, ctx);
    }
    void _ewLt__DenseMatrix_int64_t__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * lhs, const DenseMatrix<int64_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<int64_t>, DenseMatrix<int64_t>, DenseMatrix<int64_t>>(BinaryOpCode::LT, *res, lhs, rhs, ctx);
    }
    void _ewLe__DenseMatrix_int64_t__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * lhs, const DenseMatrix<int64_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<int64_t>, DenseMatrix<int64_t>, DenseMatrix<int64_t>>(BinaryOpCode::LE, *res, lhs, rhs, ctx);
    }
    void _ewGt__DenseMatrix_int64_t__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * lhs, const DenseMatrix<int64_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<int64_t>, DenseMatrix<int64_t>, DenseMatrix<int64_t>>(BinaryOpCode::GT, *res, lhs, rhs, ctx);
    }
    void _ewGe__DenseMatrix_int64_t__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * lhs, const DenseMatrix<int64_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<int64_t>, DenseMatrix<int64_t>, DenseMatrix<int64_t>>(BinaryOpCode::GE, *res, lhs, rhs, ctx);
    }
    void _ewMin__DenseMatrix_int64_t__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * lhs, const DenseMatrix<int64_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<int64_t>, DenseMatrix<int64_t>, DenseMatrix<int64_t>>(BinaryOpCode::MIN, *res, lhs, rhs, ctx);
    }
    void _ewMax__DenseMatrix_int64_t__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * lhs, const DenseMatrix<int64_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<int64_t>, DenseMatrix<int64_t>, DenseMatrix<int64_t>>(BinaryOpCode::MAX, *res, lhs, rhs, ctx);
    }
    void _ewAnd__DenseMatrix_int64_t__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * lhs, const DenseMatrix<int64_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<int64_t>, DenseMatrix<int64_t>, DenseMatrix<int64_t>>(BinaryOpCode::AND, *res, lhs, rhs, ctx);
    }
    void _ewOr__DenseMatrix_int64_t__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * lhs, const DenseMatrix<int64_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<int64_t>, DenseMatrix<int64_t>, DenseMatrix<int64_t>>(BinaryOpCode::OR, *res, lhs, rhs, ctx);
    }
    // ----------------------------------------------------------------------------
    // ewBinaryMat
    // ----------------------------------------------------------------------------
    void _ewAdd__DenseMatrix_uint64_t__DenseMatrix_uint64_t__DenseMatrix_uint64_t(DenseMatrix<uint64_t> ** res, const DenseMatrix<uint64_t> * lhs, const DenseMatrix<uint64_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<uint64_t>, DenseMatrix<uint64_t>, DenseMatrix<uint64_t>>(BinaryOpCode::ADD, *res, lhs, rhs, ctx);
    }
    void _ewSub__DenseMatrix_uint64_t__DenseMatrix_uint64_t__DenseMatrix_uint64_t(DenseMatrix<uint64_t> ** res, const DenseMatrix<uint64_t> * lhs, const DenseMatrix<uint64_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<uint64_t>, DenseMatrix<uint64_t>, DenseMatrix<uint64_t>>(BinaryOpCode::SUB, *res, lhs, rhs, ctx);
    }
    void _ewMul__DenseMatrix_uint64_t__DenseMatrix_uint64_t__DenseMatrix_uint64_t(DenseMatrix<uint64_t> ** res, const DenseMatrix<uint64_t> * lhs, const DenseMatrix<uint64_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<uint64_t>, DenseMatrix<uint64_t>, DenseMatrix<uint64_t>>(BinaryOpCode::MUL, *res, lhs, rhs, ctx);
    }
    void _ewDiv__DenseMatrix_uint64_t__DenseMatrix_uint64_t__DenseMatrix_uint64_t(DenseMatrix<uint64_t> ** res, const DenseMatrix<uint64_t> * lhs, const DenseMatrix<uint64_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<uint64_t>, DenseMatrix<uint64_t>, DenseMatrix<uint64_t>>(BinaryOpCode::DIV, *res, lhs, rhs, ctx);
    }
    void _ewPow__DenseMatrix_uint64_t__DenseMatrix_uint64_t__DenseMatrix_uint64_t(DenseMatrix<uint64_t> ** res, const DenseMatrix<uint64_t> * lhs, const DenseMatrix<uint64_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<uint64_t>, DenseMatrix<uint64_t>, DenseMatrix<uint64_t>>(BinaryOpCode::POW, *res, lhs, rhs, ctx);
    }
    void _ewLog__DenseMatrix_uint64_t__DenseMatrix_uint64_t__DenseMatrix_uint64_t(DenseMatrix<uint64_t> ** res, const DenseMatrix<uint64_t> * lhs, const DenseMatrix<uint64_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<uint64_t>, DenseMatrix<uint64_t>, DenseMatrix<uint64_t>>(BinaryOpCode::LOG, *res, lhs, rhs, ctx);
    }
    void _ewEq__DenseMatrix_uint64_t__DenseMatrix_uint64_t__DenseMatrix_uint64_t(DenseMatrix<uint64_t> ** res, const DenseMatrix<uint64_t> * lhs, const DenseMatrix<uint64_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<uint64_t>, DenseMatrix<uint64_t>, DenseMatrix<uint64_t>>(BinaryOpCode::EQ, *res, lhs, rhs, ctx);
    }
    void _ewNeq__DenseMatrix_uint64_t__DenseMatrix_uint64_t__DenseMatrix_uint64_t(DenseMatrix<uint64_t> ** res, const DenseMatrix<uint64_t> * lhs, const DenseMatrix<uint64_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<uint64_t>, DenseMatrix<uint64_t>, DenseMatrix<uint64_t>>(BinaryOpCode::NEQ, *res, lhs, rhs, ctx);
    }
    void _ewLt__DenseMatrix_uint64_t__DenseMatrix_uint64_t__DenseMatrix_uint64_t(DenseMatrix<uint64_t> ** res, const DenseMatrix<uint64_t> * lhs, const DenseMatrix<uint64_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<uint64_t>, DenseMatrix<uint64_t>, DenseMatrix<uint64_t>>(BinaryOpCode::LT, *res, lhs, rhs, ctx);
    }
    void _ewLe__DenseMatrix_uint64_t__DenseMatrix_uint64_t__DenseMatrix_uint64_t(DenseMatrix<uint64_t> ** res, const DenseMatrix<uint64_t> * lhs, const DenseMatrix<uint64_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<uint64_t>, DenseMatrix<uint64_t>, DenseMatrix<uint64_t>>(BinaryOpCode::LE, *res, lhs, rhs, ctx);
    }
    void _ewGt__DenseMatrix_uint64_t__DenseMatrix_uint64_t__DenseMatrix_uint64_t(DenseMatrix<uint64_t> ** res, const DenseMatrix<uint64_t> * lhs, const DenseMatrix<uint64_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<uint64_t>, DenseMatrix<uint64_t>, DenseMatrix<uint64_t>>(BinaryOpCode::GT, *res, lhs, rhs, ctx);
    }
    void _ewGe__DenseMatrix_uint64_t__DenseMatrix_uint64_t__DenseMatrix_uint64_t(DenseMatrix<uint64_t> ** res, const DenseMatrix<uint64_t> * lhs, const DenseMatrix<uint64_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<uint64_t>, DenseMatrix<uint64_t>, DenseMatrix<uint64_t>>(BinaryOpCode::GE, *res, lhs, rhs, ctx);
    }
    void _ewMin__DenseMatrix_uint64_t__DenseMatrix_uint64_t__DenseMatrix_uint64_t(DenseMatrix<uint64_t> ** res, const DenseMatrix<uint64_t> * lhs, const DenseMatrix<uint64_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<uint64_t>, DenseMatrix<uint64_t>, DenseMatrix<uint64_t>>(BinaryOpCode::MIN, *res, lhs, rhs, ctx);
    }
    void _ewMax__DenseMatrix_uint64_t__DenseMatrix_uint64_t__DenseMatrix_uint64_t(DenseMatrix<uint64_t> ** res, const DenseMatrix<uint64_t> * lhs, const DenseMatrix<uint64_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<uint64_t>, DenseMatrix<uint64_t>, DenseMatrix<uint64_t>>(BinaryOpCode::MAX, *res, lhs, rhs, ctx);
    }
    void _ewAnd__DenseMatrix_uint64_t__DenseMatrix_uint64_t__DenseMatrix_uint64_t(DenseMatrix<uint64_t> ** res, const DenseMatrix<uint64_t> * lhs, const DenseMatrix<uint64_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<uint64_t>, DenseMatrix<uint64_t>, DenseMatrix<uint64_t>>(BinaryOpCode::AND, *res, lhs, rhs, ctx);
    }
    void _ewOr__DenseMatrix_uint64_t__DenseMatrix_uint64_t__DenseMatrix_uint64_t(DenseMatrix<uint64_t> ** res, const DenseMatrix<uint64_t> * lhs, const DenseMatrix<uint64_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<uint64_t>, DenseMatrix<uint64_t>, DenseMatrix<uint64_t>>(BinaryOpCode::OR, *res, lhs, rhs, ctx);
    }
    void _ewAdd__DenseMatrix_size_t__DenseMatrix_size_t__DenseMatrix_size_t(DenseMatrix<size_t> ** res, const DenseMatrix<size_t> * lhs, const DenseMatrix<size_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<size_t>, DenseMatrix<size_t>, DenseMatrix<size_t>>(BinaryOpCode::ADD, *res, lhs, rhs, ctx);
    }
    void _ewSub__DenseMatrix_size_t__DenseMatrix_size_t__DenseMatrix_size_t(DenseMatrix<size_t> ** res, const DenseMatrix<size_t> * lhs, const DenseMatrix<size_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<size_t>, DenseMatrix<size_t>, DenseMatrix<size_t>>(BinaryOpCode::SUB, *res, lhs, rhs, ctx);
    }
    void _ewMul__DenseMatrix_size_t__DenseMatrix_size_t__DenseMatrix_size_t(DenseMatrix<size_t> ** res, const DenseMatrix<size_t> * lhs, const DenseMatrix<size_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<size_t>, DenseMatrix<size_t>, DenseMatrix<size_t>>(BinaryOpCode::MUL, *res, lhs, rhs, ctx);
    }
    void _ewDiv__DenseMatrix_size_t__DenseMatrix_size_t__DenseMatrix_size_t(DenseMatrix<size_t> ** res, const DenseMatrix<size_t> * lhs, const DenseMatrix<size_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<size_t>, DenseMatrix<size_t>, DenseMatrix<size_t>>(BinaryOpCode::DIV, *res, lhs, rhs, ctx);
    }
    void _ewPow__DenseMatrix_size_t__DenseMatrix_size_t__DenseMatrix_size_t(DenseMatrix<size_t> ** res, const DenseMatrix<size_t> * lhs, const DenseMatrix<size_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<size_t>, DenseMatrix<size_t>, DenseMatrix<size_t>>(BinaryOpCode::POW, *res, lhs, rhs, ctx);
    }
    void _ewLog__DenseMatrix_size_t__DenseMatrix_size_t__DenseMatrix_size_t(DenseMatrix<size_t> ** res, const DenseMatrix<size_t> * lhs, const DenseMatrix<size_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<size_t>, DenseMatrix<size_t>, DenseMatrix<size_t>>(BinaryOpCode::LOG, *res, lhs, rhs, ctx);
    }
    void _ewEq__DenseMatrix_size_t__DenseMatrix_size_t__DenseMatrix_size_t(DenseMatrix<size_t> ** res, const DenseMatrix<size_t> * lhs, const DenseMatrix<size_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<size_t>, DenseMatrix<size_t>, DenseMatrix<size_t>>(BinaryOpCode::EQ, *res, lhs, rhs, ctx);
    }
    void _ewNeq__DenseMatrix_size_t__DenseMatrix_size_t__DenseMatrix_size_t(DenseMatrix<size_t> ** res, const DenseMatrix<size_t> * lhs, const DenseMatrix<size_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<size_t>, DenseMatrix<size_t>, DenseMatrix<size_t>>(BinaryOpCode::NEQ, *res, lhs, rhs, ctx);
    }
    void _ewLt__DenseMatrix_size_t__DenseMatrix_size_t__DenseMatrix_size_t(DenseMatrix<size_t> ** res, const DenseMatrix<size_t> * lhs, const DenseMatrix<size_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<size_t>, DenseMatrix<size_t>, DenseMatrix<size_t>>(BinaryOpCode::LT, *res, lhs, rhs, ctx);
    }
    void _ewLe__DenseMatrix_size_t__DenseMatrix_size_t__DenseMatrix_size_t(DenseMatrix<size_t> ** res, const DenseMatrix<size_t> * lhs, const DenseMatrix<size_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<size_t>, DenseMatrix<size_t>, DenseMatrix<size_t>>(BinaryOpCode::LE, *res, lhs, rhs, ctx);
    }
    void _ewGt__DenseMatrix_size_t__DenseMatrix_size_t__DenseMatrix_size_t(DenseMatrix<size_t> ** res, const DenseMatrix<size_t> * lhs, const DenseMatrix<size_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<size_t>, DenseMatrix<size_t>, DenseMatrix<size_t>>(BinaryOpCode::GT, *res, lhs, rhs, ctx);
    }
    void _ewGe__DenseMatrix_size_t__DenseMatrix_size_t__DenseMatrix_size_t(DenseMatrix<size_t> ** res, const DenseMatrix<size_t> * lhs, const DenseMatrix<size_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<size_t>, DenseMatrix<size_t>, DenseMatrix<size_t>>(BinaryOpCode::GE, *res, lhs, rhs, ctx);
    }
    void _ewMin__DenseMatrix_size_t__DenseMatrix_size_t__DenseMatrix_size_t(DenseMatrix<size_t> ** res, const DenseMatrix<size_t> * lhs, const DenseMatrix<size_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<size_t>, DenseMatrix<size_t>, DenseMatrix<size_t>>(BinaryOpCode::MIN, *res, lhs, rhs, ctx);
    }
    void _ewMax__DenseMatrix_size_t__DenseMatrix_size_t__DenseMatrix_size_t(DenseMatrix<size_t> ** res, const DenseMatrix<size_t> * lhs, const DenseMatrix<size_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<size_t>, DenseMatrix<size_t>, DenseMatrix<size_t>>(BinaryOpCode::MAX, *res, lhs, rhs, ctx);
    }
    void _ewAnd__DenseMatrix_size_t__DenseMatrix_size_t__DenseMatrix_size_t(DenseMatrix<size_t> ** res, const DenseMatrix<size_t> * lhs, const DenseMatrix<size_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<size_t>, DenseMatrix<size_t>, DenseMatrix<size_t>>(BinaryOpCode::AND, *res, lhs, rhs, ctx);
    }
    void _ewOr__DenseMatrix_size_t__DenseMatrix_size_t__DenseMatrix_size_t(DenseMatrix<size_t> ** res, const DenseMatrix<size_t> * lhs, const DenseMatrix<size_t> * rhs, DCTX(ctx)) {
        ewBinaryMat<DenseMatrix<size_t>, DenseMatrix<size_t>, DenseMatrix<size_t>>(BinaryOpCode::OR, *res, lhs, rhs, ctx);
    }
    void _ewAdd__CSRMatrix_double__CSRMatrix_double__DenseMatrix_double(CSRMatrix<double> ** res, const CSRMatrix<double> * lhs, const DenseMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<CSRMatrix<double>, CSRMatrix<double>, DenseMatrix<double>>(BinaryOpCode::ADD, *res, lhs, rhs, ctx);
    }
    void _ewSub__CSRMatrix_double__CSRMatrix_double__DenseMatrix_double(CSRMatrix<double> ** res, const CSRMatrix<double> * lhs, const DenseMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<CSRMatrix<double>, CSRMatrix<double>, DenseMatrix<double>>(BinaryOpCode::SUB, *res, lhs, rhs, ctx);
    }
    void _ewMul__CSRMatrix_double__CSRMatrix_double__DenseMatrix_double(CSRMatrix<double> ** res, const CSRMatrix<double> * lhs, const DenseMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<CSRMatrix<double>, CSRMatrix<double>, DenseMatrix<double>>(BinaryOpCode::MUL, *res, lhs, rhs, ctx);
    }
    void _ewDiv__CSRMatrix_double__CSRMatrix_double__DenseMatrix_double(CSRMatrix<double> ** res, const CSRMatrix<double> * lhs, const DenseMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<CSRMatrix<double>, CSRMatrix<double>, DenseMatrix<double>>(BinaryOpCode::DIV, *res, lhs, rhs, ctx);
    }
    void _ewPow__CSRMatrix_double__CSRMatrix_double__DenseMatrix_double(CSRMatrix<double> ** res, const CSRMatrix<double> * lhs, const DenseMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<CSRMatrix<double>, CSRMatrix<double>, DenseMatrix<double>>(BinaryOpCode::POW, *res, lhs, rhs, ctx);
    }
    void _ewLog__CSRMatrix_double__CSRMatrix_double__DenseMatrix_double(CSRMatrix<double> ** res, const CSRMatrix<double> * lhs, const DenseMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<CSRMatrix<double>, CSRMatrix<double>, DenseMatrix<double>>(BinaryOpCode::LOG, *res, lhs, rhs, ctx);
    }
    void _ewEq__CSRMatrix_double__CSRMatrix_double__DenseMatrix_double(CSRMatrix<double> ** res, const CSRMatrix<double> * lhs, const DenseMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<CSRMatrix<double>, CSRMatrix<double>, DenseMatrix<double>>(BinaryOpCode::EQ, *res, lhs, rhs, ctx);
    }
    void _ewNeq__CSRMatrix_double__CSRMatrix_double__DenseMatrix_double(CSRMatrix<double> ** res, const CSRMatrix<double> * lhs, const DenseMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<CSRMatrix<double>, CSRMatrix<double>, DenseMatrix<double>>(BinaryOpCode::NEQ, *res, lhs, rhs, ctx);
    }
    void _ewLt__CSRMatrix_double__CSRMatrix_double__DenseMatrix_double(CSRMatrix<double> ** res, const CSRMatrix<double> * lhs, const DenseMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<CSRMatrix<double>, CSRMatrix<double>, DenseMatrix<double>>(BinaryOpCode::LT, *res, lhs, rhs, ctx);
    }
    void _ewLe__CSRMatrix_double__CSRMatrix_double__DenseMatrix_double(CSRMatrix<double> ** res, const CSRMatrix<double> * lhs, const DenseMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<CSRMatrix<double>, CSRMatrix<double>, DenseMatrix<double>>(BinaryOpCode::LE, *res, lhs, rhs, ctx);
    }
    void _ewGt__CSRMatrix_double__CSRMatrix_double__DenseMatrix_double(CSRMatrix<double> ** res, const CSRMatrix<double> * lhs, const DenseMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<CSRMatrix<double>, CSRMatrix<double>, DenseMatrix<double>>(BinaryOpCode::GT, *res, lhs, rhs, ctx);
    }
    void _ewGe__CSRMatrix_double__CSRMatrix_double__DenseMatrix_double(CSRMatrix<double> ** res, const CSRMatrix<double> * lhs, const DenseMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<CSRMatrix<double>, CSRMatrix<double>, DenseMatrix<double>>(BinaryOpCode::GE, *res, lhs, rhs, ctx);
    }
    void _ewMin__CSRMatrix_double__CSRMatrix_double__DenseMatrix_double(CSRMatrix<double> ** res, const CSRMatrix<double> * lhs, const DenseMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<CSRMatrix<double>, CSRMatrix<double>, DenseMatrix<double>>(BinaryOpCode::MIN, *res, lhs, rhs, ctx);
    }
    void _ewMax__CSRMatrix_double__CSRMatrix_double__DenseMatrix_double(CSRMatrix<double> ** res, const CSRMatrix<double> * lhs, const DenseMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<CSRMatrix<double>, CSRMatrix<double>, DenseMatrix<double>>(BinaryOpCode::MAX, *res, lhs, rhs, ctx);
    }
    void _ewAnd__CSRMatrix_double__CSRMatrix_double__DenseMatrix_double(CSRMatrix<double> ** res, const CSRMatrix<double> * lhs, const DenseMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<CSRMatrix<double>, CSRMatrix<double>, DenseMatrix<double>>(BinaryOpCode::AND, *res, lhs, rhs, ctx);
    }
    void _ewOr__CSRMatrix_double__CSRMatrix_double__DenseMatrix_double(CSRMatrix<double> ** res, const CSRMatrix<double> * lhs, const DenseMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<CSRMatrix<double>, CSRMatrix<double>, DenseMatrix<double>>(BinaryOpCode::OR, *res, lhs, rhs, ctx);
    }
    void _ewAdd__CSRMatrix_double__CSRMatrix_double__CSRMatrix_double(CSRMatrix<double> ** res, const CSRMatrix<double> * lhs, const CSRMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<CSRMatrix<double>, CSRMatrix<double>, CSRMatrix<double>>(BinaryOpCode::ADD, *res, lhs, rhs, ctx);
    }
    void _ewSub__CSRMatrix_double__CSRMatrix_double__CSRMatrix_double(CSRMatrix<double> ** res, const CSRMatrix<double> * lhs, const CSRMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<CSRMatrix<double>, CSRMatrix<double>, CSRMatrix<double>>(BinaryOpCode::SUB, *res, lhs, rhs, ctx);
    }
    void _ewMul__CSRMatrix_double__CSRMatrix_double__CSRMatrix_double(CSRMatrix<double> ** res, const CSRMatrix<double> * lhs, const CSRMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<CSRMatrix<double>, CSRMatrix<double>, CSRMatrix<double>>(BinaryOpCode::MUL, *res, lhs, rhs, ctx);
    }
    void _ewDiv__CSRMatrix_double__CSRMatrix_double__CSRMatrix_double(CSRMatrix<double> ** res, const CSRMatrix<double> * lhs, const CSRMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<CSRMatrix<double>, CSRMatrix<double>, CSRMatrix<double>>(BinaryOpCode::DIV, *res, lhs, rhs, ctx);
    }
    void _ewPow__CSRMatrix_double__CSRMatrix_double__CSRMatrix_double(CSRMatrix<double> ** res, const CSRMatrix<double> * lhs, const CSRMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<CSRMatrix<double>, CSRMatrix<double>, CSRMatrix<double>>(BinaryOpCode::POW, *res, lhs, rhs, ctx);
    }
    void _ewLog__CSRMatrix_double__CSRMatrix_double__CSRMatrix_double(CSRMatrix<double> ** res, const CSRMatrix<double> * lhs, const CSRMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<CSRMatrix<double>, CSRMatrix<double>, CSRMatrix<double>>(BinaryOpCode::LOG, *res, lhs, rhs, ctx);
    }
    void _ewEq__CSRMatrix_double__CSRMatrix_double__CSRMatrix_double(CSRMatrix<double> ** res, const CSRMatrix<double> * lhs, const CSRMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<CSRMatrix<double>, CSRMatrix<double>, CSRMatrix<double>>(BinaryOpCode::EQ, *res, lhs, rhs, ctx);
    }
    void _ewNeq__CSRMatrix_double__CSRMatrix_double__CSRMatrix_double(CSRMatrix<double> ** res, const CSRMatrix<double> * lhs, const CSRMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<CSRMatrix<double>, CSRMatrix<double>, CSRMatrix<double>>(BinaryOpCode::NEQ, *res, lhs, rhs, ctx);
    }
    void _ewLt__CSRMatrix_double__CSRMatrix_double__CSRMatrix_double(CSRMatrix<double> ** res, const CSRMatrix<double> * lhs, const CSRMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<CSRMatrix<double>, CSRMatrix<double>, CSRMatrix<double>>(BinaryOpCode::LT, *res, lhs, rhs, ctx);
    }
    void _ewLe__CSRMatrix_double__CSRMatrix_double__CSRMatrix_double(CSRMatrix<double> ** res, const CSRMatrix<double> * lhs, const CSRMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<CSRMatrix<double>, CSRMatrix<double>, CSRMatrix<double>>(BinaryOpCode::LE, *res, lhs, rhs, ctx);
    }
    void _ewGt__CSRMatrix_double__CSRMatrix_double__CSRMatrix_double(CSRMatrix<double> ** res, const CSRMatrix<double> * lhs, const CSRMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<CSRMatrix<double>, CSRMatrix<double>, CSRMatrix<double>>(BinaryOpCode::GT, *res, lhs, rhs, ctx);
    }
    void _ewGe__CSRMatrix_double__CSRMatrix_double__CSRMatrix_double(CSRMatrix<double> ** res, const CSRMatrix<double> * lhs, const CSRMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<CSRMatrix<double>, CSRMatrix<double>, CSRMatrix<double>>(BinaryOpCode::GE, *res, lhs, rhs, ctx);
    }
    void _ewMin__CSRMatrix_double__CSRMatrix_double__CSRMatrix_double(CSRMatrix<double> ** res, const CSRMatrix<double> * lhs, const CSRMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<CSRMatrix<double>, CSRMatrix<double>, CSRMatrix<double>>(BinaryOpCode::MIN, *res, lhs, rhs, ctx);
    }
    void _ewMax__CSRMatrix_double__CSRMatrix_double__CSRMatrix_double(CSRMatrix<double> ** res, const CSRMatrix<double> * lhs, const CSRMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<CSRMatrix<double>, CSRMatrix<double>, CSRMatrix<double>>(BinaryOpCode::MAX, *res, lhs, rhs, ctx);
    }
    void _ewAnd__CSRMatrix_double__CSRMatrix_double__CSRMatrix_double(CSRMatrix<double> ** res, const CSRMatrix<double> * lhs, const CSRMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<CSRMatrix<double>, CSRMatrix<double>, CSRMatrix<double>>(BinaryOpCode::AND, *res, lhs, rhs, ctx);
    }
    void _ewOr__CSRMatrix_double__CSRMatrix_double__CSRMatrix_double(CSRMatrix<double> ** res, const CSRMatrix<double> * lhs, const CSRMatrix<double> * rhs, DCTX(ctx)) {
        ewBinaryMat<CSRMatrix<double>, CSRMatrix<double>, CSRMatrix<double>>(BinaryOpCode::OR, *res, lhs, rhs, ctx);
    }
    // ----------------------------------------------------------------------------
    // ewBinaryObjSca
    // ----------------------------------------------------------------------------
    void _ewAdd__DenseMatrix_float__DenseMatrix_float__float(DenseMatrix<float> ** res, const DenseMatrix<float> * lhs, float rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<float>, DenseMatrix<float>, float>(BinaryOpCode::ADD, *res, lhs, rhs, ctx);
    }
    void _ewSub__DenseMatrix_float__DenseMatrix_float__float(DenseMatrix<float> ** res, const DenseMatrix<float> * lhs, float rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<float>, DenseMatrix<float>, float>(BinaryOpCode::SUB, *res, lhs, rhs, ctx);
    }
    void _ewMul__DenseMatrix_float__DenseMatrix_float__float(DenseMatrix<float> ** res, const DenseMatrix<float> * lhs, float rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<float>, DenseMatrix<float>, float>(BinaryOpCode::MUL, *res, lhs, rhs, ctx);
    }
    void _ewDiv__DenseMatrix_float__DenseMatrix_float__float(DenseMatrix<float> ** res, const DenseMatrix<float> * lhs, float rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<float>, DenseMatrix<float>, float>(BinaryOpCode::DIV, *res, lhs, rhs, ctx);
    }
    void _ewPow__DenseMatrix_float__DenseMatrix_float__float(DenseMatrix<float> ** res, const DenseMatrix<float> * lhs, float rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<float>, DenseMatrix<float>, float>(BinaryOpCode::POW, *res, lhs, rhs, ctx);
    }
    void _ewLog__DenseMatrix_float__DenseMatrix_float__float(DenseMatrix<float> ** res, const DenseMatrix<float> * lhs, float rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<float>, DenseMatrix<float>, float>(BinaryOpCode::LOG, *res, lhs, rhs, ctx);
    }
    void _ewEq__DenseMatrix_float__DenseMatrix_float__float(DenseMatrix<float> ** res, const DenseMatrix<float> * lhs, float rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<float>, DenseMatrix<float>, float>(BinaryOpCode::EQ, *res, lhs, rhs, ctx);
    }
    void _ewNeq__DenseMatrix_float__DenseMatrix_float__float(DenseMatrix<float> ** res, const DenseMatrix<float> * lhs, float rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<float>, DenseMatrix<float>, float>(BinaryOpCode::NEQ, *res, lhs, rhs, ctx);
    }
    void _ewLt__DenseMatrix_float__DenseMatrix_float__float(DenseMatrix<float> ** res, const DenseMatrix<float> * lhs, float rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<float>, DenseMatrix<float>, float>(BinaryOpCode::LT, *res, lhs, rhs, ctx);
    }
    void _ewLe__DenseMatrix_float__DenseMatrix_float__float(DenseMatrix<float> ** res, const DenseMatrix<float> * lhs, float rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<float>, DenseMatrix<float>, float>(BinaryOpCode::LE, *res, lhs, rhs, ctx);
    }
    void _ewGt__DenseMatrix_float__DenseMatrix_float__float(DenseMatrix<float> ** res, const DenseMatrix<float> * lhs, float rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<float>, DenseMatrix<float>, float>(BinaryOpCode::GT, *res, lhs, rhs, ctx);
    }
    void _ewGe__DenseMatrix_float__DenseMatrix_float__float(DenseMatrix<float> ** res, const DenseMatrix<float> * lhs, float rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<float>, DenseMatrix<float>, float>(BinaryOpCode::GE, *res, lhs, rhs, ctx);
    }
    void _ewMin__DenseMatrix_float__DenseMatrix_float__float(DenseMatrix<float> ** res, const DenseMatrix<float> * lhs, float rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<float>, DenseMatrix<float>, float>(BinaryOpCode::MIN, *res, lhs, rhs, ctx);
    }
    void _ewMax__DenseMatrix_float__DenseMatrix_float__float(DenseMatrix<float> ** res, const DenseMatrix<float> * lhs, float rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<float>, DenseMatrix<float>, float>(BinaryOpCode::MAX, *res, lhs, rhs, ctx);
    }
    void _ewAnd__DenseMatrix_float__DenseMatrix_float__float(DenseMatrix<float> ** res, const DenseMatrix<float> * lhs, float rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<float>, DenseMatrix<float>, float>(BinaryOpCode::AND, *res, lhs, rhs, ctx);
    }
    void _ewOr__DenseMatrix_float__DenseMatrix_float__float(DenseMatrix<float> ** res, const DenseMatrix<float> * lhs, float rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<float>, DenseMatrix<float>, float>(BinaryOpCode::OR, *res, lhs, rhs, ctx);
    }
    void _ewAdd__DenseMatrix_double__DenseMatrix_double__double(DenseMatrix<double> ** res, const DenseMatrix<double> * lhs, double rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<double>, DenseMatrix<double>, double>(BinaryOpCode::ADD, *res, lhs, rhs, ctx);
    }
    void _ewSub__DenseMatrix_double__DenseMatrix_double__double(DenseMatrix<double> ** res, const DenseMatrix<double> * lhs, double rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<double>, DenseMatrix<double>, double>(BinaryOpCode::SUB, *res, lhs, rhs, ctx);
    }
    void _ewMul__DenseMatrix_double__DenseMatrix_double__double(DenseMatrix<double> ** res, const DenseMatrix<double> * lhs, double rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<double>, DenseMatrix<double>, double>(BinaryOpCode::MUL, *res, lhs, rhs, ctx);
    }
    void _ewDiv__DenseMatrix_double__DenseMatrix_double__double(DenseMatrix<double> ** res, const DenseMatrix<double> * lhs, double rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<double>, DenseMatrix<double>, double>(BinaryOpCode::DIV, *res, lhs, rhs, ctx);
    }
    void _ewPow__DenseMatrix_double__DenseMatrix_double__double(DenseMatrix<double> ** res, const DenseMatrix<double> * lhs, double rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<double>, DenseMatrix<double>, double>(BinaryOpCode::POW, *res, lhs, rhs, ctx);
    }
    void _ewLog__DenseMatrix_double__DenseMatrix_double__double(DenseMatrix<double> ** res, const DenseMatrix<double> * lhs, double rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<double>, DenseMatrix<double>, double>(BinaryOpCode::LOG, *res, lhs, rhs, ctx);
    }
    void _ewEq__DenseMatrix_double__DenseMatrix_double__double(DenseMatrix<double> ** res, const DenseMatrix<double> * lhs, double rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<double>, DenseMatrix<double>, double>(BinaryOpCode::EQ, *res, lhs, rhs, ctx);
    }
    void _ewNeq__DenseMatrix_double__DenseMatrix_double__double(DenseMatrix<double> ** res, const DenseMatrix<double> * lhs, double rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<double>, DenseMatrix<double>, double>(BinaryOpCode::NEQ, *res, lhs, rhs, ctx);
    }
    void _ewLt__DenseMatrix_double__DenseMatrix_double__double(DenseMatrix<double> ** res, const DenseMatrix<double> * lhs, double rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<double>, DenseMatrix<double>, double>(BinaryOpCode::LT, *res, lhs, rhs, ctx);
    }
    void _ewLe__DenseMatrix_double__DenseMatrix_double__double(DenseMatrix<double> ** res, const DenseMatrix<double> * lhs, double rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<double>, DenseMatrix<double>, double>(BinaryOpCode::LE, *res, lhs, rhs, ctx);
    }
    void _ewGt__DenseMatrix_double__DenseMatrix_double__double(DenseMatrix<double> ** res, const DenseMatrix<double> * lhs, double rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<double>, DenseMatrix<double>, double>(BinaryOpCode::GT, *res, lhs, rhs, ctx);
    }
    void _ewGe__DenseMatrix_double__DenseMatrix_double__double(DenseMatrix<double> ** res, const DenseMatrix<double> * lhs, double rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<double>, DenseMatrix<double>, double>(BinaryOpCode::GE, *res, lhs, rhs, ctx);
    }
    void _ewMin__DenseMatrix_double__DenseMatrix_double__double(DenseMatrix<double> ** res, const DenseMatrix<double> * lhs, double rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<double>, DenseMatrix<double>, double>(BinaryOpCode::MIN, *res, lhs, rhs, ctx);
    }
    void _ewMax__DenseMatrix_double__DenseMatrix_double__double(DenseMatrix<double> ** res, const DenseMatrix<double> * lhs, double rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<double>, DenseMatrix<double>, double>(BinaryOpCode::MAX, *res, lhs, rhs, ctx);
    }
    void _ewAnd__DenseMatrix_double__DenseMatrix_double__double(DenseMatrix<double> ** res, const DenseMatrix<double> * lhs, double rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<double>, DenseMatrix<double>, double>(BinaryOpCode::AND, *res, lhs, rhs, ctx);
    }
    void _ewOr__DenseMatrix_double__DenseMatrix_double__double(DenseMatrix<double> ** res, const DenseMatrix<double> * lhs, double rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<double>, DenseMatrix<double>, double>(BinaryOpCode::OR, *res, lhs, rhs, ctx);
    }
    void _ewAdd__DenseMatrix_int64_t__DenseMatrix_int64_t__int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * lhs, int64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<int64_t>, DenseMatrix<int64_t>, int64_t>(BinaryOpCode::ADD, *res, lhs, rhs, ctx);
    }
    void _ewSub__DenseMatrix_int64_t__DenseMatrix_int64_t__int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * lhs, int64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<int64_t>, DenseMatrix<int64_t>, int64_t>(BinaryOpCode::SUB, *res, lhs, rhs, ctx);
    }
    void _ewMul__DenseMatrix_int64_t__DenseMatrix_int64_t__int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * lhs, int64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<int64_t>, DenseMatrix<int64_t>, int64_t>(BinaryOpCode::MUL, *res, lhs, rhs, ctx);
    }
    void _ewDiv__DenseMatrix_int64_t__DenseMatrix_int64_t__int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * lhs, int64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<int64_t>, DenseMatrix<int64_t>, int64_t>(BinaryOpCode::DIV, *res, lhs, rhs, ctx);
    }
    void _ewPow__DenseMatrix_int64_t__DenseMatrix_int64_t__int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * lhs, int64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<int64_t>, DenseMatrix<int64_t>, int64_t>(BinaryOpCode::POW, *res, lhs, rhs, ctx);
    }
    void _ewLog__DenseMatrix_int64_t__DenseMatrix_int64_t__int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * lhs, int64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<int64_t>, DenseMatrix<int64_t>, int64_t>(BinaryOpCode::LOG, *res, lhs, rhs, ctx);
    }
    void _ewEq__DenseMatrix_int64_t__DenseMatrix_int64_t__int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * lhs, int64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<int64_t>, DenseMatrix<int64_t>, int64_t>(BinaryOpCode::EQ, *res, lhs, rhs, ctx);
    }
    void _ewNeq__DenseMatrix_int64_t__DenseMatrix_int64_t__int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * lhs, int64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<int64_t>, DenseMatrix<int64_t>, int64_t>(BinaryOpCode::NEQ, *res, lhs, rhs, ctx);
    }
    void _ewLt__DenseMatrix_int64_t__DenseMatrix_int64_t__int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * lhs, int64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<int64_t>, DenseMatrix<int64_t>, int64_t>(BinaryOpCode::LT, *res, lhs, rhs, ctx);
    }
    void _ewLe__DenseMatrix_int64_t__DenseMatrix_int64_t__int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * lhs, int64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<int64_t>, DenseMatrix<int64_t>, int64_t>(BinaryOpCode::LE, *res, lhs, rhs, ctx);
    }
    void _ewGt__DenseMatrix_int64_t__DenseMatrix_int64_t__int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * lhs, int64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<int64_t>, DenseMatrix<int64_t>, int64_t>(BinaryOpCode::GT, *res, lhs, rhs, ctx);
    }
    void _ewGe__DenseMatrix_int64_t__DenseMatrix_int64_t__int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * lhs, int64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<int64_t>, DenseMatrix<int64_t>, int64_t>(BinaryOpCode::GE, *res, lhs, rhs, ctx);
    }
    void _ewMin__DenseMatrix_int64_t__DenseMatrix_int64_t__int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * lhs, int64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<int64_t>, DenseMatrix<int64_t>, int64_t>(BinaryOpCode::MIN, *res, lhs, rhs, ctx);
    }
    void _ewMax__DenseMatrix_int64_t__DenseMatrix_int64_t__int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * lhs, int64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<int64_t>, DenseMatrix<int64_t>, int64_t>(BinaryOpCode::MAX, *res, lhs, rhs, ctx);
    }
    void _ewAnd__DenseMatrix_int64_t__DenseMatrix_int64_t__int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * lhs, int64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<int64_t>, DenseMatrix<int64_t>, int64_t>(BinaryOpCode::AND, *res, lhs, rhs, ctx);
    }
    void _ewOr__DenseMatrix_int64_t__DenseMatrix_int64_t__int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * lhs, int64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<int64_t>, DenseMatrix<int64_t>, int64_t>(BinaryOpCode::OR, *res, lhs, rhs, ctx);
    }
    // ----------------------------------------------------------------------------
    // ewBinaryObjSca
    // ----------------------------------------------------------------------------
    void _ewAdd__DenseMatrix_uint64_t__DenseMatrix_uint64_t__uint64_t(DenseMatrix<uint64_t> ** res, const DenseMatrix<uint64_t> * lhs, uint64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<uint64_t>, DenseMatrix<uint64_t>, uint64_t>(BinaryOpCode::ADD, *res, lhs, rhs, ctx);
    }
    void _ewSub__DenseMatrix_uint64_t__DenseMatrix_uint64_t__uint64_t(DenseMatrix<uint64_t> ** res, const DenseMatrix<uint64_t> * lhs, uint64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<uint64_t>, DenseMatrix<uint64_t>, uint64_t>(BinaryOpCode::SUB, *res, lhs, rhs, ctx);
    }
    void _ewMul__DenseMatrix_uint64_t__DenseMatrix_uint64_t__uint64_t(DenseMatrix<uint64_t> ** res, const DenseMatrix<uint64_t> * lhs, uint64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<uint64_t>, DenseMatrix<uint64_t>, uint64_t>(BinaryOpCode::MUL, *res, lhs, rhs, ctx);
    }
    void _ewDiv__DenseMatrix_uint64_t__DenseMatrix_uint64_t__uint64_t(DenseMatrix<uint64_t> ** res, const DenseMatrix<uint64_t> * lhs, uint64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<uint64_t>, DenseMatrix<uint64_t>, uint64_t>(BinaryOpCode::DIV, *res, lhs, rhs, ctx);
    }
    void _ewPow__DenseMatrix_uint64_t__DenseMatrix_uint64_t__uint64_t(DenseMatrix<uint64_t> ** res, const DenseMatrix<uint64_t> * lhs, uint64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<uint64_t>, DenseMatrix<uint64_t>, uint64_t>(BinaryOpCode::POW, *res, lhs, rhs, ctx);
    }
    void _ewLog__DenseMatrix_uint64_t__DenseMatrix_uint64_t__uint64_t(DenseMatrix<uint64_t> ** res, const DenseMatrix<uint64_t> * lhs, uint64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<uint64_t>, DenseMatrix<uint64_t>, uint64_t>(BinaryOpCode::LOG, *res, lhs, rhs, ctx);
    }
    void _ewEq__DenseMatrix_uint64_t__DenseMatrix_uint64_t__uint64_t(DenseMatrix<uint64_t> ** res, const DenseMatrix<uint64_t> * lhs, uint64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<uint64_t>, DenseMatrix<uint64_t>, uint64_t>(BinaryOpCode::EQ, *res, lhs, rhs, ctx);
    }
    void _ewNeq__DenseMatrix_uint64_t__DenseMatrix_uint64_t__uint64_t(DenseMatrix<uint64_t> ** res, const DenseMatrix<uint64_t> * lhs, uint64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<uint64_t>, DenseMatrix<uint64_t>, uint64_t>(BinaryOpCode::NEQ, *res, lhs, rhs, ctx);
    }
    void _ewLt__DenseMatrix_uint64_t__DenseMatrix_uint64_t__uint64_t(DenseMatrix<uint64_t> ** res, const DenseMatrix<uint64_t> * lhs, uint64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<uint64_t>, DenseMatrix<uint64_t>, uint64_t>(BinaryOpCode::LT, *res, lhs, rhs, ctx);
    }
    void _ewLe__DenseMatrix_uint64_t__DenseMatrix_uint64_t__uint64_t(DenseMatrix<uint64_t> ** res, const DenseMatrix<uint64_t> * lhs, uint64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<uint64_t>, DenseMatrix<uint64_t>, uint64_t>(BinaryOpCode::LE, *res, lhs, rhs, ctx);
    }
    void _ewGt__DenseMatrix_uint64_t__DenseMatrix_uint64_t__uint64_t(DenseMatrix<uint64_t> ** res, const DenseMatrix<uint64_t> * lhs, uint64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<uint64_t>, DenseMatrix<uint64_t>, uint64_t>(BinaryOpCode::GT, *res, lhs, rhs, ctx);
    }
    void _ewGe__DenseMatrix_uint64_t__DenseMatrix_uint64_t__uint64_t(DenseMatrix<uint64_t> ** res, const DenseMatrix<uint64_t> * lhs, uint64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<uint64_t>, DenseMatrix<uint64_t>, uint64_t>(BinaryOpCode::GE, *res, lhs, rhs, ctx);
    }
    void _ewMin__DenseMatrix_uint64_t__DenseMatrix_uint64_t__uint64_t(DenseMatrix<uint64_t> ** res, const DenseMatrix<uint64_t> * lhs, uint64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<uint64_t>, DenseMatrix<uint64_t>, uint64_t>(BinaryOpCode::MIN, *res, lhs, rhs, ctx);
    }
    void _ewMax__DenseMatrix_uint64_t__DenseMatrix_uint64_t__uint64_t(DenseMatrix<uint64_t> ** res, const DenseMatrix<uint64_t> * lhs, uint64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<uint64_t>, DenseMatrix<uint64_t>, uint64_t>(BinaryOpCode::MAX, *res, lhs, rhs, ctx);
    }
    void _ewAnd__DenseMatrix_uint64_t__DenseMatrix_uint64_t__uint64_t(DenseMatrix<uint64_t> ** res, const DenseMatrix<uint64_t> * lhs, uint64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<uint64_t>, DenseMatrix<uint64_t>, uint64_t>(BinaryOpCode::AND, *res, lhs, rhs, ctx);
    }
    void _ewOr__DenseMatrix_uint64_t__DenseMatrix_uint64_t__uint64_t(DenseMatrix<uint64_t> ** res, const DenseMatrix<uint64_t> * lhs, uint64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<uint64_t>, DenseMatrix<uint64_t>, uint64_t>(BinaryOpCode::OR, *res, lhs, rhs, ctx);
    }
    void _ewAdd__DenseMatrix_size_t__DenseMatrix_size_t__size_t(DenseMatrix<size_t> ** res, const DenseMatrix<size_t> * lhs, size_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<size_t>, DenseMatrix<size_t>, size_t>(BinaryOpCode::ADD, *res, lhs, rhs, ctx);
    }
    void _ewSub__DenseMatrix_size_t__DenseMatrix_size_t__size_t(DenseMatrix<size_t> ** res, const DenseMatrix<size_t> * lhs, size_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<size_t>, DenseMatrix<size_t>, size_t>(BinaryOpCode::SUB, *res, lhs, rhs, ctx);
    }
    void _ewMul__DenseMatrix_size_t__DenseMatrix_size_t__size_t(DenseMatrix<size_t> ** res, const DenseMatrix<size_t> * lhs, size_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<size_t>, DenseMatrix<size_t>, size_t>(BinaryOpCode::MUL, *res, lhs, rhs, ctx);
    }
    void _ewDiv__DenseMatrix_size_t__DenseMatrix_size_t__size_t(DenseMatrix<size_t> ** res, const DenseMatrix<size_t> * lhs, size_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<size_t>, DenseMatrix<size_t>, size_t>(BinaryOpCode::DIV, *res, lhs, rhs, ctx);
    }
    void _ewPow__DenseMatrix_size_t__DenseMatrix_size_t__size_t(DenseMatrix<size_t> ** res, const DenseMatrix<size_t> * lhs, size_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<size_t>, DenseMatrix<size_t>, size_t>(BinaryOpCode::POW, *res, lhs, rhs, ctx);
    }
    void _ewLog__DenseMatrix_size_t__DenseMatrix_size_t__size_t(DenseMatrix<size_t> ** res, const DenseMatrix<size_t> * lhs, size_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<size_t>, DenseMatrix<size_t>, size_t>(BinaryOpCode::LOG, *res, lhs, rhs, ctx);
    }
    void _ewEq__DenseMatrix_size_t__DenseMatrix_size_t__size_t(DenseMatrix<size_t> ** res, const DenseMatrix<size_t> * lhs, size_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<size_t>, DenseMatrix<size_t>, size_t>(BinaryOpCode::EQ, *res, lhs, rhs, ctx);
    }
    void _ewNeq__DenseMatrix_size_t__DenseMatrix_size_t__size_t(DenseMatrix<size_t> ** res, const DenseMatrix<size_t> * lhs, size_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<size_t>, DenseMatrix<size_t>, size_t>(BinaryOpCode::NEQ, *res, lhs, rhs, ctx);
    }
    void _ewLt__DenseMatrix_size_t__DenseMatrix_size_t__size_t(DenseMatrix<size_t> ** res, const DenseMatrix<size_t> * lhs, size_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<size_t>, DenseMatrix<size_t>, size_t>(BinaryOpCode::LT, *res, lhs, rhs, ctx);
    }
    void _ewLe__DenseMatrix_size_t__DenseMatrix_size_t__size_t(DenseMatrix<size_t> ** res, const DenseMatrix<size_t> * lhs, size_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<size_t>, DenseMatrix<size_t>, size_t>(BinaryOpCode::LE, *res, lhs, rhs, ctx);
    }
    void _ewGt__DenseMatrix_size_t__DenseMatrix_size_t__size_t(DenseMatrix<size_t> ** res, const DenseMatrix<size_t> * lhs, size_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<size_t>, DenseMatrix<size_t>, size_t>(BinaryOpCode::GT, *res, lhs, rhs, ctx);
    }
    void _ewGe__DenseMatrix_size_t__DenseMatrix_size_t__size_t(DenseMatrix<size_t> ** res, const DenseMatrix<size_t> * lhs, size_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<size_t>, DenseMatrix<size_t>, size_t>(BinaryOpCode::GE, *res, lhs, rhs, ctx);
    }
    void _ewMin__DenseMatrix_size_t__DenseMatrix_size_t__size_t(DenseMatrix<size_t> ** res, const DenseMatrix<size_t> * lhs, size_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<size_t>, DenseMatrix<size_t>, size_t>(BinaryOpCode::MIN, *res, lhs, rhs, ctx);
    }
    void _ewMax__DenseMatrix_size_t__DenseMatrix_size_t__size_t(DenseMatrix<size_t> ** res, const DenseMatrix<size_t> * lhs, size_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<size_t>, DenseMatrix<size_t>, size_t>(BinaryOpCode::MAX, *res, lhs, rhs, ctx);
    }
    void _ewAnd__DenseMatrix_size_t__DenseMatrix_size_t__size_t(DenseMatrix<size_t> ** res, const DenseMatrix<size_t> * lhs, size_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<size_t>, DenseMatrix<size_t>, size_t>(BinaryOpCode::AND, *res, lhs, rhs, ctx);
    }
    void _ewOr__DenseMatrix_size_t__DenseMatrix_size_t__size_t(DenseMatrix<size_t> ** res, const DenseMatrix<size_t> * lhs, size_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<DenseMatrix<size_t>, DenseMatrix<size_t>, size_t>(BinaryOpCode::OR, *res, lhs, rhs, ctx);
    }
    void _ewAdd__Frame__Frame__float(Frame ** res, const Frame * lhs, float rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, float>(BinaryOpCode::ADD, *res, lhs, rhs, ctx);
    }
    void _ewSub__Frame__Frame__float(Frame ** res, const Frame * lhs, float rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, float>(BinaryOpCode::SUB, *res, lhs, rhs, ctx);
    }
    void _ewMul__Frame__Frame__float(Frame ** res, const Frame * lhs, float rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, float>(BinaryOpCode::MUL, *res, lhs, rhs, ctx);
    }
    void _ewDiv__Frame__Frame__float(Frame ** res, const Frame * lhs, float rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, float>(BinaryOpCode::DIV, *res, lhs, rhs, ctx);
    }
    void _ewPow__Frame__Frame__float(Frame ** res, const Frame * lhs, float rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, float>(BinaryOpCode::POW, *res, lhs, rhs, ctx);
    }
    void _ewLog__Frame__Frame__float(Frame ** res, const Frame * lhs, float rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, float>(BinaryOpCode::LOG, *res, lhs, rhs, ctx);
    }
    void _ewEq__Frame__Frame__float(Frame ** res, const Frame * lhs, float rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, float>(BinaryOpCode::EQ, *res, lhs, rhs, ctx);
    }
    void _ewNeq__Frame__Frame__float(Frame ** res, const Frame * lhs, float rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, float>(BinaryOpCode::NEQ, *res, lhs, rhs, ctx);
    }
    void _ewLt__Frame__Frame__float(Frame ** res, const Frame * lhs, float rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, float>(BinaryOpCode::LT, *res, lhs, rhs, ctx);
    }
    void _ewLe__Frame__Frame__float(Frame ** res, const Frame * lhs, float rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, float>(BinaryOpCode::LE, *res, lhs, rhs, ctx);
    }
    void _ewGt__Frame__Frame__float(Frame ** res, const Frame * lhs, float rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, float>(BinaryOpCode::GT, *res, lhs, rhs, ctx);
    }
    void _ewGe__Frame__Frame__float(Frame ** res, const Frame * lhs, float rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, float>(BinaryOpCode::GE, *res, lhs, rhs, ctx);
    }
    void _ewMin__Frame__Frame__float(Frame ** res, const Frame * lhs, float rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, float>(BinaryOpCode::MIN, *res, lhs, rhs, ctx);
    }
    void _ewMax__Frame__Frame__float(Frame ** res, const Frame * lhs, float rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, float>(BinaryOpCode::MAX, *res, lhs, rhs, ctx);
    }
    void _ewAnd__Frame__Frame__float(Frame ** res, const Frame * lhs, float rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, float>(BinaryOpCode::AND, *res, lhs, rhs, ctx);
    }
    void _ewOr__Frame__Frame__float(Frame ** res, const Frame * lhs, float rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, float>(BinaryOpCode::OR, *res, lhs, rhs, ctx);
    }
    void _ewAdd__Frame__Frame__double(Frame ** res, const Frame * lhs, double rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, double>(BinaryOpCode::ADD, *res, lhs, rhs, ctx);
    }
    void _ewSub__Frame__Frame__double(Frame ** res, const Frame * lhs, double rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, double>(BinaryOpCode::SUB, *res, lhs, rhs, ctx);
    }
    void _ewMul__Frame__Frame__double(Frame ** res, const Frame * lhs, double rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, double>(BinaryOpCode::MUL, *res, lhs, rhs, ctx);
    }
    void _ewDiv__Frame__Frame__double(Frame ** res, const Frame * lhs, double rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, double>(BinaryOpCode::DIV, *res, lhs, rhs, ctx);
    }
    void _ewPow__Frame__Frame__double(Frame ** res, const Frame * lhs, double rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, double>(BinaryOpCode::POW, *res, lhs, rhs, ctx);
    }
    void _ewLog__Frame__Frame__double(Frame ** res, const Frame * lhs, double rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, double>(BinaryOpCode::LOG, *res, lhs, rhs, ctx);
    }
    void _ewEq__Frame__Frame__double(Frame ** res, const Frame * lhs, double rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, double>(BinaryOpCode::EQ, *res, lhs, rhs, ctx);
    }
    void _ewNeq__Frame__Frame__double(Frame ** res, const Frame * lhs, double rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, double>(BinaryOpCode::NEQ, *res, lhs, rhs, ctx);
    }
    void _ewLt__Frame__Frame__double(Frame ** res, const Frame * lhs, double rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, double>(BinaryOpCode::LT, *res, lhs, rhs, ctx);
    }
    void _ewLe__Frame__Frame__double(Frame ** res, const Frame * lhs, double rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, double>(BinaryOpCode::LE, *res, lhs, rhs, ctx);
    }
    void _ewGt__Frame__Frame__double(Frame ** res, const Frame * lhs, double rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, double>(BinaryOpCode::GT, *res, lhs, rhs, ctx);
    }
    void _ewGe__Frame__Frame__double(Frame ** res, const Frame * lhs, double rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, double>(BinaryOpCode::GE, *res, lhs, rhs, ctx);
    }
    void _ewMin__Frame__Frame__double(Frame ** res, const Frame * lhs, double rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, double>(BinaryOpCode::MIN, *res, lhs, rhs, ctx);
    }
    void _ewMax__Frame__Frame__double(Frame ** res, const Frame * lhs, double rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, double>(BinaryOpCode::MAX, *res, lhs, rhs, ctx);
    }
    void _ewAnd__Frame__Frame__double(Frame ** res, const Frame * lhs, double rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, double>(BinaryOpCode::AND, *res, lhs, rhs, ctx);
    }
    void _ewOr__Frame__Frame__double(Frame ** res, const Frame * lhs, double rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, double>(BinaryOpCode::OR, *res, lhs, rhs, ctx);
    }
    void _ewAdd__Frame__Frame__int64_t(Frame ** res, const Frame * lhs, int64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, int64_t>(BinaryOpCode::ADD, *res, lhs, rhs, ctx);
    }
    void _ewSub__Frame__Frame__int64_t(Frame ** res, const Frame * lhs, int64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, int64_t>(BinaryOpCode::SUB, *res, lhs, rhs, ctx);
    }
    void _ewMul__Frame__Frame__int64_t(Frame ** res, const Frame * lhs, int64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, int64_t>(BinaryOpCode::MUL, *res, lhs, rhs, ctx);
    }
    void _ewDiv__Frame__Frame__int64_t(Frame ** res, const Frame * lhs, int64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, int64_t>(BinaryOpCode::DIV, *res, lhs, rhs, ctx);
    }
    void _ewPow__Frame__Frame__int64_t(Frame ** res, const Frame * lhs, int64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, int64_t>(BinaryOpCode::POW, *res, lhs, rhs, ctx);
    }
    void _ewLog__Frame__Frame__int64_t(Frame ** res, const Frame * lhs, int64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, int64_t>(BinaryOpCode::LOG, *res, lhs, rhs, ctx);
    }
    void _ewEq__Frame__Frame__int64_t(Frame ** res, const Frame * lhs, int64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, int64_t>(BinaryOpCode::EQ, *res, lhs, rhs, ctx);
    }
    void _ewNeq__Frame__Frame__int64_t(Frame ** res, const Frame * lhs, int64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, int64_t>(BinaryOpCode::NEQ, *res, lhs, rhs, ctx);
    }
    void _ewLt__Frame__Frame__int64_t(Frame ** res, const Frame * lhs, int64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, int64_t>(BinaryOpCode::LT, *res, lhs, rhs, ctx);
    }
    void _ewLe__Frame__Frame__int64_t(Frame ** res, const Frame * lhs, int64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, int64_t>(BinaryOpCode::LE, *res, lhs, rhs, ctx);
    }
    void _ewGt__Frame__Frame__int64_t(Frame ** res, const Frame * lhs, int64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, int64_t>(BinaryOpCode::GT, *res, lhs, rhs, ctx);
    }
    void _ewGe__Frame__Frame__int64_t(Frame ** res, const Frame * lhs, int64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, int64_t>(BinaryOpCode::GE, *res, lhs, rhs, ctx);
    }
    void _ewMin__Frame__Frame__int64_t(Frame ** res, const Frame * lhs, int64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, int64_t>(BinaryOpCode::MIN, *res, lhs, rhs, ctx);
    }
    void _ewMax__Frame__Frame__int64_t(Frame ** res, const Frame * lhs, int64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, int64_t>(BinaryOpCode::MAX, *res, lhs, rhs, ctx);
    }
    void _ewAnd__Frame__Frame__int64_t(Frame ** res, const Frame * lhs, int64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, int64_t>(BinaryOpCode::AND, *res, lhs, rhs, ctx);
    }
    void _ewOr__Frame__Frame__int64_t(Frame ** res, const Frame * lhs, int64_t rhs, DCTX(ctx)) {
        ewBinaryObjSca<Frame, Frame, int64_t>(BinaryOpCode::OR, *res, lhs, rhs, ctx);
    }
    // ----------------------------------------------------------------------------
    // ewBinarySca
    // ----------------------------------------------------------------------------
    void _ewAdd__double__double__double(double * res, double lhs, double rhs, DCTX(ctx)) {
        *res = ewBinarySca<double, double, double>(BinaryOpCode::ADD, lhs, rhs, ctx);
    }
    void _ewSub__double__double__double(double * res, double lhs, double rhs, DCTX(ctx)) {
        *res = ewBinarySca<double, double, double>(BinaryOpCode::SUB, lhs, rhs, ctx);
    }
    void _ewMul__double__double__double(double * res, double lhs, double rhs, DCTX(ctx)) {
        *res = ewBinarySca<double, double, double>(BinaryOpCode::MUL, lhs, rhs, ctx);
    }
    void _ewDiv__double__double__double(double * res, double lhs, double rhs, DCTX(ctx)) {
        *res = ewBinarySca<double, double, double>(BinaryOpCode::DIV, lhs, rhs, ctx);
    }
    void _ewPow__double__double__double(double * res, double lhs, double rhs, DCTX(ctx)) {
        *res = ewBinarySca<double, double, double>(BinaryOpCode::POW, lhs, rhs, ctx);
    }
    void _ewLog__double__double__double(double * res, double lhs, double rhs, DCTX(ctx)) {
        *res = ewBinarySca<double, double, double>(BinaryOpCode::LOG, lhs, rhs, ctx);
    }
    void _ewMod__double__double__double(double * res, double lhs, double rhs, DCTX(ctx)) {
        *res = ewBinarySca<double, double, double>(BinaryOpCode::MOD, lhs, rhs, ctx);
    }
    void _ewEq__double__double__double(double * res, double lhs, double rhs, DCTX(ctx)) {
        *res = ewBinarySca<double, double, double>(BinaryOpCode::EQ, lhs, rhs, ctx);
    }
    void _ewNeq__double__double__double(double * res, double lhs, double rhs, DCTX(ctx)) {
        *res = ewBinarySca<double, double, double>(BinaryOpCode::NEQ, lhs, rhs, ctx);
    }
    void _ewLt__double__double__double(double * res, double lhs, double rhs, DCTX(ctx)) {
        *res = ewBinarySca<double, double, double>(BinaryOpCode::LT, lhs, rhs, ctx);
    }
    void _ewLe__double__double__double(double * res, double lhs, double rhs, DCTX(ctx)) {
        *res = ewBinarySca<double, double, double>(BinaryOpCode::LE, lhs, rhs, ctx);
    }
    void _ewGt__double__double__double(double * res, double lhs, double rhs, DCTX(ctx)) {
        *res = ewBinarySca<double, double, double>(BinaryOpCode::GT, lhs, rhs, ctx);
    }
    void _ewGe__double__double__double(double * res, double lhs, double rhs, DCTX(ctx)) {
        *res = ewBinarySca<double, double, double>(BinaryOpCode::GE, lhs, rhs, ctx);
    }
    void _ewMin__double__double__double(double * res, double lhs, double rhs, DCTX(ctx)) {
        *res = ewBinarySca<double, double, double>(BinaryOpCode::MIN, lhs, rhs, ctx);
    }
    void _ewMax__double__double__double(double * res, double lhs, double rhs, DCTX(ctx)) {
        *res = ewBinarySca<double, double, double>(BinaryOpCode::MAX, lhs, rhs, ctx);
    }
    void _ewAnd__double__double__double(double * res, double lhs, double rhs, DCTX(ctx)) {
        *res = ewBinarySca<double, double, double>(BinaryOpCode::AND, lhs, rhs, ctx);
    }
    void _ewOr__double__double__double(double * res, double lhs, double rhs, DCTX(ctx)) {
        *res = ewBinarySca<double, double, double>(BinaryOpCode::OR, lhs, rhs, ctx);
    }
    void _ewAdd__float__float__float(float * res, float lhs, float rhs, DCTX(ctx)) {
        *res = ewBinarySca<float, float, float>(BinaryOpCode::ADD, lhs, rhs, ctx);
    }
    void _ewSub__float__float__float(float * res, float lhs, float rhs, DCTX(ctx)) {
        *res = ewBinarySca<float, float, float>(BinaryOpCode::SUB, lhs, rhs, ctx);
    }
    void _ewMul__float__float__float(float * res, float lhs, float rhs, DCTX(ctx)) {
        *res = ewBinarySca<float, float, float>(BinaryOpCode::MUL, lhs, rhs, ctx);
    }
    void _ewDiv__float__float__float(float * res, float lhs, float rhs, DCTX(ctx)) {
        *res = ewBinarySca<float, float, float>(BinaryOpCode::DIV, lhs, rhs, ctx);
    }
    void _ewPow__float__float__float(float * res, float lhs, float rhs, DCTX(ctx)) {
        *res = ewBinarySca<float, float, float>(BinaryOpCode::POW, lhs, rhs, ctx);
    }
    void _ewLog__float__float__float(float * res, float lhs, float rhs, DCTX(ctx)) {
        *res = ewBinarySca<float, float, float>(BinaryOpCode::LOG, lhs, rhs, ctx);
    }
    void _ewMod__float__float__float(float * res, float lhs, float rhs, DCTX(ctx)) {
        *res = ewBinarySca<float, float, float>(BinaryOpCode::MOD, lhs, rhs, ctx);
    }
    void _ewEq__float__float__float(float * res, float lhs, float rhs, DCTX(ctx)) {
        *res = ewBinarySca<float, float, float>(BinaryOpCode::EQ, lhs, rhs, ctx);
    }
    void _ewNeq__float__float__float(float * res, float lhs, float rhs, DCTX(ctx)) {
        *res = ewBinarySca<float, float, float>(BinaryOpCode::NEQ, lhs, rhs, ctx);
    }
    void _ewLt__float__float__float(float * res, float lhs, float rhs, DCTX(ctx)) {
        *res = ewBinarySca<float, float, float>(BinaryOpCode::LT, lhs, rhs, ctx);
    }
    void _ewLe__float__float__float(float * res, float lhs, float rhs, DCTX(ctx)) {
        *res = ewBinarySca<float, float, float>(BinaryOpCode::LE, lhs, rhs, ctx);
    }
    void _ewGt__float__float__float(float * res, float lhs, float rhs, DCTX(ctx)) {
        *res = ewBinarySca<float, float, float>(BinaryOpCode::GT, lhs, rhs, ctx);
    }
    void _ewGe__float__float__float(float * res, float lhs, float rhs, DCTX(ctx)) {
        *res = ewBinarySca<float, float, float>(BinaryOpCode::GE, lhs, rhs, ctx);
    }
    void _ewMin__float__float__float(float * res, float lhs, float rhs, DCTX(ctx)) {
        *res = ewBinarySca<float, float, float>(BinaryOpCode::MIN, lhs, rhs, ctx);
    }
    void _ewMax__float__float__float(float * res, float lhs, float rhs, DCTX(ctx)) {
        *res = ewBinarySca<float, float, float>(BinaryOpCode::MAX, lhs, rhs, ctx);
    }
    void _ewAnd__float__float__float(float * res, float lhs, float rhs, DCTX(ctx)) {
        *res = ewBinarySca<float, float, float>(BinaryOpCode::AND, lhs, rhs, ctx);
    }
    void _ewOr__float__float__float(float * res, float lhs, float rhs, DCTX(ctx)) {
        *res = ewBinarySca<float, float, float>(BinaryOpCode::OR, lhs, rhs, ctx);
    }
    void _ewAdd__int64_t__int64_t__int64_t(int64_t * res, int64_t lhs, int64_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<int64_t, int64_t, int64_t>(BinaryOpCode::ADD, lhs, rhs, ctx);
    }
    void _ewSub__int64_t__int64_t__int64_t(int64_t * res, int64_t lhs, int64_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<int64_t, int64_t, int64_t>(BinaryOpCode::SUB, lhs, rhs, ctx);
    }
    void _ewMul__int64_t__int64_t__int64_t(int64_t * res, int64_t lhs, int64_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<int64_t, int64_t, int64_t>(BinaryOpCode::MUL, lhs, rhs, ctx);
    }
    void _ewDiv__int64_t__int64_t__int64_t(int64_t * res, int64_t lhs, int64_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<int64_t, int64_t, int64_t>(BinaryOpCode::DIV, lhs, rhs, ctx);
    }
    void _ewPow__int64_t__int64_t__int64_t(int64_t * res, int64_t lhs, int64_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<int64_t, int64_t, int64_t>(BinaryOpCode::POW, lhs, rhs, ctx);
    }
    void _ewLog__int64_t__int64_t__int64_t(int64_t * res, int64_t lhs, int64_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<int64_t, int64_t, int64_t>(BinaryOpCode::LOG, lhs, rhs, ctx);
    }
    void _ewMod__int64_t__int64_t__int64_t(int64_t * res, int64_t lhs, int64_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<int64_t, int64_t, int64_t>(BinaryOpCode::MOD, lhs, rhs, ctx);
    }
    void _ewEq__int64_t__int64_t__int64_t(int64_t * res, int64_t lhs, int64_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<int64_t, int64_t, int64_t>(BinaryOpCode::EQ, lhs, rhs, ctx);
    }
    void _ewNeq__int64_t__int64_t__int64_t(int64_t * res, int64_t lhs, int64_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<int64_t, int64_t, int64_t>(BinaryOpCode::NEQ, lhs, rhs, ctx);
    }
    void _ewLt__int64_t__int64_t__int64_t(int64_t * res, int64_t lhs, int64_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<int64_t, int64_t, int64_t>(BinaryOpCode::LT, lhs, rhs, ctx);
    }
    void _ewLe__int64_t__int64_t__int64_t(int64_t * res, int64_t lhs, int64_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<int64_t, int64_t, int64_t>(BinaryOpCode::LE, lhs, rhs, ctx);
    }
    void _ewGt__int64_t__int64_t__int64_t(int64_t * res, int64_t lhs, int64_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<int64_t, int64_t, int64_t>(BinaryOpCode::GT, lhs, rhs, ctx);
    }
    void _ewGe__int64_t__int64_t__int64_t(int64_t * res, int64_t lhs, int64_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<int64_t, int64_t, int64_t>(BinaryOpCode::GE, lhs, rhs, ctx);
    }
    void _ewMin__int64_t__int64_t__int64_t(int64_t * res, int64_t lhs, int64_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<int64_t, int64_t, int64_t>(BinaryOpCode::MIN, lhs, rhs, ctx);
    }
    void _ewMax__int64_t__int64_t__int64_t(int64_t * res, int64_t lhs, int64_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<int64_t, int64_t, int64_t>(BinaryOpCode::MAX, lhs, rhs, ctx);
    }
    void _ewAnd__int64_t__int64_t__int64_t(int64_t * res, int64_t lhs, int64_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<int64_t, int64_t, int64_t>(BinaryOpCode::AND, lhs, rhs, ctx);
    }
    void _ewOr__int64_t__int64_t__int64_t(int64_t * res, int64_t lhs, int64_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<int64_t, int64_t, int64_t>(BinaryOpCode::OR, lhs, rhs, ctx);
    }
    void _ewAdd__uint64_t__uint64_t__uint64_t(uint64_t * res, uint64_t lhs, uint64_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<uint64_t, uint64_t, uint64_t>(BinaryOpCode::ADD, lhs, rhs, ctx);
    }
    void _ewSub__uint64_t__uint64_t__uint64_t(uint64_t * res, uint64_t lhs, uint64_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<uint64_t, uint64_t, uint64_t>(BinaryOpCode::SUB, lhs, rhs, ctx);
    }
    void _ewMul__uint64_t__uint64_t__uint64_t(uint64_t * res, uint64_t lhs, uint64_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<uint64_t, uint64_t, uint64_t>(BinaryOpCode::MUL, lhs, rhs, ctx);
    }
    void _ewDiv__uint64_t__uint64_t__uint64_t(uint64_t * res, uint64_t lhs, uint64_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<uint64_t, uint64_t, uint64_t>(BinaryOpCode::DIV, lhs, rhs, ctx);
    }
    void _ewPow__uint64_t__uint64_t__uint64_t(uint64_t * res, uint64_t lhs, uint64_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<uint64_t, uint64_t, uint64_t>(BinaryOpCode::POW, lhs, rhs, ctx);
    }
    void _ewLog__uint64_t__uint64_t__uint64_t(uint64_t * res, uint64_t lhs, uint64_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<uint64_t, uint64_t, uint64_t>(BinaryOpCode::LOG, lhs, rhs, ctx);
    }
    void _ewMod__uint64_t__uint64_t__uint64_t(uint64_t * res, uint64_t lhs, uint64_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<uint64_t, uint64_t, uint64_t>(BinaryOpCode::MOD, lhs, rhs, ctx);
    }
    void _ewEq__uint64_t__uint64_t__uint64_t(uint64_t * res, uint64_t lhs, uint64_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<uint64_t, uint64_t, uint64_t>(BinaryOpCode::EQ, lhs, rhs, ctx);
    }
    void _ewNeq__uint64_t__uint64_t__uint64_t(uint64_t * res, uint64_t lhs, uint64_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<uint64_t, uint64_t, uint64_t>(BinaryOpCode::NEQ, lhs, rhs, ctx);
    }
    void _ewLt__uint64_t__uint64_t__uint64_t(uint64_t * res, uint64_t lhs, uint64_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<uint64_t, uint64_t, uint64_t>(BinaryOpCode::LT, lhs, rhs, ctx);
    }
    void _ewLe__uint64_t__uint64_t__uint64_t(uint64_t * res, uint64_t lhs, uint64_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<uint64_t, uint64_t, uint64_t>(BinaryOpCode::LE, lhs, rhs, ctx);
    }
    void _ewGt__uint64_t__uint64_t__uint64_t(uint64_t * res, uint64_t lhs, uint64_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<uint64_t, uint64_t, uint64_t>(BinaryOpCode::GT, lhs, rhs, ctx);
    }
    void _ewGe__uint64_t__uint64_t__uint64_t(uint64_t * res, uint64_t lhs, uint64_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<uint64_t, uint64_t, uint64_t>(BinaryOpCode::GE, lhs, rhs, ctx);
    }
    void _ewMin__uint64_t__uint64_t__uint64_t(uint64_t * res, uint64_t lhs, uint64_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<uint64_t, uint64_t, uint64_t>(BinaryOpCode::MIN, lhs, rhs, ctx);
    }
    void _ewMax__uint64_t__uint64_t__uint64_t(uint64_t * res, uint64_t lhs, uint64_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<uint64_t, uint64_t, uint64_t>(BinaryOpCode::MAX, lhs, rhs, ctx);
    }
    void _ewAnd__uint64_t__uint64_t__uint64_t(uint64_t * res, uint64_t lhs, uint64_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<uint64_t, uint64_t, uint64_t>(BinaryOpCode::AND, lhs, rhs, ctx);
    }
    void _ewOr__uint64_t__uint64_t__uint64_t(uint64_t * res, uint64_t lhs, uint64_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<uint64_t, uint64_t, uint64_t>(BinaryOpCode::OR, lhs, rhs, ctx);
    }
    void _ewAdd__uint32_t__uint32_t__uint32_t(uint32_t * res, uint32_t lhs, uint32_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<uint32_t, uint32_t, uint32_t>(BinaryOpCode::ADD, lhs, rhs, ctx);
    }
    void _ewSub__uint32_t__uint32_t__uint32_t(uint32_t * res, uint32_t lhs, uint32_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<uint32_t, uint32_t, uint32_t>(BinaryOpCode::SUB, lhs, rhs, ctx);
    }
    void _ewMul__uint32_t__uint32_t__uint32_t(uint32_t * res, uint32_t lhs, uint32_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<uint32_t, uint32_t, uint32_t>(BinaryOpCode::MUL, lhs, rhs, ctx);
    }
    void _ewDiv__uint32_t__uint32_t__uint32_t(uint32_t * res, uint32_t lhs, uint32_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<uint32_t, uint32_t, uint32_t>(BinaryOpCode::DIV, lhs, rhs, ctx);
    }
    void _ewPow__uint32_t__uint32_t__uint32_t(uint32_t * res, uint32_t lhs, uint32_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<uint32_t, uint32_t, uint32_t>(BinaryOpCode::POW, lhs, rhs, ctx);
    }
    void _ewLog__uint32_t__uint32_t__uint32_t(uint32_t * res, uint32_t lhs, uint32_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<uint32_t, uint32_t, uint32_t>(BinaryOpCode::LOG, lhs, rhs, ctx);
    }
    void _ewMod__uint32_t__uint32_t__uint32_t(uint32_t * res, uint32_t lhs, uint32_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<uint32_t, uint32_t, uint32_t>(BinaryOpCode::MOD, lhs, rhs, ctx);
    }
    void _ewEq__uint32_t__uint32_t__uint32_t(uint32_t * res, uint32_t lhs, uint32_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<uint32_t, uint32_t, uint32_t>(BinaryOpCode::EQ, lhs, rhs, ctx);
    }
    void _ewNeq__uint32_t__uint32_t__uint32_t(uint32_t * res, uint32_t lhs, uint32_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<uint32_t, uint32_t, uint32_t>(BinaryOpCode::NEQ, lhs, rhs, ctx);
    }
    void _ewLt__uint32_t__uint32_t__uint32_t(uint32_t * res, uint32_t lhs, uint32_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<uint32_t, uint32_t, uint32_t>(BinaryOpCode::LT, lhs, rhs, ctx);
    }
    void _ewLe__uint32_t__uint32_t__uint32_t(uint32_t * res, uint32_t lhs, uint32_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<uint32_t, uint32_t, uint32_t>(BinaryOpCode::LE, lhs, rhs, ctx);
    }
    void _ewGt__uint32_t__uint32_t__uint32_t(uint32_t * res, uint32_t lhs, uint32_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<uint32_t, uint32_t, uint32_t>(BinaryOpCode::GT, lhs, rhs, ctx);
    }
    void _ewGe__uint32_t__uint32_t__uint32_t(uint32_t * res, uint32_t lhs, uint32_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<uint32_t, uint32_t, uint32_t>(BinaryOpCode::GE, lhs, rhs, ctx);
    }
    void _ewMin__uint32_t__uint32_t__uint32_t(uint32_t * res, uint32_t lhs, uint32_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<uint32_t, uint32_t, uint32_t>(BinaryOpCode::MIN, lhs, rhs, ctx);
    }
    void _ewMax__uint32_t__uint32_t__uint32_t(uint32_t * res, uint32_t lhs, uint32_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<uint32_t, uint32_t, uint32_t>(BinaryOpCode::MAX, lhs, rhs, ctx);
    }
    void _ewAnd__uint32_t__uint32_t__uint32_t(uint32_t * res, uint32_t lhs, uint32_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<uint32_t, uint32_t, uint32_t>(BinaryOpCode::AND, lhs, rhs, ctx);
    }
    void _ewOr__uint32_t__uint32_t__uint32_t(uint32_t * res, uint32_t lhs, uint32_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<uint32_t, uint32_t, uint32_t>(BinaryOpCode::OR, lhs, rhs, ctx);
    }
    void _ewAdd__size_t__size_t__size_t(size_t * res, size_t lhs, size_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<size_t, size_t, size_t>(BinaryOpCode::ADD, lhs, rhs, ctx);
    }
    void _ewSub__size_t__size_t__size_t(size_t * res, size_t lhs, size_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<size_t, size_t, size_t>(BinaryOpCode::SUB, lhs, rhs, ctx);
    }
    void _ewMul__size_t__size_t__size_t(size_t * res, size_t lhs, size_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<size_t, size_t, size_t>(BinaryOpCode::MUL, lhs, rhs, ctx);
    }
    void _ewDiv__size_t__size_t__size_t(size_t * res, size_t lhs, size_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<size_t, size_t, size_t>(BinaryOpCode::DIV, lhs, rhs, ctx);
    }
    void _ewPow__size_t__size_t__size_t(size_t * res, size_t lhs, size_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<size_t, size_t, size_t>(BinaryOpCode::POW, lhs, rhs, ctx);
    }
    void _ewLog__size_t__size_t__size_t(size_t * res, size_t lhs, size_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<size_t, size_t, size_t>(BinaryOpCode::LOG, lhs, rhs, ctx);
    }
    void _ewMod__size_t__size_t__size_t(size_t * res, size_t lhs, size_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<size_t, size_t, size_t>(BinaryOpCode::MOD, lhs, rhs, ctx);
    }
    void _ewEq__size_t__size_t__size_t(size_t * res, size_t lhs, size_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<size_t, size_t, size_t>(BinaryOpCode::EQ, lhs, rhs, ctx);
    }
    void _ewNeq__size_t__size_t__size_t(size_t * res, size_t lhs, size_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<size_t, size_t, size_t>(BinaryOpCode::NEQ, lhs, rhs, ctx);
    }
    void _ewLt__size_t__size_t__size_t(size_t * res, size_t lhs, size_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<size_t, size_t, size_t>(BinaryOpCode::LT, lhs, rhs, ctx);
    }
    void _ewLe__size_t__size_t__size_t(size_t * res, size_t lhs, size_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<size_t, size_t, size_t>(BinaryOpCode::LE, lhs, rhs, ctx);
    }
    void _ewGt__size_t__size_t__size_t(size_t * res, size_t lhs, size_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<size_t, size_t, size_t>(BinaryOpCode::GT, lhs, rhs, ctx);
    }
    void _ewGe__size_t__size_t__size_t(size_t * res, size_t lhs, size_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<size_t, size_t, size_t>(BinaryOpCode::GE, lhs, rhs, ctx);
    }
    void _ewMin__size_t__size_t__size_t(size_t * res, size_t lhs, size_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<size_t, size_t, size_t>(BinaryOpCode::MIN, lhs, rhs, ctx);
    }
    void _ewMax__size_t__size_t__size_t(size_t * res, size_t lhs, size_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<size_t, size_t, size_t>(BinaryOpCode::MAX, lhs, rhs, ctx);
    }
    void _ewAnd__size_t__size_t__size_t(size_t * res, size_t lhs, size_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<size_t, size_t, size_t>(BinaryOpCode::AND, lhs, rhs, ctx);
    }
    void _ewOr__size_t__size_t__size_t(size_t * res, size_t lhs, size_t rhs, DCTX(ctx)) {
        *res = ewBinarySca<size_t, size_t, size_t>(BinaryOpCode::OR, lhs, rhs, ctx);
    }
    // ----------------------------------------------------------------------------
    // extractCol
    // ----------------------------------------------------------------------------
    void _extractCol__DenseMatrix_float__DenseMatrix_float__DenseMatrix_int64_t(DenseMatrix<float> ** res, const DenseMatrix<float> * arg, const DenseMatrix<int64_t> * sel, DCTX(ctx)) {
        extractCol<DenseMatrix<float>, DenseMatrix<float>, DenseMatrix<int64_t>>(*res, arg, sel, ctx);
    }
    void _extractCol__DenseMatrix_double__DenseMatrix_double__DenseMatrix_int64_t(DenseMatrix<double> ** res, const DenseMatrix<double> * arg, const DenseMatrix<int64_t> * sel, DCTX(ctx)) {
        extractCol<DenseMatrix<double>, DenseMatrix<double>, DenseMatrix<int64_t>>(*res, arg, sel, ctx);
    }
    void _extractCol__DenseMatrix_int64_t__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * arg, const DenseMatrix<int64_t> * sel, DCTX(ctx)) {
        extractCol<DenseMatrix<int64_t>, DenseMatrix<int64_t>, DenseMatrix<int64_t>>(*res, arg, sel, ctx);
    }
    // ----------------------------------------------------------------------------
    // extractCol
    // ----------------------------------------------------------------------------
    void _extractCol__Frame__Frame__char(Frame ** res, const Frame * arg, const char * sel, DCTX(ctx)) {
        extractCol<Frame, Frame, char>(*res, arg, sel, ctx);
    }
    void _extractCol__Frame__Frame__DenseMatrix_int64_t(Frame ** res, const Frame * arg, const DenseMatrix<int64_t> * sel, DCTX(ctx)) {
        extractCol<Frame, Frame, DenseMatrix<int64_t>>(*res, arg, sel, ctx);
    }
    void _extractCol__Frame__Frame__DenseMatrix_size_t(Frame ** res, const Frame * arg, const DenseMatrix<size_t> * sel, DCTX(ctx)) {
        extractCol<Frame, Frame, DenseMatrix<size_t>>(*res, arg, sel, ctx);
    }
    // ----------------------------------------------------------------------------
    // fill
    // ----------------------------------------------------------------------------
    void _fill__DenseMatrix_float__float__size_t__size_t(DenseMatrix<float> ** res, float arg, size_t numRows, size_t numCols, DCTX(ctx)) {
        fill<DenseMatrix<float>, float>(*res, arg, numRows, numCols, ctx);
    }
    */
    void _fill__DenseMatrix_double__double__size_t__size_t(DenseMatrix<double> ** res, double arg, size_t numRows, size_t numCols, DCTX(ctx)) {
        fill<DenseMatrix<double>, double>(*res, arg, numRows, numCols, ctx);
    }
    /*
    void _fill__DenseMatrix_int64_t__int64_t__size_t__size_t(DenseMatrix<int64_t> ** res, int64_t arg, size_t numRows, size_t numCols, DCTX(ctx)) {
        fill<DenseMatrix<int64_t>, int64_t>(*res, arg, numRows, numCols, ctx);
    }
    void _fill__DenseMatrix_uint8_t__uint8_t__size_t__size_t(DenseMatrix<uint8_t> ** res, uint8_t arg, size_t numRows, size_t numCols, DCTX(ctx)) {
        fill<DenseMatrix<uint8_t>, uint8_t>(*res, arg, numRows, numCols, ctx);
    }
    // ----------------------------------------------------------------------------
    // matrixConstant
    // ----------------------------------------------------------------------------
    void _matrixConstant__DenseMatrix_float__uint64_t(DenseMatrix<float> ** res, uint64_t matrixAddr, DCTX(ctx)) {
        matrixConstant<DenseMatrix<float>>(*res, matrixAddr, ctx);
    }
    void _matrixConstant__DenseMatrix_double__uint64_t(DenseMatrix<double> ** res, uint64_t matrixAddr, DCTX(ctx)) {
        matrixConstant<DenseMatrix<double>>(*res, matrixAddr, ctx);
    }
    void _matrixConstant__DenseMatrix_int64_t__uint64_t(DenseMatrix<int64_t> ** res, uint64_t matrixAddr, DCTX(ctx)) {
        matrixConstant<DenseMatrix<int64_t>>(*res, matrixAddr, ctx);
    }
    void _matrixConstant__DenseMatrix_uint64_t__uint64_t(DenseMatrix<uint64_t> ** res, uint64_t matrixAddr, DCTX(ctx)) {
        matrixConstant<DenseMatrix<uint64_t>>(*res, matrixAddr, ctx);
    }
    void _matrixConstant__DenseMatrix_uint8_t__uint64_t(DenseMatrix<uint8_t> ** res, uint64_t matrixAddr, DCTX(ctx)) {
        matrixConstant<DenseMatrix<uint8_t>>(*res, matrixAddr, ctx);
    }
    void _matrixConstant__DenseMatrix_bool__uint64_t(DenseMatrix<bool> ** res, uint64_t matrixAddr, DCTX(ctx)) {
        matrixConstant<DenseMatrix<bool>>(*res, matrixAddr, ctx);
    }
    // ----------------------------------------------------------------------------
    // extractRow
    // ----------------------------------------------------------------------------
    void _extractRow__DenseMatrix_double__DenseMatrix_double__DenseMatrix_int64_t(DenseMatrix<double> ** res, const DenseMatrix<double> * arg, const DenseMatrix<int64_t> * sel, DCTX(ctx)) {
        extractRow<DenseMatrix<double>, DenseMatrix<double>, int64_t>(*res, arg, sel, ctx);
    }
    void _extractRow__DenseMatrix_double__DenseMatrix_double__DenseMatrix_size_t(DenseMatrix<double> ** res, const DenseMatrix<double> * arg, const DenseMatrix<size_t> * sel, DCTX(ctx)) {
        extractRow<DenseMatrix<double>, DenseMatrix<double>, size_t>(*res, arg, sel, ctx);
    }
    void _extractRow__DenseMatrix_float__DenseMatrix_float__DenseMatrix_int64_t(DenseMatrix<float> ** res, const DenseMatrix<float> * arg, const DenseMatrix<int64_t> * sel, DCTX(ctx)) {
        extractRow<DenseMatrix<float>, DenseMatrix<float>, int64_t>(*res, arg, sel, ctx);
    }
    void _extractRow__DenseMatrix_float__DenseMatrix_float__DenseMatrix_size_t(DenseMatrix<float> ** res, const DenseMatrix<float> * arg, const DenseMatrix<size_t> * sel, DCTX(ctx)) {
        extractRow<DenseMatrix<float>, DenseMatrix<float>, size_t>(*res, arg, sel, ctx);
    }
    void _extractRow__DenseMatrix_int64_t__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * arg, const DenseMatrix<int64_t> * sel, DCTX(ctx)) {
        extractRow<DenseMatrix<int64_t>, DenseMatrix<int64_t>, int64_t>(*res, arg, sel, ctx);
    }
    void _extractRow__DenseMatrix_int64_t__DenseMatrix_int64_t__DenseMatrix_size_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * arg, const DenseMatrix<size_t> * sel, DCTX(ctx)) {
        extractRow<DenseMatrix<int64_t>, DenseMatrix<int64_t>, size_t>(*res, arg, sel, ctx);
    }
    void _extractRow__Frame__Frame__DenseMatrix_int64_t(Frame ** res, const Frame * arg, const DenseMatrix<int64_t> * sel, DCTX(ctx)) {
        extractRow<Frame, Frame, int64_t>(*res, arg, sel, ctx);
    }
    void _extractRow__Frame__Frame__DenseMatrix_size_t(Frame ** res, const Frame * arg, const DenseMatrix<size_t> * sel, DCTX(ctx)) {
        extractRow<Frame, Frame, size_t>(*res, arg, sel, ctx);
    }
    // ----------------------------------------------------------------------------
    // filterRow
    // ----------------------------------------------------------------------------
    void _filterRow__Frame__Frame__DenseMatrix_double(Frame ** res, const Frame * arg, const DenseMatrix<double> * sel, DCTX(ctx)) {
        filterRow<Frame, Frame, double>(*res, arg, sel, ctx);
    }
    void _filterRow__Frame__Frame__DenseMatrix_int64_t(Frame ** res, const Frame * arg, const DenseMatrix<int64_t> * sel, DCTX(ctx)) {
        filterRow<Frame, Frame, int64_t>(*res, arg, sel, ctx);
    }
    // ----------------------------------------------------------------------------
    // groupJoin
    // ----------------------------------------------------------------------------
    void _groupJoin__Frame__DenseMatrix_int64_t__Frame__Frame__char__char__char(Frame ** res, DenseMatrix<int64_t> ** lhsTid, const Frame * lhs, const Frame * rhs, const char * lhsOn, const char * rhsOn, const char * rhsAgg, DCTX(ctx)) {
        groupJoin<int64_t>(*res, *lhsTid, lhs, rhs, lhsOn, rhsOn, rhsAgg, ctx);
    }
    void _groupJoin__Frame__DenseMatrix_size_t__Frame__Frame__char__char__char(Frame ** res, DenseMatrix<size_t> ** lhsTid, const Frame * lhs, const Frame * rhs, const char * lhsOn, const char * rhsOn, const char * rhsAgg, DCTX(ctx)) {
        groupJoin<size_t>(*res, *lhsTid, lhs, rhs, lhsOn, rhsOn, rhsAgg, ctx);
    }
    // ----------------------------------------------------------------------------
    // innerJoin
    // ----------------------------------------------------------------------------
    void _innerJoin__Frame__Frame__Frame__char__char(Frame ** res, const Frame * lhs, const Frame * rhs, const char * lhsOn, const char * rhsOn, DCTX(ctx)) {
        innerJoin(*res, lhs, rhs, lhsOn, rhsOn, ctx);
    }
    // ----------------------------------------------------------------------------
    // thetaJoin
    // ----------------------------------------------------------------------------
    void _thetaJoin__Frame__Frame__Frame__char_variadic__size_t__char_variadic__size_t__CompareOperation__size_t(Frame ** res, const Frame * lhs, const Frame * rhs, const char ** lhsOn, size_t numLhsOn, const char ** rhsOn, size_t numRhsOn, CompareOperation * cmp, size_t numCmp, DCTX(ctx)) {
        thetaJoin<Frame, Frame, Frame>(*res, lhs, rhs, lhsOn, numLhsOn, rhsOn, numRhsOn, cmp, numCmp, ctx);
    }
    // ----------------------------------------------------------------------------
    // map
    // ----------------------------------------------------------------------------
    void _map__DenseMatrix_double__DenseMatrix_double__void(DenseMatrix<double> ** res, const DenseMatrix<double> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<double>, DenseMatrix<double>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_double__DenseMatrix_float__void(DenseMatrix<double> ** res, const DenseMatrix<float> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<double>, DenseMatrix<float>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_double__DenseMatrix_int64_t__void(DenseMatrix<double> ** res, const DenseMatrix<int64_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<double>, DenseMatrix<int64_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_double__DenseMatrix_int32_t__void(DenseMatrix<double> ** res, const DenseMatrix<int32_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<double>, DenseMatrix<int32_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_double__DenseMatrix_int8_t__void(DenseMatrix<double> ** res, const DenseMatrix<int8_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<double>, DenseMatrix<int8_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_double__DenseMatrix_uint64_t__void(DenseMatrix<double> ** res, const DenseMatrix<uint64_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<double>, DenseMatrix<uint64_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_double__DenseMatrix_uint32_t__void(DenseMatrix<double> ** res, const DenseMatrix<uint32_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<double>, DenseMatrix<uint32_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_double__DenseMatrix_uint8_t__void(DenseMatrix<double> ** res, const DenseMatrix<uint8_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<double>, DenseMatrix<uint8_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_float__DenseMatrix_double__void(DenseMatrix<float> ** res, const DenseMatrix<double> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<float>, DenseMatrix<double>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_float__DenseMatrix_float__void(DenseMatrix<float> ** res, const DenseMatrix<float> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<float>, DenseMatrix<float>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_float__DenseMatrix_int64_t__void(DenseMatrix<float> ** res, const DenseMatrix<int64_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<float>, DenseMatrix<int64_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_float__DenseMatrix_int32_t__void(DenseMatrix<float> ** res, const DenseMatrix<int32_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<float>, DenseMatrix<int32_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_float__DenseMatrix_int8_t__void(DenseMatrix<float> ** res, const DenseMatrix<int8_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<float>, DenseMatrix<int8_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_float__DenseMatrix_uint64_t__void(DenseMatrix<float> ** res, const DenseMatrix<uint64_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<float>, DenseMatrix<uint64_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_float__DenseMatrix_uint32_t__void(DenseMatrix<float> ** res, const DenseMatrix<uint32_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<float>, DenseMatrix<uint32_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_float__DenseMatrix_uint8_t__void(DenseMatrix<float> ** res, const DenseMatrix<uint8_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<float>, DenseMatrix<uint8_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_int64_t__DenseMatrix_double__void(DenseMatrix<int64_t> ** res, const DenseMatrix<double> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<int64_t>, DenseMatrix<double>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_int64_t__DenseMatrix_float__void(DenseMatrix<int64_t> ** res, const DenseMatrix<float> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<int64_t>, DenseMatrix<float>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_int64_t__DenseMatrix_int64_t__void(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<int64_t>, DenseMatrix<int64_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_int64_t__DenseMatrix_int32_t__void(DenseMatrix<int64_t> ** res, const DenseMatrix<int32_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<int64_t>, DenseMatrix<int32_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_int64_t__DenseMatrix_int8_t__void(DenseMatrix<int64_t> ** res, const DenseMatrix<int8_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<int64_t>, DenseMatrix<int8_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_int64_t__DenseMatrix_uint64_t__void(DenseMatrix<int64_t> ** res, const DenseMatrix<uint64_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<int64_t>, DenseMatrix<uint64_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_int64_t__DenseMatrix_uint32_t__void(DenseMatrix<int64_t> ** res, const DenseMatrix<uint32_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<int64_t>, DenseMatrix<uint32_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_int64_t__DenseMatrix_uint8_t__void(DenseMatrix<int64_t> ** res, const DenseMatrix<uint8_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<int64_t>, DenseMatrix<uint8_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_int32_t__DenseMatrix_double__void(DenseMatrix<int32_t> ** res, const DenseMatrix<double> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<int32_t>, DenseMatrix<double>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_int32_t__DenseMatrix_float__void(DenseMatrix<int32_t> ** res, const DenseMatrix<float> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<int32_t>, DenseMatrix<float>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_int32_t__DenseMatrix_int64_t__void(DenseMatrix<int32_t> ** res, const DenseMatrix<int64_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<int32_t>, DenseMatrix<int64_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_int32_t__DenseMatrix_int32_t__void(DenseMatrix<int32_t> ** res, const DenseMatrix<int32_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<int32_t>, DenseMatrix<int32_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_int32_t__DenseMatrix_int8_t__void(DenseMatrix<int32_t> ** res, const DenseMatrix<int8_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<int32_t>, DenseMatrix<int8_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_int32_t__DenseMatrix_uint64_t__void(DenseMatrix<int32_t> ** res, const DenseMatrix<uint64_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<int32_t>, DenseMatrix<uint64_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_int32_t__DenseMatrix_uint32_t__void(DenseMatrix<int32_t> ** res, const DenseMatrix<uint32_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<int32_t>, DenseMatrix<uint32_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_int32_t__DenseMatrix_uint8_t__void(DenseMatrix<int32_t> ** res, const DenseMatrix<uint8_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<int32_t>, DenseMatrix<uint8_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_int8_t__DenseMatrix_double__void(DenseMatrix<int8_t> ** res, const DenseMatrix<double> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<int8_t>, DenseMatrix<double>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_int8_t__DenseMatrix_float__void(DenseMatrix<int8_t> ** res, const DenseMatrix<float> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<int8_t>, DenseMatrix<float>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_int8_t__DenseMatrix_int64_t__void(DenseMatrix<int8_t> ** res, const DenseMatrix<int64_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<int8_t>, DenseMatrix<int64_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_int8_t__DenseMatrix_int32_t__void(DenseMatrix<int8_t> ** res, const DenseMatrix<int32_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<int8_t>, DenseMatrix<int32_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_int8_t__DenseMatrix_int8_t__void(DenseMatrix<int8_t> ** res, const DenseMatrix<int8_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<int8_t>, DenseMatrix<int8_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_int8_t__DenseMatrix_uint64_t__void(DenseMatrix<int8_t> ** res, const DenseMatrix<uint64_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<int8_t>, DenseMatrix<uint64_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_int8_t__DenseMatrix_uint32_t__void(DenseMatrix<int8_t> ** res, const DenseMatrix<uint32_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<int8_t>, DenseMatrix<uint32_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_int8_t__DenseMatrix_uint8_t__void(DenseMatrix<int8_t> ** res, const DenseMatrix<uint8_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<int8_t>, DenseMatrix<uint8_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_uint64_t__DenseMatrix_double__void(DenseMatrix<uint64_t> ** res, const DenseMatrix<double> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<uint64_t>, DenseMatrix<double>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_uint64_t__DenseMatrix_float__void(DenseMatrix<uint64_t> ** res, const DenseMatrix<float> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<uint64_t>, DenseMatrix<float>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_uint64_t__DenseMatrix_int64_t__void(DenseMatrix<uint64_t> ** res, const DenseMatrix<int64_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<uint64_t>, DenseMatrix<int64_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_uint64_t__DenseMatrix_int32_t__void(DenseMatrix<uint64_t> ** res, const DenseMatrix<int32_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<uint64_t>, DenseMatrix<int32_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_uint64_t__DenseMatrix_int8_t__void(DenseMatrix<uint64_t> ** res, const DenseMatrix<int8_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<uint64_t>, DenseMatrix<int8_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_uint64_t__DenseMatrix_uint64_t__void(DenseMatrix<uint64_t> ** res, const DenseMatrix<uint64_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<uint64_t>, DenseMatrix<uint64_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_uint64_t__DenseMatrix_uint32_t__void(DenseMatrix<uint64_t> ** res, const DenseMatrix<uint32_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<uint64_t>, DenseMatrix<uint32_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_uint64_t__DenseMatrix_uint8_t__void(DenseMatrix<uint64_t> ** res, const DenseMatrix<uint8_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<uint64_t>, DenseMatrix<uint8_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_uint32_t__DenseMatrix_double__void(DenseMatrix<uint32_t> ** res, const DenseMatrix<double> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<uint32_t>, DenseMatrix<double>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_uint32_t__DenseMatrix_float__void(DenseMatrix<uint32_t> ** res, const DenseMatrix<float> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<uint32_t>, DenseMatrix<float>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_uint32_t__DenseMatrix_int64_t__void(DenseMatrix<uint32_t> ** res, const DenseMatrix<int64_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<uint32_t>, DenseMatrix<int64_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_uint32_t__DenseMatrix_int32_t__void(DenseMatrix<uint32_t> ** res, const DenseMatrix<int32_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<uint32_t>, DenseMatrix<int32_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_uint32_t__DenseMatrix_int8_t__void(DenseMatrix<uint32_t> ** res, const DenseMatrix<int8_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<uint32_t>, DenseMatrix<int8_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_uint32_t__DenseMatrix_uint64_t__void(DenseMatrix<uint32_t> ** res, const DenseMatrix<uint64_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<uint32_t>, DenseMatrix<uint64_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_uint32_t__DenseMatrix_uint32_t__void(DenseMatrix<uint32_t> ** res, const DenseMatrix<uint32_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<uint32_t>, DenseMatrix<uint32_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_uint32_t__DenseMatrix_uint8_t__void(DenseMatrix<uint32_t> ** res, const DenseMatrix<uint8_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<uint32_t>, DenseMatrix<uint8_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_uint8_t__DenseMatrix_double__void(DenseMatrix<uint8_t> ** res, const DenseMatrix<double> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<uint8_t>, DenseMatrix<double>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_uint8_t__DenseMatrix_float__void(DenseMatrix<uint8_t> ** res, const DenseMatrix<float> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<uint8_t>, DenseMatrix<float>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_uint8_t__DenseMatrix_int64_t__void(DenseMatrix<uint8_t> ** res, const DenseMatrix<int64_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<uint8_t>, DenseMatrix<int64_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_uint8_t__DenseMatrix_int32_t__void(DenseMatrix<uint8_t> ** res, const DenseMatrix<int32_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<uint8_t>, DenseMatrix<int32_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_uint8_t__DenseMatrix_int8_t__void(DenseMatrix<uint8_t> ** res, const DenseMatrix<int8_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<uint8_t>, DenseMatrix<int8_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_uint8_t__DenseMatrix_uint64_t__void(DenseMatrix<uint8_t> ** res, const DenseMatrix<uint64_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<uint8_t>, DenseMatrix<uint64_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_uint8_t__DenseMatrix_uint32_t__void(DenseMatrix<uint8_t> ** res, const DenseMatrix<uint32_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<uint8_t>, DenseMatrix<uint32_t>>(*res, arg, func, ctx);
    }
    void _map__DenseMatrix_uint8_t__DenseMatrix_uint8_t__void(DenseMatrix<uint8_t> ** res, const DenseMatrix<uint8_t> * arg, void * func, DCTX(ctx)) {
        map<DenseMatrix<uint8_t>, DenseMatrix<uint8_t>>(*res, arg, func, ctx);
    }
    // ----------------------------------------------------------------------------
    // matMul
    // ----------------------------------------------------------------------------
    void _matMul__DenseMatrix_float__DenseMatrix_float__DenseMatrix_float__bool__bool(DenseMatrix<float> ** res, const DenseMatrix<float> * lhs, const DenseMatrix<float> * rhs, bool transa, bool transb, DCTX(ctx)) {
        matMul<DenseMatrix<float>, DenseMatrix<float>, DenseMatrix<float>>(*res, lhs, rhs, transa, transb, ctx);
    }
    void _matMul__DenseMatrix_double__DenseMatrix_double__DenseMatrix_double__bool__bool(DenseMatrix<double> ** res, const DenseMatrix<double> * lhs, const DenseMatrix<double> * rhs, bool transa, bool transb, DCTX(ctx)) {
        matMul<DenseMatrix<double>, DenseMatrix<double>, DenseMatrix<double>>(*res, lhs, rhs, transa, transb, ctx);
    }
    // ----------------------------------------------------------------------------
    // now
    // ----------------------------------------------------------------------------
    void _now__int64_t(int64_t * res, DCTX(ctx)) {
        *res = now(ctx);
    }
    // ----------------------------------------------------------------------------
    // oneHot
    // ----------------------------------------------------------------------------
    void _oneHot__DenseMatrix_double__DenseMatrix_double__DenseMatrix_int64_t(DenseMatrix<double> ** res, const DenseMatrix<double> * arg, const DenseMatrix<int64_t> * info, DCTX(ctx)) {
        oneHot<DenseMatrix<double>, DenseMatrix<double>>(*res, arg, info, ctx);
    }
    void _oneHot__DenseMatrix_int64_t__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * arg, const DenseMatrix<int64_t> * info, DCTX(ctx)) {
        oneHot<DenseMatrix<int64_t>, DenseMatrix<int64_t>>(*res, arg, info, ctx);
    }
    // ----------------------------------------------------------------------------
    // printSca
    // ----------------------------------------------------------------------------
    void _print__double__bool__bool(double arg, bool newline, bool err, DCTX(ctx)) {
        printSca<double>(arg, newline, err, ctx);
    }
    void _print__float__bool__bool(float arg, bool newline, bool err, DCTX(ctx)) {
        printSca<float>(arg, newline, err, ctx);
    }
    void _print__int64_t__bool__bool(int64_t arg, bool newline, bool err, DCTX(ctx)) {
        printSca<int64_t>(arg, newline, err, ctx);
    }
    void _print__int32_t__bool__bool(int32_t arg, bool newline, bool err, DCTX(ctx)) {
        printSca<int32_t>(arg, newline, err, ctx);
    }
    void _print__int8_t__bool__bool(int8_t arg, bool newline, bool err, DCTX(ctx)) {
        printSca<int8_t>(arg, newline, err, ctx);
    }
    void _print__uint64_t__bool__bool(uint64_t arg, bool newline, bool err, DCTX(ctx)) {
        printSca<uint64_t>(arg, newline, err, ctx);
    }
    void _print__uint32_t__bool__bool(uint32_t arg, bool newline, bool err, DCTX(ctx)) {
        printSca<uint32_t>(arg, newline, err, ctx);
    }
    void _print__uint8_t__bool__bool(uint8_t arg, bool newline, bool err, DCTX(ctx)) {
        printSca<uint8_t>(arg, newline, err, ctx);
    }
    void _print__bool__bool__bool(bool arg, bool newline, bool err, DCTX(ctx)) {
        printSca<bool>(arg, newline, err, ctx);
    }
    void _print__size_t__bool__bool(size_t arg, bool newline, bool err, DCTX(ctx)) {
        printSca<size_t>(arg, newline, err, ctx);
    }
    // ----------------------------------------------------------------------------
    // printObj
    // ----------------------------------------------------------------------------
    */
    void _print__DenseMatrix_double__bool__bool(const DenseMatrix<double> * arg, bool newline, bool err, DCTX(ctx)) {
        printObj<DenseMatrix<double>>(arg, newline, err, ctx);
    }
    /*
    void _print__DenseMatrix_float__bool__bool(const DenseMatrix<float> * arg, bool newline, bool err, DCTX(ctx)) {
        printObj<DenseMatrix<float>>(arg, newline, err, ctx);
    }
    void _print__DenseMatrix_int64_t__bool__bool(const DenseMatrix<int64_t> * arg, bool newline, bool err, DCTX(ctx)) {
        printObj<DenseMatrix<int64_t>>(arg, newline, err, ctx);
    }
    void _print__DenseMatrix_int32_t__bool__bool(const DenseMatrix<int32_t> * arg, bool newline, bool err, DCTX(ctx)) {
        printObj<DenseMatrix<int32_t>>(arg, newline, err, ctx);
    }
    void _print__DenseMatrix_int8_t__bool__bool(const DenseMatrix<int8_t> * arg, bool newline, bool err, DCTX(ctx)) {
        printObj<DenseMatrix<int8_t>>(arg, newline, err, ctx);
    }
    void _print__DenseMatrix_uint64_t__bool__bool(const DenseMatrix<uint64_t> * arg, bool newline, bool err, DCTX(ctx)) {
        printObj<DenseMatrix<uint64_t>>(arg, newline, err, ctx);
    }
    void _print__DenseMatrix_uint32_t__bool__bool(const DenseMatrix<uint32_t> * arg, bool newline, bool err, DCTX(ctx)) {
        printObj<DenseMatrix<uint32_t>>(arg, newline, err, ctx);
    }
    void _print__DenseMatrix_uint8_t__bool__bool(const DenseMatrix<uint8_t> * arg, bool newline, bool err, DCTX(ctx)) {
        printObj<DenseMatrix<uint8_t>>(arg, newline, err, ctx);
    }
    void _print__DenseMatrix_bool__bool__bool(const DenseMatrix<bool> * arg, bool newline, bool err, DCTX(ctx)) {
        printObj<DenseMatrix<bool>>(arg, newline, err, ctx);
    }
    void _print__DenseMatrix_size_t__bool__bool(const DenseMatrix<size_t> * arg, bool newline, bool err, DCTX(ctx)) {
        printObj<DenseMatrix<size_t>>(arg, newline, err, ctx);
    }
    void _print__CSRMatrix_double__bool__bool(const CSRMatrix<double> * arg, bool newline, bool err, DCTX(ctx)) {
        printObj<CSRMatrix<double>>(arg, newline, err, ctx);
    }
    void _print__CSRMatrix_float__bool__bool(const CSRMatrix<float> * arg, bool newline, bool err, DCTX(ctx)) {
        printObj<CSRMatrix<float>>(arg, newline, err, ctx);
    }
    void _print__CSRMatrix_int64_t__bool__bool(const CSRMatrix<int64_t> * arg, bool newline, bool err, DCTX(ctx)) {
        printObj<CSRMatrix<int64_t>>(arg, newline, err, ctx);
    }
    void _print__CSRMatrix_uint8_t__bool__bool(const CSRMatrix<uint8_t> * arg, bool newline, bool err, DCTX(ctx)) {
        printObj<CSRMatrix<uint8_t>>(arg, newline, err, ctx);
    }
    void _print__Frame__bool__bool(const Frame * arg, bool newline, bool err, DCTX(ctx)) {
        printObj<Frame>(arg, newline, err, ctx);
    }
    void _print__char__bool__bool(const char * arg, bool newline, bool err, DCTX(ctx)) {
        printObj<char>(arg, newline, err, ctx);
    }
    // ----------------------------------------------------------------------------
    // randMatrix
    // ----------------------------------------------------------------------------
    void _randMatrix__DenseMatrix_double__size_t__size_t__double__double__double__int64_t(DenseMatrix<double> ** res, size_t numRows, size_t numCols, double min, double max, double sparsity, int64_t seed, DCTX(ctx)) {
        randMatrix<DenseMatrix<double>, double>(*res, numRows, numCols, min, max, sparsity, seed, ctx);
    }
    void _randMatrix__DenseMatrix_float__size_t__size_t__float__float__double__int64_t(DenseMatrix<float> ** res, size_t numRows, size_t numCols, float min, float max, double sparsity, int64_t seed, DCTX(ctx)) {
        randMatrix<DenseMatrix<float>, float>(*res, numRows, numCols, min, max, sparsity, seed, ctx);
    }
    void _randMatrix__DenseMatrix_int64_t__size_t__size_t__int64_t__int64_t__double__int64_t(DenseMatrix<int64_t> ** res, size_t numRows, size_t numCols, int64_t min, int64_t max, double sparsity, int64_t seed, DCTX(ctx)) {
        randMatrix<DenseMatrix<int64_t>, int64_t>(*res, numRows, numCols, min, max, sparsity, seed, ctx);
    }
    void _randMatrix__DenseMatrix_uint8_t__size_t__size_t__uint8_t__uint8_t__double__int64_t(DenseMatrix<uint8_t> ** res, size_t numRows, size_t numCols, uint8_t min, uint8_t max, double sparsity, int64_t seed, DCTX(ctx)) {
        randMatrix<DenseMatrix<uint8_t>, uint8_t>(*res, numRows, numCols, min, max, sparsity, seed, ctx);
    }
    void _randMatrix__CSRMatrix_double__size_t__size_t__double__double__double__int64_t(CSRMatrix<double> ** res, size_t numRows, size_t numCols, double min, double max, double sparsity, int64_t seed, DCTX(ctx)) {
        randMatrix<CSRMatrix<double>, double>(*res, numRows, numCols, min, max, sparsity, seed, ctx);
    }
    // ----------------------------------------------------------------------------
    // sample
    // ----------------------------------------------------------------------------
    void _sample__DenseMatrix_double__double__size_t__bool__int64_t(DenseMatrix<double> ** res, double range, size_t size, bool withReplacement, int64_t seed, DCTX(ctx)) {
        sample<DenseMatrix<double>, double>(*res, range, size, withReplacement, seed, ctx);
    }
    void _sample__DenseMatrix_int64_t__int64_t__size_t__bool__int64_t(DenseMatrix<int64_t> ** res, int64_t range, size_t size, bool withReplacement, int64_t seed, DCTX(ctx)) {
        sample<DenseMatrix<int64_t>, int64_t>(*res, range, size, withReplacement, seed, ctx);
    }
    // ----------------------------------------------------------------------------
    // reverse
    // ----------------------------------------------------------------------------
    void _reverse__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * arg, DCTX(ctx)) {
        reverse<DenseMatrix<double>, DenseMatrix<double>>(*res, arg, ctx);
    }
    void _reverse__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * arg, DCTX(ctx)) {
        reverse<DenseMatrix<int64_t>, DenseMatrix<int64_t>>(*res, arg, ctx);
    }
    // ----------------------------------------------------------------------------
    // read
    // ----------------------------------------------------------------------------
    void _read__DenseMatrix_float__char(DenseMatrix<float> ** res, const char * filename, DCTX(ctx)) {
        read<DenseMatrix<float>>(*res, filename, ctx);
    }
    void _read__DenseMatrix_double__char(DenseMatrix<double> ** res, const char * filename, DCTX(ctx)) {
        read<DenseMatrix<double>>(*res, filename, ctx);
    }
    void _read__DenseMatrix_int64_t__char(DenseMatrix<int64_t> ** res, const char * filename, DCTX(ctx)) {
        read<DenseMatrix<int64_t>>(*res, filename, ctx);
    }
    void _read__DenseMatrix_uint8_t__char(DenseMatrix<uint8_t> ** res, const char * filename, DCTX(ctx)) {
        read<DenseMatrix<uint8_t>>(*res, filename, ctx);
    }
    void _read__CSRMatrix_double__char(CSRMatrix<double> ** res, const char * filename, DCTX(ctx)) {
        read<CSRMatrix<double>>(*res, filename, ctx);
    }
    void _read__Frame__char(Frame ** res, const char * filename, DCTX(ctx)) {
        read<Frame>(*res, filename, ctx);
    }
    // ----------------------------------------------------------------------------
    // getColIdx
    // ----------------------------------------------------------------------------
    void _getColIdx__size_t__Frame__char(size_t * res, const Frame * arg, const char * colName, DCTX(ctx)) {
        *res = getColIdx(arg, colName, ctx);
    }
    // ----------------------------------------------------------------------------
    // write
    // ----------------------------------------------------------------------------
    void _write__DenseMatrix_float__char(const DenseMatrix<float> * arg, const char * filename, DCTX(ctx)) {
        write<DenseMatrix<float>>(arg, filename, ctx);
    }
    void _write__DenseMatrix_double__char(const DenseMatrix<double> * arg, const char * filename, DCTX(ctx)) {
        write<DenseMatrix<double>>(arg, filename, ctx);
    }
    void _write__DenseMatrix_int64_t__char(const DenseMatrix<int64_t> * arg, const char * filename, DCTX(ctx)) {
        write<DenseMatrix<int64_t>>(arg, filename, ctx);
    }
    void _write__DenseMatrix_uint8_t__char(const DenseMatrix<uint8_t> * arg, const char * filename, DCTX(ctx)) {
        write<DenseMatrix<uint8_t>>(arg, filename, ctx);
    }
    // ----------------------------------------------------------------------------
    // replace
    // ----------------------------------------------------------------------------
    void _replace__DenseMatrix_double__DenseMatrix_double__double__double(DenseMatrix<double> ** res, const DenseMatrix<double> * arg, double pattern, double replacement, DCTX(ctx)) {
        replace<DenseMatrix<double>, DenseMatrix<double>, double>(*res, arg, pattern, replacement, ctx);
    }
    void _replace__DenseMatrix_int64_t__DenseMatrix_int64_t__int64_t__int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * arg, int64_t pattern, int64_t replacement, DCTX(ctx)) {
        replace<DenseMatrix<int64_t>, DenseMatrix<int64_t>, int64_t>(*res, arg, pattern, replacement, ctx);
    }
    // ----------------------------------------------------------------------------
    // reshape
    // ----------------------------------------------------------------------------
    void _reshape__DenseMatrix_double__DenseMatrix_double__size_t__size_t(DenseMatrix<double> ** res, const DenseMatrix<double> * arg, size_t numRows, size_t numCols, DCTX(ctx)) {
        reshape<DenseMatrix<double>, DenseMatrix<double>>(*res, arg, numRows, numCols, ctx);
    }
    void _reshape__DenseMatrix_int64_t__DenseMatrix_int64_t__size_t__size_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * arg, size_t numRows, size_t numCols, DCTX(ctx)) {
        reshape<DenseMatrix<int64_t>, DenseMatrix<int64_t>>(*res, arg, numRows, numCols, ctx);
    }
    void _reshape__DenseMatrix_bool__DenseMatrix_bool__size_t__size_t(DenseMatrix<bool> ** res, const DenseMatrix<bool> * arg, size_t numRows, size_t numCols, DCTX(ctx)) {
        reshape<DenseMatrix<bool>, DenseMatrix<bool>>(*res, arg, numRows, numCols, ctx);
    }
    // ----------------------------------------------------------------------------
    // semiJoin
    // ----------------------------------------------------------------------------
    void _semiJoin__Frame__DenseMatrix_int64_t__Frame__Frame__char__char(Frame ** res, DenseMatrix<int64_t> ** lhsTid, const Frame * lhs, const Frame * rhs, const char * lhsOn, const char * rhsOn, DCTX(ctx)) {
        semiJoin<int64_t>(*res, *lhsTid, lhs, rhs, lhsOn, rhsOn, ctx);
    }
    void _semiJoin__Frame__DenseMatrix_size_t__Frame__Frame__char__char(Frame ** res, DenseMatrix<size_t> ** lhsTid, const Frame * lhs, const Frame * rhs, const char * lhsOn, const char * rhsOn, DCTX(ctx)) {
        semiJoin<size_t>(*res, *lhsTid, lhs, rhs, lhsOn, rhsOn, ctx);
    }
    // ----------------------------------------------------------------------------
    // setColLabels
    // ----------------------------------------------------------------------------
    void _setColLabels__Frame__Frame__char_variadic__size_t(Frame ** res, const Frame * arg, const char ** labels, size_t numLabels, DCTX(ctx)) {
        setColLabels(*res, arg, labels, numLabels, ctx);
    }
    // ----------------------------------------------------------------------------
    // setColLabelsPrefix
    // ----------------------------------------------------------------------------
    void _setColLabelsPrefix__Frame__Frame__char(Frame ** res, const Frame * arg, const char * prefix, DCTX(ctx)) {
        setColLabelsPrefix(*res, arg, prefix, ctx);
    }
    // ----------------------------------------------------------------------------
    // transpose
    // ----------------------------------------------------------------------------
    void _transpose__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * arg, DCTX(ctx)) {
        transpose<DenseMatrix<double>, DenseMatrix<double>>(*res, arg, ctx);
    }
    void _transpose__DenseMatrix_float__DenseMatrix_float(DenseMatrix<float> ** res, const DenseMatrix<float> * arg, DCTX(ctx)) {
        transpose<DenseMatrix<float>, DenseMatrix<float>>(*res, arg, ctx);
    }
    void _transpose__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * arg, DCTX(ctx)) {
        transpose<DenseMatrix<int64_t>, DenseMatrix<int64_t>>(*res, arg, ctx);
    }
    // ----------------------------------------------------------------------------
    // transpose
    // ----------------------------------------------------------------------------
    void _transpose__CSRMatrix_double__CSRMatrix_double(CSRMatrix<double> ** res, const CSRMatrix<double> * arg, DCTX(ctx)) {
        transpose<CSRMatrix<double>, CSRMatrix<double>>(*res, arg, ctx);
    }
    void _transpose__CSRMatrix_int64_t__CSRMatrix_int64_t(CSRMatrix<int64_t> ** res, const CSRMatrix<int64_t> * arg, DCTX(ctx)) {
        transpose<CSRMatrix<int64_t>, CSRMatrix<int64_t>>(*res, arg, ctx);
    }
    // ----------------------------------------------------------------------------
    // ewUnaryMat
    // ----------------------------------------------------------------------------
    void _ewSign__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * arg, DCTX(ctx)) {
        ewUnaryMat<DenseMatrix<double>, DenseMatrix<double>>(UnaryOpCode::SIGN, *res, arg, ctx);
    }
    void _ewSqrt__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * arg, DCTX(ctx)) {
        ewUnaryMat<DenseMatrix<double>, DenseMatrix<double>>(UnaryOpCode::SQRT, *res, arg, ctx);
    }
    void _ewExp__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * arg, DCTX(ctx)) {
        ewUnaryMat<DenseMatrix<double>, DenseMatrix<double>>(UnaryOpCode::EXP, *res, arg, ctx);
    }
    void _ewAbs__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * arg, DCTX(ctx)) {
        ewUnaryMat<DenseMatrix<double>, DenseMatrix<double>>(UnaryOpCode::ABS, *res, arg, ctx);
    }
    void _ewFloor__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * arg, DCTX(ctx)) {
        ewUnaryMat<DenseMatrix<double>, DenseMatrix<double>>(UnaryOpCode::FLOOR, *res, arg, ctx);
    }
    void _ewCeil__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * arg, DCTX(ctx)) {
        ewUnaryMat<DenseMatrix<double>, DenseMatrix<double>>(UnaryOpCode::CEIL, *res, arg, ctx);
    }
    void _ewRound__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * arg, DCTX(ctx)) {
        ewUnaryMat<DenseMatrix<double>, DenseMatrix<double>>(UnaryOpCode::ROUND, *res, arg, ctx);
    }
    void _ewSign__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * arg, DCTX(ctx)) {
        ewUnaryMat<DenseMatrix<int64_t>, DenseMatrix<int64_t>>(UnaryOpCode::SIGN, *res, arg, ctx);
    }
    void _ewSqrt__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * arg, DCTX(ctx)) {
        ewUnaryMat<DenseMatrix<int64_t>, DenseMatrix<int64_t>>(UnaryOpCode::SQRT, *res, arg, ctx);
    }
    void _ewExp__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * arg, DCTX(ctx)) {
        ewUnaryMat<DenseMatrix<int64_t>, DenseMatrix<int64_t>>(UnaryOpCode::EXP, *res, arg, ctx);
    }
    void _ewAbs__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * arg, DCTX(ctx)) {
        ewUnaryMat<DenseMatrix<int64_t>, DenseMatrix<int64_t>>(UnaryOpCode::ABS, *res, arg, ctx);
    }
    void _ewFloor__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * arg, DCTX(ctx)) {
        ewUnaryMat<DenseMatrix<int64_t>, DenseMatrix<int64_t>>(UnaryOpCode::FLOOR, *res, arg, ctx);
    }
    void _ewCeil__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * arg, DCTX(ctx)) {
        ewUnaryMat<DenseMatrix<int64_t>, DenseMatrix<int64_t>>(UnaryOpCode::CEIL, *res, arg, ctx);
    }
    void _ewRound__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * arg, DCTX(ctx)) {
        ewUnaryMat<DenseMatrix<int64_t>, DenseMatrix<int64_t>>(UnaryOpCode::ROUND, *res, arg, ctx);
    }
    // ----------------------------------------------------------------------------
    // ewUnarySca
    // ----------------------------------------------------------------------------
    void _ewSign__double__double(double * res, double arg, DCTX(ctx)) {
        *res = ewUnarySca<double, double>(UnaryOpCode::SIGN, arg, ctx);
    }
    void _ewSqrt__double__double(double * res, double arg, DCTX(ctx)) {
        *res = ewUnarySca<double, double>(UnaryOpCode::SQRT, arg, ctx);
    }
    void _ewExp__double__double(double * res, double arg, DCTX(ctx)) {
        *res = ewUnarySca<double, double>(UnaryOpCode::EXP, arg, ctx);
    }
    void _ewAbs__double__double(double * res, double arg, DCTX(ctx)) {
        *res = ewUnarySca<double, double>(UnaryOpCode::ABS, arg, ctx);
    }
    void _ewFloor__double__double(double * res, double arg, DCTX(ctx)) {
        *res = ewUnarySca<double, double>(UnaryOpCode::FLOOR, arg, ctx);
    }
    void _ewCeil__double__double(double * res, double arg, DCTX(ctx)) {
        *res = ewUnarySca<double, double>(UnaryOpCode::CEIL, arg, ctx);
    }
    void _ewRound__double__double(double * res, double arg, DCTX(ctx)) {
        *res = ewUnarySca<double, double>(UnaryOpCode::ROUND, arg, ctx);
    }
    void _ewSign__float__float(float * res, float arg, DCTX(ctx)) {
        *res = ewUnarySca<float, float>(UnaryOpCode::SIGN, arg, ctx);
    }
    void _ewSqrt__float__float(float * res, float arg, DCTX(ctx)) {
        *res = ewUnarySca<float, float>(UnaryOpCode::SQRT, arg, ctx);
    }
    void _ewExp__float__float(float * res, float arg, DCTX(ctx)) {
        *res = ewUnarySca<float, float>(UnaryOpCode::EXP, arg, ctx);
    }
    void _ewAbs__float__float(float * res, float arg, DCTX(ctx)) {
        *res = ewUnarySca<float, float>(UnaryOpCode::ABS, arg, ctx);
    }
    void _ewFloor__float__float(float * res, float arg, DCTX(ctx)) {
        *res = ewUnarySca<float, float>(UnaryOpCode::FLOOR, arg, ctx);
    }
    void _ewCeil__float__float(float * res, float arg, DCTX(ctx)) {
        *res = ewUnarySca<float, float>(UnaryOpCode::CEIL, arg, ctx);
    }
    void _ewRound__float__float(float * res, float arg, DCTX(ctx)) {
        *res = ewUnarySca<float, float>(UnaryOpCode::ROUND, arg, ctx);
    }
    void _ewSign__int64_t__int64_t(int64_t * res, int64_t arg, DCTX(ctx)) {
        *res = ewUnarySca<int64_t, int64_t>(UnaryOpCode::SIGN, arg, ctx);
    }
    void _ewSqrt__int64_t__int64_t(int64_t * res, int64_t arg, DCTX(ctx)) {
        *res = ewUnarySca<int64_t, int64_t>(UnaryOpCode::SQRT, arg, ctx);
    }
    void _ewExp__int64_t__int64_t(int64_t * res, int64_t arg, DCTX(ctx)) {
        *res = ewUnarySca<int64_t, int64_t>(UnaryOpCode::EXP, arg, ctx);
    }
    void _ewAbs__int64_t__int64_t(int64_t * res, int64_t arg, DCTX(ctx)) {
        *res = ewUnarySca<int64_t, int64_t>(UnaryOpCode::ABS, arg, ctx);
    }
    void _ewFloor__int64_t__int64_t(int64_t * res, int64_t arg, DCTX(ctx)) {
        *res = ewUnarySca<int64_t, int64_t>(UnaryOpCode::FLOOR, arg, ctx);
    }
    void _ewCeil__int64_t__int64_t(int64_t * res, int64_t arg, DCTX(ctx)) {
        *res = ewUnarySca<int64_t, int64_t>(UnaryOpCode::CEIL, arg, ctx);
    }
    void _ewRound__int64_t__int64_t(int64_t * res, int64_t arg, DCTX(ctx)) {
        *res = ewUnarySca<int64_t, int64_t>(UnaryOpCode::ROUND, arg, ctx);
    }
    // ----------------------------------------------------------------------------
    // numCols
    // ----------------------------------------------------------------------------
    void _numCols__size_t__Structure(size_t * res, const Structure * arg, DCTX(ctx)) {
        *res = numCols(arg, ctx);
    }
    // ----------------------------------------------------------------------------
    // numRows
    // ----------------------------------------------------------------------------
    void _numRows__size_t__Structure(size_t * res, const Structure * arg, DCTX(ctx)) {
        *res = numRows(arg, ctx);
    }
    // ----------------------------------------------------------------------------
    // numCells
    // ----------------------------------------------------------------------------
    void _numCells__size_t__Structure(size_t * res, const Structure * arg, DCTX(ctx)) {
        *res = numCells(arg, ctx);
    }
    // ----------------------------------------------------------------------------
    // seq
    // ----------------------------------------------------------------------------
    void _seq__DenseMatrix_double__double__double__double(DenseMatrix<double> ** res, double start, double end, double inc, DCTX(ctx)) {
        seq<DenseMatrix<double>>(*res, start, end, inc, ctx);
    }
    void _seq__DenseMatrix_float__float__float__float(DenseMatrix<float> ** res, float start, float end, float inc, DCTX(ctx)) {
        seq<DenseMatrix<float>>(*res, start, end, inc, ctx);
    }
    void _seq__DenseMatrix_int64_t__int64_t__int64_t__int64_t(DenseMatrix<int64_t> ** res, int64_t start, int64_t end, int64_t inc, DCTX(ctx)) {
        seq<DenseMatrix<int64_t>>(*res, start, end, inc, ctx);
    }
    // ----------------------------------------------------------------------------
    // solve
    // ----------------------------------------------------------------------------
    void _solve__DenseMatrix_float__DenseMatrix_float__DenseMatrix_float(DenseMatrix<float> ** res, const DenseMatrix<float> * lhs, const DenseMatrix<float> * rhs, DCTX(ctx)) {
        solve<DenseMatrix<float>, DenseMatrix<float>, DenseMatrix<float>>(*res, lhs, rhs, ctx);
    }
    void _solve__DenseMatrix_double__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * lhs, const DenseMatrix<double> * rhs, DCTX(ctx)) {
        solve<DenseMatrix<double>, DenseMatrix<double>, DenseMatrix<double>>(*res, lhs, rhs, ctx);
    }
    // ----------------------------------------------------------------------------
    // syrk
    // ----------------------------------------------------------------------------
    void _syrk__DenseMatrix_float__DenseMatrix_float(DenseMatrix<float> ** res, const DenseMatrix<float> * arg, DCTX(ctx)) {
        syrk<DenseMatrix<float>, DenseMatrix<float>>(*res, arg, ctx);
    }
    void _syrk__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * arg, DCTX(ctx)) {
        syrk<DenseMatrix<double>, DenseMatrix<double>>(*res, arg, ctx);
    }
    // ----------------------------------------------------------------------------
    // gemv
    // ----------------------------------------------------------------------------
    void _gemv__DenseMatrix_double__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * mat, const DenseMatrix<double> * vec, DCTX(ctx)) {
        gemv<DenseMatrix<double>, DenseMatrix<double>, DenseMatrix<double>>(*res, mat, vec, ctx);
    }
    void _gemv__DenseMatrix_float__DenseMatrix_float__DenseMatrix_float(DenseMatrix<float> ** res, const DenseMatrix<float> * mat, const DenseMatrix<float> * vec, DCTX(ctx)) {
        gemv<DenseMatrix<float>, DenseMatrix<float>, DenseMatrix<float>>(*res, mat, vec, ctx);
    }
    // ----------------------------------------------------------------------------
    // tri
    // ----------------------------------------------------------------------------
    void _tri__DenseMatrix_double__DenseMatrix_double__bool__bool__bool(DenseMatrix<double> ** res, const DenseMatrix<double> * arg, bool upper, bool diag, bool values, DCTX(ctx)) {
        tri<DenseMatrix<double>>(*res, arg, upper, diag, values, ctx);
    }
    void _tri__DenseMatrix_int64_t__DenseMatrix_int64_t__bool__bool__bool(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * arg, bool upper, bool diag, bool values, DCTX(ctx)) {
        tri<DenseMatrix<int64_t>>(*res, arg, upper, diag, values, ctx);
    }
    void _tri__CSRMatrix_double__CSRMatrix_double__bool__bool__bool(CSRMatrix<double> ** res, const CSRMatrix<double> * arg, bool upper, bool diag, bool values, DCTX(ctx)) {
        tri<CSRMatrix<double>>(*res, arg, upper, diag, values, ctx);
    }
    void _tri__CSRMatrix_int64_t__CSRMatrix_int64_t__bool__bool__bool(CSRMatrix<int64_t> ** res, const CSRMatrix<int64_t> * arg, bool upper, bool diag, bool values, DCTX(ctx)) {
        tri<CSRMatrix<int64_t>>(*res, arg, upper, diag, values, ctx);
    }
    // ----------------------------------------------------------------------------
    // vectorizedPipeline
    // ----------------------------------------------------------------------------
    void _vectorizedPipeline__DenseMatrix_double_variadic__size_t__bool__Structure_variadic__size_t__int64_t__int64_t__int64_t__int64_t__size_t__void_variadic(DenseMatrix<double> ** outputs, size_t numOutputs, bool * isScalar, Structure ** inputs, size_t numInputs, int64_t * outRows, int64_t * outCols, int64_t * splits, int64_t * combines, size_t numFuncs, void ** fun, DCTX(ctx)) {
        vectorizedPipeline<DenseMatrix<double>>(outputs, numOutputs, isScalar, inputs, numInputs, outRows, outCols, splits, combines, numFuncs, fun, ctx);
    }
    void _vectorizedPipeline__DenseMatrix_float_variadic__size_t__bool__Structure_variadic__size_t__int64_t__int64_t__int64_t__int64_t__size_t__void_variadic(DenseMatrix<float> ** outputs, size_t numOutputs, bool * isScalar, Structure ** inputs, size_t numInputs, int64_t * outRows, int64_t * outCols, int64_t * splits, int64_t * combines, size_t numFuncs, void ** fun, DCTX(ctx)) {
        vectorizedPipeline<DenseMatrix<float>>(outputs, numOutputs, isScalar, inputs, numInputs, outRows, outCols, splits, combines, numFuncs, fun, ctx);
    }
    void _vectorizedPipeline__DenseMatrix_int64_t_variadic__size_t__bool__Structure_variadic__size_t__int64_t__int64_t__int64_t__int64_t__size_t__void_variadic(DenseMatrix<int64_t> ** outputs, size_t numOutputs, bool * isScalar, Structure ** inputs, size_t numInputs, int64_t * outRows, int64_t * outCols, int64_t * splits, int64_t * combines, size_t numFuncs, void ** fun, DCTX(ctx)) {
        vectorizedPipeline<DenseMatrix<int64_t>>(outputs, numOutputs, isScalar, inputs, numInputs, outRows, outCols, splits, combines, numFuncs, fun, ctx);
    }
    void _vectorizedPipeline__CSRMatrix_double_variadic__size_t__bool__Structure_variadic__size_t__int64_t__int64_t__int64_t__int64_t__size_t__void_variadic(CSRMatrix<double> ** outputs, size_t numOutputs, bool * isScalar, Structure ** inputs, size_t numInputs, int64_t * outRows, int64_t * outCols, int64_t * splits, int64_t * combines, size_t numFuncs, void ** fun, DCTX(ctx)) {
        vectorizedPipeline<CSRMatrix<double>>(outputs, numOutputs, isScalar, inputs, numInputs, outRows, outCols, splits, combines, numFuncs, fun, ctx);
    }
    // ----------------------------------------------------------------------------
    // incRef
    // ----------------------------------------------------------------------------
    void _incRef__Structure(const Structure * arg, DCTX(ctx)) {
        incRef(arg, ctx);
    }
    // ----------------------------------------------------------------------------
    // decRef
    // ----------------------------------------------------------------------------
    void _decRef__Structure(const Structure * arg, DCTX(ctx)) {
        decRef(arg, ctx);
    }
    // ----------------------------------------------------------------------------
    // sliceRow
    // ----------------------------------------------------------------------------
    void _sliceRow__DenseMatrix_double__DenseMatrix_double__size_t__size_t(DenseMatrix<double> ** res, const DenseMatrix<double> * arg, size_t lowerIncl, size_t upperExcl, DCTX(ctx)) {
        sliceRow<DenseMatrix<double>, DenseMatrix<double>>(*res, arg, lowerIncl, upperExcl, ctx);
    }
    void _sliceRow__DenseMatrix_float__DenseMatrix_float__size_t__size_t(DenseMatrix<float> ** res, const DenseMatrix<float> * arg, size_t lowerIncl, size_t upperExcl, DCTX(ctx)) {
        sliceRow<DenseMatrix<float>, DenseMatrix<float>>(*res, arg, lowerIncl, upperExcl, ctx);
    }
    void _sliceRow__DenseMatrix_int64_t__DenseMatrix_int64_t__size_t__size_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * arg, size_t lowerIncl, size_t upperExcl, DCTX(ctx)) {
        sliceRow<DenseMatrix<int64_t>, DenseMatrix<int64_t>>(*res, arg, lowerIncl, upperExcl, ctx);
    }
    void _sliceRow__Frame__Frame__size_t__size_t(Frame ** res, const Frame * arg, size_t lowerIncl, size_t upperExcl, DCTX(ctx)) {
        sliceRow<Frame, Frame>(*res, arg, lowerIncl, upperExcl, ctx);
    }
    // ----------------------------------------------------------------------------
    // sliceCol
    // ----------------------------------------------------------------------------
    void _sliceCol__DenseMatrix_double__DenseMatrix_double__size_t__size_t(DenseMatrix<double> ** res, const DenseMatrix<double> * arg, size_t lowerIncl, size_t upperExcl, DCTX(ctx)) {
        sliceCol<DenseMatrix<double>, DenseMatrix<double>>(*res, arg, lowerIncl, upperExcl, ctx);
    }
    void _sliceCol__DenseMatrix_float__DenseMatrix_float__size_t__size_t(DenseMatrix<float> ** res, const DenseMatrix<float> * arg, size_t lowerIncl, size_t upperExcl, DCTX(ctx)) {
        sliceCol<DenseMatrix<float>, DenseMatrix<float>>(*res, arg, lowerIncl, upperExcl, ctx);
    }
    void _sliceCol__DenseMatrix_int64_t__DenseMatrix_int64_t__size_t__size_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * arg, size_t lowerIncl, size_t upperExcl, DCTX(ctx)) {
        sliceCol<DenseMatrix<int64_t>, DenseMatrix<int64_t>>(*res, arg, lowerIncl, upperExcl, ctx);
    }
    void _sliceCol__Frame__Frame__size_t__size_t(Frame ** res, const Frame * arg, size_t lowerIncl, size_t upperExcl, DCTX(ctx)) {
        sliceCol<Frame, Frame>(*res, arg, lowerIncl, upperExcl, ctx);
    }
    // ----------------------------------------------------------------------------
    // insertRow
    // ----------------------------------------------------------------------------
    void _insertRow__DenseMatrix_double__DenseMatrix_double__DenseMatrix_double__size_t__size_t(DenseMatrix<double> ** res, const DenseMatrix<double> * arg, const DenseMatrix<double> * ins, size_t rowLowerIncl, size_t rowUpperExcl, DCTX(ctx)) {
        insertRow<DenseMatrix<double>, DenseMatrix<double>>(*res, arg, ins, rowLowerIncl, rowUpperExcl, ctx);
    }
    void _insertRow__DenseMatrix_float__DenseMatrix_float__DenseMatrix_float__size_t__size_t(DenseMatrix<float> ** res, const DenseMatrix<float> * arg, const DenseMatrix<float> * ins, size_t rowLowerIncl, size_t rowUpperExcl, DCTX(ctx)) {
        insertRow<DenseMatrix<float>, DenseMatrix<float>>(*res, arg, ins, rowLowerIncl, rowUpperExcl, ctx);
    }
    void _insertRow__DenseMatrix_int64_t__DenseMatrix_int64_t__DenseMatrix_int64_t__size_t__size_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * arg, const DenseMatrix<int64_t> * ins, size_t rowLowerIncl, size_t rowUpperExcl, DCTX(ctx)) {
        insertRow<DenseMatrix<int64_t>, DenseMatrix<int64_t>>(*res, arg, ins, rowLowerIncl, rowUpperExcl, ctx);
    }
    // ----------------------------------------------------------------------------
    // insertCol
    // ----------------------------------------------------------------------------
    void _insertCol__DenseMatrix_double__DenseMatrix_double__DenseMatrix_double__size_t__size_t(DenseMatrix<double> ** res, const DenseMatrix<double> * arg, const DenseMatrix<double> * ins, size_t colLowerIncl, size_t colUpperExcl, DCTX(ctx)) {
        insertCol<DenseMatrix<double>, DenseMatrix<double>>(*res, arg, ins, colLowerIncl, colUpperExcl, ctx);
    }
    void _insertCol__DenseMatrix_float__DenseMatrix_float__DenseMatrix_float__size_t__size_t(DenseMatrix<float> ** res, const DenseMatrix<float> * arg, const DenseMatrix<float> * ins, size_t colLowerIncl, size_t colUpperExcl, DCTX(ctx)) {
        insertCol<DenseMatrix<float>, DenseMatrix<float>>(*res, arg, ins, colLowerIncl, colUpperExcl, ctx);
    }
    void _insertCol__DenseMatrix_int64_t__DenseMatrix_int64_t__DenseMatrix_int64_t__size_t__size_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * arg, const DenseMatrix<int64_t> * ins, size_t colLowerIncl, size_t colUpperExcl, DCTX(ctx)) {
        insertCol<DenseMatrix<int64_t>, DenseMatrix<int64_t>>(*res, arg, ins, colLowerIncl, colUpperExcl, ctx);
    }
    // ----------------------------------------------------------------------------
    // Pooling::Forward
    // ----------------------------------------------------------------------------
    void _Avg_Forward__DenseMatrix_float__size_t__size_t__DenseMatrix_float__size_t__size_t__size_t__size_t__size_t__size_t__size_t__size_t__size_t__size_t(DenseMatrix<float> ** res, size_t&  res_h, size_t&  res_w, const DenseMatrix<float> * data, size_t batch_size, size_t num_channls, size_t img_h, size_t img_w, size_t pool_h, size_t pool_w, size_t stride_h, size_t stride_w, size_t pad_h, size_t pad_w, DCTX(ctx)) {
        Pooling::Forward<Pooling::AVG, DenseMatrix<float>, DenseMatrix<float>>::apply(*res, res_h, res_w, data, batch_size, num_channls, img_h, img_w, pool_h, pool_w, stride_h, stride_w, pad_h, pad_w, ctx);
    }
    void _Max_Forward__DenseMatrix_float__size_t__size_t__DenseMatrix_float__size_t__size_t__size_t__size_t__size_t__size_t__size_t__size_t__size_t__size_t(DenseMatrix<float> ** res, size_t&  res_h, size_t&  res_w, const DenseMatrix<float> * data, size_t batch_size, size_t num_channls, size_t img_h, size_t img_w, size_t pool_h, size_t pool_w, size_t stride_h, size_t stride_w, size_t pad_h, size_t pad_w, DCTX(ctx)) {
        Pooling::Forward<Pooling::MAX, DenseMatrix<float>, DenseMatrix<float>>::apply(*res, res_h, res_w, data, batch_size, num_channls, img_h, img_w, pool_h, pool_w, stride_h, stride_w, pad_h, pad_w, ctx);
    }
    void _Avg_Forward__DenseMatrix_double__size_t__size_t__DenseMatrix_double__size_t__size_t__size_t__size_t__size_t__size_t__size_t__size_t__size_t__size_t(DenseMatrix<double> ** res, size_t&  res_h, size_t&  res_w, const DenseMatrix<double> * data, size_t batch_size, size_t num_channls, size_t img_h, size_t img_w, size_t pool_h, size_t pool_w, size_t stride_h, size_t stride_w, size_t pad_h, size_t pad_w, DCTX(ctx)) {
        Pooling::Forward<Pooling::AVG, DenseMatrix<double>, DenseMatrix<double>>::apply(*res, res_h, res_w, data, batch_size, num_channls, img_h, img_w, pool_h, pool_w, stride_h, stride_w, pad_h, pad_w, ctx);
    }
    void _Max_Forward__DenseMatrix_double__size_t__size_t__DenseMatrix_double__size_t__size_t__size_t__size_t__size_t__size_t__size_t__size_t__size_t__size_t(DenseMatrix<double> ** res, size_t&  res_h, size_t&  res_w, const DenseMatrix<double> * data, size_t batch_size, size_t num_channls, size_t img_h, size_t img_w, size_t pool_h, size_t pool_w, size_t stride_h, size_t stride_w, size_t pad_h, size_t pad_w, DCTX(ctx)) {
        Pooling::Forward<Pooling::MAX, DenseMatrix<double>, DenseMatrix<double>>::apply(*res, res_h, res_w, data, batch_size, num_channls, img_h, img_w, pool_h, pool_w, stride_h, stride_w, pad_h, pad_w, ctx);
    }
    // ----------------------------------------------------------------------------
    // rowBind
    // ----------------------------------------------------------------------------
    void _rowBind__DenseMatrix_double__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * up, const DenseMatrix<double> * low, DCTX(ctx)) {
        rowBind<DenseMatrix<double>, DenseMatrix<double>, DenseMatrix<double>>(*res, up, low, ctx);
    }
    void _rowBind__DenseMatrix_int64_t__DenseMatrix_int64_t__DenseMatrix_int64_t(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * up, const DenseMatrix<int64_t> * low, DCTX(ctx)) {
        rowBind<DenseMatrix<int64_t>, DenseMatrix<int64_t>, DenseMatrix<int64_t>>(*res, up, low, ctx);
    }
    void _rowBind__CSRMatrix_double__CSRMatrix_double__CSRMatrix_double(CSRMatrix<double> ** res, const CSRMatrix<double> * up, const CSRMatrix<double> * low, DCTX(ctx)) {
        rowBind<CSRMatrix<double>, CSRMatrix<double>, CSRMatrix<double>>(*res, up, low, ctx);
    }
    void _rowBind__CSRMatrix_int64_t__CSRMatrix_int64_t__CSRMatrix_int64_t(CSRMatrix<int64_t> ** res, const CSRMatrix<int64_t> * up, const CSRMatrix<int64_t> * low, DCTX(ctx)) {
        rowBind<CSRMatrix<int64_t>, CSRMatrix<int64_t>, CSRMatrix<int64_t>>(*res, up, low, ctx);
    }
    void _rowBind__Frame__Frame__Frame(Frame ** res, const Frame * up, const Frame * low, DCTX(ctx)) {
        rowBind<Frame, Frame, Frame>(*res, up, low, ctx);
    }
    // ----------------------------------------------------------------------------
    // quantize
    // ----------------------------------------------------------------------------
    void _quantize__DenseMatrix_uint8_t__DenseMatrix_float__float__float(DenseMatrix<uint8_t> ** res, const DenseMatrix<float> * arg, float min, float max, DCTX(ctx)) {
        quantize<DenseMatrix<uint8_t>, DenseMatrix<float>>(*res, arg, min, max, ctx);
    }
    // ----------------------------------------------------------------------------
    // Activation::Forward
    // ----------------------------------------------------------------------------
    void _Relu_Forward__DenseMatrix_float__DenseMatrix_float(DenseMatrix<float> ** res, const DenseMatrix<float> * data, DCTX(ctx)) {
        Activation::Forward<Activation::ReLU, DenseMatrix<float>, DenseMatrix<float>>::apply(*res, data, ctx);
    }
    void _Relu_Forward__DenseMatrix_double__DenseMatrix_double(DenseMatrix<double> ** res, const DenseMatrix<double> * data, DCTX(ctx)) {
        Activation::Forward<Activation::ReLU, DenseMatrix<double>, DenseMatrix<double>>::apply(*res, data, ctx);
    }
    // ----------------------------------------------------------------------------
    // order
    // ----------------------------------------------------------------------------
    void _order__Frame__Frame__size_t_variadic__size_t__bool_variadic__size_t__bool(Frame ** res, const Frame * arg, size_t * colIdxs, size_t numColIdxs, bool * ascending, size_t numAscending, bool returnIdxs, DCTX(ctx)) {
        order<Frame, Frame>(*res, arg, colIdxs, numColIdxs, ascending, numAscending, returnIdxs, ctx);
    }
    void _order__DenseMatrix_size_t__Frame__size_t_variadic__size_t__bool_variadic__size_t__bool(DenseMatrix<size_t> ** res, const Frame * arg, size_t * colIdxs, size_t numColIdxs, bool * ascending, size_t numAscending, bool returnIdxs, DCTX(ctx)) {
        order<DenseMatrix<size_t>, Frame>(*res, arg, colIdxs, numColIdxs, ascending, numAscending, returnIdxs, ctx);
    }
    void _order__DenseMatrix_double__DenseMatrix_double__size_t_variadic__size_t__bool_variadic__size_t__bool(DenseMatrix<double> ** res, const DenseMatrix<double> * arg, size_t * colIdxs, size_t numColIdxs, bool * ascending, size_t numAscending, bool returnIdxs, DCTX(ctx)) {
        order<DenseMatrix<double>, DenseMatrix<double>>(*res, arg, colIdxs, numColIdxs, ascending, numAscending, returnIdxs, ctx);
    }
    void _order__DenseMatrix_size_t__DenseMatrix_double__size_t_variadic__size_t__bool_variadic__size_t__bool(DenseMatrix<size_t> ** res, const DenseMatrix<double> * arg, size_t * colIdxs, size_t numColIdxs, bool * ascending, size_t numAscending, bool returnIdxs, DCTX(ctx)) {
        order<DenseMatrix<size_t>, DenseMatrix<double>>(*res, arg, colIdxs, numColIdxs, ascending, numAscending, returnIdxs, ctx);
    }
    void _order__DenseMatrix_float__DenseMatrix_float__size_t_variadic__size_t__bool_variadic__size_t__bool(DenseMatrix<float> ** res, const DenseMatrix<float> * arg, size_t * colIdxs, size_t numColIdxs, bool * ascending, size_t numAscending, bool returnIdxs, DCTX(ctx)) {
        order<DenseMatrix<float>, DenseMatrix<float>>(*res, arg, colIdxs, numColIdxs, ascending, numAscending, returnIdxs, ctx);
    }
    void _order__DenseMatrix_size_t__DenseMatrix_float__size_t_variadic__size_t__bool_variadic__size_t__bool(DenseMatrix<size_t> ** res, const DenseMatrix<float> * arg, size_t * colIdxs, size_t numColIdxs, bool * ascending, size_t numAscending, bool returnIdxs, DCTX(ctx)) {
        order<DenseMatrix<size_t>, DenseMatrix<float>>(*res, arg, colIdxs, numColIdxs, ascending, numAscending, returnIdxs, ctx);
    }
    void _order__DenseMatrix_int64_t__DenseMatrix_int64_t__size_t_variadic__size_t__bool_variadic__size_t__bool(DenseMatrix<int64_t> ** res, const DenseMatrix<int64_t> * arg, size_t * colIdxs, size_t numColIdxs, bool * ascending, size_t numAscending, bool returnIdxs, DCTX(ctx)) {
        order<DenseMatrix<int64_t>, DenseMatrix<int64_t>>(*res, arg, colIdxs, numColIdxs, ascending, numAscending, returnIdxs, ctx);
    }
    void _order__DenseMatrix_size_t__DenseMatrix_int64_t__size_t_variadic__size_t__bool_variadic__size_t__bool(DenseMatrix<size_t> ** res, const DenseMatrix<int64_t> * arg, size_t * colIdxs, size_t numColIdxs, bool * ascending, size_t numAscending, bool returnIdxs, DCTX(ctx)) {
        order<DenseMatrix<size_t>, DenseMatrix<int64_t>>(*res, arg, colIdxs, numColIdxs, ascending, numAscending, returnIdxs, ctx);
    }
    // ----------------------------------------------------------------------------
    // group
    // ----------------------------------------------------------------------------
    void _group__Frame__Frame__char_variadic__size_t__char_variadic__size_t__GroupEnum_variadic__size_t(Frame ** res, const Frame * arg, const char ** keyCols, size_t numKeyCols, const char ** aggCols, size_t numAggCols, mlir::daphne::GroupEnum * aggFuncs, size_t numAggFuncs, DCTX(ctx)) {
        group<Frame>(*res, arg, keyCols, numKeyCols, aggCols, numAggCols, aggFuncs, numAggFuncs, ctx);
    }
    // ----------------------------------------------------------------------------
    // distributedPipeline
    // ----------------------------------------------------------------------------
    void _distributedPipeline__DenseMatrix_double_variadic__size_t__Structure_variadic__size_t__int64_t__int64_t__int64_t__int64_t__char(DenseMatrix<double> ** outputs, size_t numOutputs, const Structure ** inputs, size_t numInputs, int64_t * outRows, int64_t * outCols, int64_t * splits, int64_t * combines, const char * irCode, DCTX(ctx)) {
        distributedPipeline<DenseMatrix<double>>(outputs, numOutputs, inputs, numInputs, outRows, outCols, splits, combines, irCode, ctx);
    }*/
}
