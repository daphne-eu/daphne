#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# Modifications 2023 The DAPHNE Consortium.
#
#-------------------------------------------------------------

# This script has been manually translated from Apache SystemDS.

# The lmPredict-function predicts the class of a feature vector
#
# INPUT:
# --------------------------------------------------------------------------------------
# X        Matrix of feature vectors
# B        1-column matrix of weights.
# ytest    test labels, used only for verbose output. can be set to matrix(0,1,1)
#          if verbose output is not wanted
# icpt     Intercept presence, shifting and rescaling the columns of X
# verbose  If TRUE print messages are activated
# --------------------------------------------------------------------------------------
#
# OUTPUT:
# -----------------------------------------------------------------------------------
# yhat  1-column matrix of classes
# -----------------------------------------------------------------------------------

import "lmPredictStats_.daph";

// TODO Support optional parameters with defaults (see #548).
def lmPredict(X:matrix<f64>, B:matrix<f64>, 
  ytest:matrix<f64> /*= [0.0]*/, icpt:si64 /*= 0*/, verbose:bool /*= false*/)
{
  intercept = (icpt>0 || ncol(X)+1==nrow(B)) ? as.scalar(B[nrow(B) - 1,]) : 0.0;
  yhat = X @ B[0:ncol(X) - 1,] + intercept;

  if( verbose )
    lmPredictStats_.lmPredictStats(yhat, ytest, true);
  
  return yhat;
}
