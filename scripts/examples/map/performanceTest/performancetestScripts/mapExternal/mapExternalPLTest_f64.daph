/*
 * Copyright 2021 The DAPHNE Consortium
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

X = as.matrix<f64>(rand($matrix_size, $matrix_size, as.f64($minValue), as.f64($maxValue), 1.0, 42));

if($operation == 1){

multiplication_str = "
def multiplication(x):
    return x * 2
";
map(X, multiplication_str, "x", $pl);

}
else if($operation == 2){

power_str = "
def power(x):
    return x**3
";
map(X, power_str, "x", $pl);

}
else if($operation == 3){

logarithm_base_10_str = "
def logarithm_base_10(x):
    import math
    return math.log(x,10)
";
map(X, logarithm_base_10_str, "x", $pl);

}
else if($operation == 4){
    
exponential_str = "
def exponential(x):
    import math
    return math.exp(x**2)
";
map(X, exponential_str, "x", $pl);

}
else if($operation == 5){
    
polynomial_str = "
def polynomial(x):
    return 5*x**5 + 4*x**4 + 3*x**3 + 2*x**2 + 1*x
";
map(X, polynomial_str, "x", $pl);

}
else if($operation == 6){
    
relu_str = "
def relu(x):
    return max(0, x)
";
map(X, relu_str, "x", $pl);

}
else if($operation == 7){

sigmoid_str = "
def sigmoid(x):
    import math
    return 1 / (1 + math.exp(-x))
";
map(X, sigmoid_str, "x", $pl);

}
else if($operation == 8){

thresholding_str = "
def thresholding(x):
    return 10 if x > 42 else 0
";
map(X, thresholding_str, "x", $pl);

}
else if($operation == 9){

fibonacci_str="
def fibonacci(n):
    if n <= 1:
        return n

    a, b = 0, 1
    for _ in range(2, n + 1):
        a, b = b, a + b

    return b
";
map(X,fibonacci_str, "n", $pl);

}
else if($operation == 10){
    
polynomial_str = "
def polynomial3(x):
    return 3*x**3 + 2*x**2 + 1*x
";
map(X, polynomial_str, "x", $pl);

}
else {
    print("Invalid operation selected.");
}