#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# Modifications Copyright 2024 The DAPHNE Consortium
#
#-------------------------------------------------------------

# This script has been manually translated from Apache SystemDS.

/*
 * Dropout layer.
 */

#forward = function(matrix[double] X, double p, int seed)
#    return (matrix[double] out, matrix[double] mask) {
def forward(X:matrix<f64>, p, seed) -> matrix, matrix {
  /*
   * Computes the forward pass for an inverted dropout layer.
   *
   * Drops the inputs element-wise with a probability p, and divides
   * by p to maintain the expected values of those inputs (which are
   * the outputs of neurons) at test time.
   *
   * Inputs:
   *  - X: Inputs, of shape (any, any).
   *  - p: Probability of keeping a neuron output.
   *  - seed: [Optional: -1] Random number generator seed to allow for
   *      deterministic evaluation.  Set to -1 for a random seed.
   *
   * Outputs:
   *  - out: Outputs, of same shape as `X`.
   *  - mask: Dropout mask used to compute the output.
   */
  # Normally, we might use something like
  #    `mask = rand(rows=nrow(X), cols=ncol(X), min=0, max=1, seed=seed) <= p`
  # to create a dropout mask.  Fortunately, SystemDS has a `sparsity` parameter on
  # the `rand` function that allows use to create a mask directly.
#  mask = ifelse(seed == -1,
#    rand(rows=nrow(X), cols=ncol(X), min=1, max=1, sparsity=p),
#    rand(rows=nrow(X), cols=ncol(X), min=1, max=1, sparsity=p, seed=seed));


  mask = rand(nrow(X), ncol(X), 1.0, 1.0, p, seed);
  out = X * mask / p;
  return out, mask;
}

#backward = function(matrix[double] dout, matrix[double] X, double p, matrix[double] mask)
#    return (matrix[double] dX) {
def backward(dout:matrix, X:matrix, p, mask:matrix) -> matrix {
  /*
   * Computes the backward pass for an inverted dropout layer.
   *
   * Applies the mask to the upstream gradient, and divides by p to
   * maintain the expected values at test time.
   *
   * Inputs:
   *  - dout: Gradient wrt `out`, of same shape as `X`.
   *  - X: Inputs, of shape (any, any).
   *  - p: Probability of keeping a neuron output.
   *  - mask: Dropout mask used to compute the output.
   *
   * Outputs:
   *  - dX: Gradient wrt `X`, of same shape as `X`.
   */
  dX = mask / p * dout;
  return dX;
}

