#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# Modifications Copyright 2024 The DAPHNE Consortium
#
#-------------------------------------------------------------

# This script has been manually translated from Apache SystemDS.

/*
 * L2 regularization.
 */

def forward(X:matrix<f64>, lambda) -> matrix {
  /*
   * Computes the forward pass for an L2 regularization function.
   *
   * Inputs:
   *  - X: Inputs, of shape (any, any).
   *  - lambda: Regularization strength.
   *      A typical value is 0.01.
   *
   * Outputs:
   *  - reg_loss: Total regularization loss.
   */
  reg_loss = 0.5 * lambda * sum(X^2);
  return reg_loss;
}

def backward(X:matrix, lambda) -> matrix {
  /*
   * Computes the backward pass for an L2 regularization function.
   *
   * Inputs:
   *  - X: Inputs, of shape (any, any).
   *  - lambda: Regularization strength.
   *
   * Outputs:
   *  - dX: Gradient wrt `X`, of same shape as `X`.
   */
  dX = lambda * X;
  return dX;
}
