#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

# This builtin function compute the weighted and simple accuracy for given predictions
#
# INPUT:
# --------------------------------------------------------------------------------------
# y           Ground truth (Actual Labels)
# yhat        Predictions (Predicted labels)
# isWeighted  Flag for weighted or non-weighted accuracy calculation
# --------------------------------------------------------------------------------------
#
# OUTPUT:
# --------------------------------------------------------------------------------------------
# accuracy  accuracy of the predicted labels
# --------------------------------------------------------------------------------------------

def m_getAccuracy(y:matrix<f64>, yhat:matrix<f64>, isWeighted:bool /*= false*/) -> f64 {
  accuracy = 0.0;
  if ((isWeighted == false)) {
    sum = sum(y == yhat);
    accuracy = (sum / as.si64(nrow(y))) * 100;
  } else {
    n = as.si64(nrow(y));
    classes = ctable(y, 1, aggMax(y), 1);
    resp = fill(as.f64(0), as.si64(nrow(y)), as.si64(nrow(classes)));
    resp = as.matrix<f64>(resp + t(seq(as.f64(1), as.si64(nrow(classes)), 1 <= as.si64(nrow(classes)) ? 1 : -1)));
    respY = resp == y;
    respYhat = resp == yhat;
    pred = respY * respYhat;
    classes = replace(classes, 0, 1);
    accuracy = as.f64(mean(sum(pred, 1) / t(classes)) * 100);
  }
  
  return as.f64(accuracy);
}

