// RUN: daphne-opt -pass-pipeline="builtin.module(lower-sparse-exploit, canonicalize)" %s | FileCheck %s

// COM: Canonicalizer is run to guarantee matMul, ewLn, and ewMul are also removed as they become redundant but are not removed by the sparse pass itself.
// COM: They are tested here regardless as it is crucial to the pass to replace the entire pattern.

module {
  func.func @double() {
    %0 = "daphne.constant"() {value = true} : () -> i1
    %1 = "daphne.constant"() {value = false} : () -> i1
    %2 = "daphne.constant"() {value = 2 : index} : () -> index
    %3 = "daphne.constant"() {value = 10 : index} : () -> index
    %4 = "daphne.constant"() {value = 3 : si64} : () -> si64
    %5 = "daphne.constant"() {value = 2 : si64} : () -> si64
    %6 = "daphne.constant"() {value = 1 : si64} : () -> si64
    %7 = "daphne.constant"() {value = 0.000000e+00 : f64} : () -> f64
    %8 = "daphne.constant"() {value = 1.000000e+00 : f64} : () -> f64
    %9 = "daphne.constant"() {value = 2.000000e-01 : f64} : () -> f64
    %10 = "daphne.randMatrix"(%3, %3, %7, %8, %9, %6) : (index, index, f64, f64, f64, si64) -> !daphne.Matrix<10x10xf64:sp[2.000000e-01]:rep[sparse]>
    %11 = "daphne.randMatrix"(%3, %2, %7, %8, %8, %5) : (index, index, f64, f64, f64, si64) -> !daphne.Matrix<10x2xf64:sp[1.000000e+00]>
    %12 = "daphne.randMatrix"(%3, %2, %7, %8, %8, %4) : (index, index, f64, f64, f64, si64) -> !daphne.Matrix<10x2xf64:sp[1.000000e+00]>
    // CHECK-NOT: daphne.matMul
    // CHECK-NOT: daphne.ewLn
    // CHECK-NOT: daphne.ewMul
    // CHECK-NOT: daphne.sumAll
    // CHECK: affine.parallel
    // CHECK: scf.for
    // CHECK: scf.for
    // CHECK: math.fma
    // CHECK: math.log
    // CHECK: math.fma
    %13 = "daphne.matMul"(%11, %12, %1, %0) : (!daphne.Matrix<10x2xf64:sp[1.000000e+00]>, !daphne.Matrix<10x2xf64:sp[1.000000e+00]>, i1, i1) -> !daphne.Matrix<10x10xf64:sp[1.000000e+00]>
    %14 = "daphne.ewLn"(%13) : (!daphne.Matrix<10x10xf64:sp[1.000000e+00]>) -> !daphne.Matrix<10x10xf64>
    %15 = "daphne.ewMul"(%10, %14) : (!daphne.Matrix<10x10xf64:sp[2.000000e-01]:rep[sparse]>, !daphne.Matrix<10x10xf64>) -> !daphne.Matrix<10x10xf64:sp[2.000000e-01]:rep[sparse]>
    %16 = "daphne.sumAll"(%15) : (!daphne.Matrix<10x10xf64:sp[2.000000e-01]:rep[sparse]>) -> f64
    "daphne.print"(%16, %0, %1) : (f64, i1, i1) -> ()
    "daphne.return"() : () -> ()
  }
}