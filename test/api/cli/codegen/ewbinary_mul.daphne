// Performs an MulOp. Used to compare precompiled kernel with codegen.
// Values extracted as scalar to avoid them being optimized out of
// the calculation with constant folding or similar.

// f64
X = [1.0, 2, 3, 4, 5, 6](2, 3);
rowVec = [5.0, 4, 3](1,);
colVec = [4.0, 3](,1);
a = as.scalar(X[0:1, 1:2]); // 2
b = as.scalar(X[1:2, 0:1]); // 4

print(X * X);       // mat * mat
print(X * rowVec);  // mat * mat (broadcasting along columns)
print(X * colVec);  // mat * mat (broadcasting along rows)
print(X * a);       // mat * scalar (broadcasting)
print(a * b);       // scalar * scalar

// si64
X = [1, 2, 3, 4, 5, 6](2, 3);
rowVec = [5, 4, 3](1,);
colVec = [4, 3](,1);
a = as.scalar(X[0:1, 1:2]); // 2
b = as.scalar(X[1:2, 0:1]); // 4

print(X * X);       // mat * mat
print(X * rowVec);  // mat * mat (broadcasting along columns)
print(X * colVec);  // mat * mat (broadcasting along rows)
print(X * a);       // mat * scalar (broadcasting)
print(a * b);       // scalar * scalar