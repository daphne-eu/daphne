IR after parsing and some simplifications:
module {
  func.func @main() {
    %0 = "daphne.constant"() {value = 1.400000e+01 : f64} : () -> f64
    %1 = "daphne.constant"() {value = 1.300000e+01 : f64} : () -> f64
    %2 = "daphne.constant"() {value = 1.200000e+01 : f64} : () -> f64
    %3 = "daphne.constant"() {value = 10 : si64} : () -> si64
    %4 = "daphne.constant"() {value = 9 : si64} : () -> si64
    %5 = "daphne.constant"() {value = 8 : si32} : () -> si32
    %6 = "daphne.constant"() {value = 1.100000e+01 : f64} : () -> f64
    %7 = "daphne.constant"() {value = 7 : ui64} : () -> ui64
    %8 = "daphne.constant"() {value = 6 : si64} : () -> si64
    %9 = "daphne.constant"() {value = 5 : si64} : () -> si64
    %10 = "daphne.constant"() {value = 4 : si64} : () -> si64
    %11 = "daphne.constant"() {value = 3 : si64} : () -> si64
    %12 = "daphne.constant"() {value = 2 : si64} : () -> si64
    %13 = "daphne.constant"() {value = false} : () -> i1
    %14 = "daphne.constant"() {value = true} : () -> i1
    "daphne.print"(%12, %14, %13) : (si64, i1, i1) -> ()
    "daphne.print"(%11, %14, %13) : (si64, i1, i1) -> ()
    "daphne.print"(%10, %14, %13) : (si64, i1, i1) -> ()
    "daphne.print"(%9, %14, %13) : (si64, i1, i1) -> ()
    "daphne.print"(%8, %14, %13) : (si64, i1, i1) -> ()
    "daphne.print"(%7, %14, %13) : (ui64, i1, i1) -> ()
    "daphne.print"(%6, %14, %13) : (f64, i1, i1) -> ()
    "daphne.print"(%2, %14, %13) : (f64, i1, i1) -> ()
    "daphne.print"(%5, %14, %13) : (si32, i1, i1) -> ()
    "daphne.print"(%4, %14, %13) : (si64, i1, i1) -> ()
    "daphne.print"(%3, %14, %13) : (si64, i1, i1) -> ()
    "daphne.print"(%1, %14, %13) : (f64, i1, i1) -> ()
    "daphne.print"(%0, %14, %13) : (f64, i1, i1) -> ()
    "daphne.return"() : () -> ()
  }
}
