// Many ways of right indexing on matrices of strings using positions.

// Considered way of specifying row/col:
// - empty (leave blank)
// - scalar (0, in-between, last)
// - :
// - l: (0, in-between, last)
// - :u (0, in-between, last)
// - l:u (same, +1, whole range)
// - column matrix (empty, non-contiguous positions)

// ****************************************************************************
// Input matrix
// ****************************************************************************

X = [ "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L" ](4, 3);
print("input");
print("X");
print(X); // to check if the input is as expected
print("");

// ****************************************************************************
// Position column matrices
// ****************************************************************************

emptyIds = fill(0, 0, 1); // []
rowIds = seq(0, 2, 1);     // t([0, 1, 2])
colIds = seq(0, 1, 1) * 2;     // t([0, 2])

// ****************************************************************************
// Neither row nor col
// ****************************************************************************

print("neither row nor col");
print("X[, ]");
print(X[, ]);
print("");

// ****************************************************************************
// Only row
// ****************************************************************************

print("only row");
print("X[0, ]");
print(X[0, ]);
print("X[1, ]");
print(X[1, ]);
print("X[3, ]");
print(X[3, ]);
print("X[:, ]");
print(X[:, ]);
print("X[0:, ]");
print(X[0:, ]);
print("X[1:, ]");
print(X[:, ]);
print("X[3:, ]");
print(X[3:, ]);
print("X[:0, ]");
print(X[:0, ]);
print("X[:1, ]");
print(X[:1, ]);
print("X[:3, ]");
print(X[:3, ]);
print("X[1:1, ]");
print(X[1:1, ]);
print("X[1:2, ]");
print(X[1:2, ]);
print("X[0:3, ]");
print(X[0:3, ]);
print("X[emptyIds, ]");
print(X[emptyIds, ]);
print("X[rowIds, ]");
print(X[rowIds, ]);
print("");

// ****************************************************************************
// Only col
// ****************************************************************************

print("only col");
print("X[, 0]");
print(X[, 0]);
print("X[, 1]");
print(X[, 1]);
print("X[, 2]");
print(X[, 2]);
print("X[, :]");
print(X[, :]);
print("X[, 0:]");
print(X[, 0:]);
print("X[, 1:]");
print(X[, 1:]);
print("X[, 2:]");
print(X[, 2:]);
print("X[, :0]");
print(X[, :0]);
print("X[, :1]");
print(X[, :1]);
print("X[, :2]");
print(X[, :2]);
print("X[, 2:2]");
print(X[, 2:2]);
print("X[, 1:2]");
print(X[, 1:2]);
print("X[, 0:2]");
print(X[, 0:2]);
print("X[, emptyIds]");
print(X[, emptyIds]);
print("X[, colIds]");
print(X[, colIds]);
print("");

// ****************************************************************************
// Row and col - corresponding variants
// ****************************************************************************

print("row and col - corresponding variants");
print("X[0, 0]");
print(X[0, 0]);
print("X[2, 1]");
print(X[2, 1]);
print("X[3, 2]");
print(X[3, 2]);
print("X[:, :]");
print(X[:, :]);
print("X[0:, 0:]");
print(X[0:, 0:]);
print("X[1:, 1:]");
print(X[1:, 1:]);
print("X[3:, 2:]");
print(X[3:, 2:]);
print("X[:0, :0]");
print(X[:0, :0]);
print("X[:2, :1]");
print(X[:2, :1]);
print("X[:2, :2]");
print(X[:3, :2]);
print("X[2:2, 1:1]");
print(X[2:2, 1:1]);
print("X[1:3, 1:2]");
print(X[1:3, 1:2]);
print("X[0:3, 0:2]");
print(X[0:3, 0:2]);
print("X[emptyIds, emptyIds]");
print(X[emptyIds, emptyIds]);
print("X[rowIds, colIds]");
print(X[rowIds, colIds]);
print("");

// ****************************************************************************
// Row and col - some mixed variants
// ****************************************************************************

print("row and col - some mixed variants");
print("X[3, 1:2]");
print(X[3, 1:2]);
print("X[2, colIds]");
print(X[2, colIds]);
print("X[1:3, 1]");
print(X[1:3, 1]);
print("X[1:2, colIds]");
print(X[1:2, colIds]);
print("X[rowIds, 2]");
print(X[rowIds, 2]);
print("X[rowIds, 1:2]");
print(X[rowIds, 1:2]);