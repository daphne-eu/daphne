// Right indexing on matrices using bit vectors.

// ****************************************************************************
// Input matrix
// ****************************************************************************

X = reshape(seq(0, 47, 1), 8, 6);
print("input");
print("X");
print( X); // to check if the input is as expected
print("");

// ****************************************************************************
// Neither row nor col
// ****************************************************************************

print("neither row nor col");
print("X[[, ]]");
print( X[[, ]]);
print("");

// ****************************************************************************
// Only row
// ****************************************************************************

print("only row");

print("zero/one integer numbers");
print("X[[[0, 0, 0, 0, 0, 0, 0, 0], ]]");
print( X[[[0, 0, 0, 0, 0, 0, 0, 0], ]]);
print("X[[[0, 1, 0, 1, 0, 0, 1, 1], ]]");
print( X[[[0, 1, 0, 1, 0, 0, 1, 1], ]]);
print("X[[[1, 1, 1, 1, 1, 1, 1, 1], ]]");
print( X[[[1, 1, 1, 1, 1, 1, 1, 1], ]]);

print("zero/one floating-point numbers");
print("X[[[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], ]]");
print( X[[[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], ]]);
print("X[[[0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0], ]]");
print( X[[[0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0], ]]);
print("X[[[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], ]]");
print( X[[[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], ]]);

print("");

// ****************************************************************************
// Only col
// ****************************************************************************

print("only col");

print("zero/one integer numbers");
print("X[[, [0, 0, 0, 0, 0, 0] ]]");
print( X[[, [0, 0, 0, 0, 0, 0] ]]);
print("X[[, [0, 1, 0, 1, 0, 0] ]]");
print( X[[, [0, 1, 0, 1, 0, 0] ]]);
print("X[[, [1, 1, 1, 1, 1, 1] ]]");
print( X[[, [1, 1, 1, 1, 1, 1] ]]);

print("zero/one floating-point numbers");
print("X[[, [0.0, 0.0, 0.0, 0.0, 0.0, 0.0] ]]");
print( X[[, [0.0, 0.0, 0.0, 0.0, 0.0, 0.0] ]]);
print("X[[, [0.0, 1.0, 0.0, 1.0, 0.0, 0.0] ]]");
print( X[[, [0.0, 1.0, 0.0, 1.0, 0.0, 0.0] ]]);
print("X[[, [1.0, 1.0, 1.0, 1.0, 1.0, 1.0] ]]");
print( X[[, [1.0, 1.0, 1.0, 1.0, 1.0, 1.0] ]]);

print("");

// ****************************************************************************
// Row and col - corresponding variants
// ****************************************************************************

print("row and col");

print("zero/one integer numbers");
print("X[[[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0] ]]");
print( X[[[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0] ]]);
print("X[[[0, 1, 0, 1, 0, 0, 1, 1], [0, 1, 0, 1, 0, 0] ]]");
print( X[[[0, 1, 0, 1, 0, 0, 1, 1], [0, 1, 0, 1, 0, 0] ]]);
print("X[[[1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1] ]]");
print( X[[[1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1] ]]);

print("zero/one floating-point numbers");
print("X[[[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0] ]]");
print( X[[[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0] ]]);
print("X[[[0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0], [0.0, 1.0, 0.0, 1.0, 0.0, 0.0] ]]");
print( X[[[0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0], [0.0, 1.0, 0.0, 1.0, 0.0, 0.0] ]]);
print("X[[[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0] ]]");
print( X[[[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0] ]]);