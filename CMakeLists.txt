# Copyright 2021 The DAPHNE Consortium
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cmake_minimum_required(VERSION 3.17)

# Build release version by default (override with -DCMAKE_BUILD_TYPE=Debug in your initial cmake invocation)
# This needs to be set *before* the project() command
set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose the type of build.")

project(daphne-prototype LANGUAGES CXX C)

set(CMAKE_BUILD_WITH_INSTALL_NAME_DIR ON)
set(CMAKE_CXX_STANDARD 17 CACHE STRING "C++ standard to conform to")
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_FLAGS_DEBUG="${CMAKE_CXX_FLAGS_DEBUG} -O0")
# silence a warning about DEPFILE path transformations (used in LLVM)
cmake_policy(SET CMP0116 OLD)

# *****************************************************************************
# Related to MLIR/LLVM
# *****************************************************************************

find_package(MLIR REQUIRED CONFIG)

message(STATUS "Using MLIRConfig.cmake in: ${MLIR_DIR}")
message(STATUS "Using LLVMConfig.cmake in: ${LLVM_DIR}")

set(LLVM_RUNTIME_OUTPUT_INTDIR ${CMAKE_BINARY_DIR}/bin)
set(LLVM_LIBRARY_OUTPUT_INTDIR ${CMAKE_BINARY_DIR}/lib)
set(MLIR_BINARY_DIR ${CMAKE_BINARY_DIR})

list(APPEND CMAKE_MODULE_PATH "${MLIR_CMAKE_DIR}")
list(APPEND CMAKE_MODULE_PATH "${LLVM_CMAKE_DIR}")
include(TableGen)
include(AddLLVM)
include(AddMLIR)

# the next command needs to be guarded because it messes with compiler flags
if (CMAKE_BUILD_TYPE STREQUAL "Release")
    set(LLVM_ENABLE_ASSERTIONS OFF)
endif()

include(HandleLLVMOptions)

include_directories(${LLVM_INCLUDE_DIRS})
include_directories(${MLIR_INCLUDE_DIRS})

link_directories(${LLVM_BUILD_LIBRARY_DIR})
add_definitions(${LLVM_DEFINITIONS})

# Enable exception handling and run-time type information.
set(LLVM_ENABLE_EH ON)
set(LLVM_ENABLE_RTTI ON)

# *****************************************************************************
# Related to external libraries (OpenBLAS, CUDA, etc)
# *****************************************************************************

SET(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads REQUIRED)

set(BLA_VENDOR OpenBLAS)
set(BLA_STATIC ON)
find_package(BLAS)

# specify multiple paths in CMAKE_PREFIX_PATH separated by semicolon to add multiple include dirs
# to make compile/exec in container plus finding includes in local IDE work, specify both, local third party sources
# prefix and /usr/local e.g.: -DCMAKE_PREFIX_PATH="/usr/local;${PROJECT_SOURCE_DIR}/thirdparty/installed"

message(STATUS "ANTLR_VERSION: ${ANTLR_VERSION}")
foreach(path ${CMAKE_PREFIX_PATH})
    message(STATUS "CMAKE_PREFIX_PATH:  ${path}")
    include_directories(${path}/include)
    include_directories(${path}/include/openblas)
    file(GLOB ANTLR_JAR_FOUND ${path}/share/antlr4/antlr-${ANTLR_VERSION}-complete.jar)
    if(DEFINED ANTLR_JAR_FOUND)
        message(STATUS "ANTLR_JAR_FOUND: ${ANTLR_JAR_FOUND}")
        set(ANTLR4_JAR_LOCATION ${ANTLR_JAR_FOUND} CACHE STRING "default value for ANTLR jar file")
    endif()
endforeach(path)

# fallback if not using CMAKE_PREFIX_PATH (e.g., system/container install)
if(NOT DEFINED CMAKE_PREFIX_PATH)
    set(ANTLR4_JAR_LOCATION /usr/local/share/antlr4/antlr-${ANTLR_VERSION}-complete.jar CACHE STRING "default value for ANTLR jar file")
    include_directories(/usr/local/include/openblas)
endif()

# check <package>_ROOT env var
cmake_policy(SET CMP0074 NEW)

option(USE_CUDA "Whether to activate compilation of CUDA features" OFF)
include(CheckLanguage)
check_language(CUDA)
if(USE_CUDA AND CMAKE_CUDA_COMPILER)
    if(${CMAKE_COMPILER_IS_GNUCXX})
        set(GCC_EXPECTED_VERSION 11.3.0)
        if(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER GCC_EXPECTED_VERSION AND NOT DEFINED ENV{CUDAHOSTCXX})
            message(WARNING "GCC: Daphne requires version ${GCC_EXPECTED_VERSION} to build but found ${CMAKE_CXX_COMPILER_VERSION} \
                You should set the env var CUDAHOSTCXX to something like g++-11 (if installed)")
            execute_process(COMMAND sleep 7)
        endif()
    endif()

    enable_language(CUDA)
    find_package(CUDAToolkit REQUIRED)
    set(CMAKE_CUDA_ARCHITECTURES  OFF)
    cmake_policy(SET CMP0104 NEW)
    add_definitions(-DUSE_CUDA)
    set(CMAKE_CUDA_STANDARD 17)
    set(CMAKE_CUDA_STANDARD_REQUIRED ON)
    message(STATUS "CUDA enabled (version ${CMAKE_CUDA_COMPILER_VERSION})")
    if(DEFINED ENV{CUDAHOSTCXX})
        message(STATUS "CUDAHOSTCXX value: $ENV{CUDAHOSTCXX}")
    endif()
endif()

option(USE_ARROW "Whether to activate compilation of Arrow/Parquet features" OFF)
if(USE_ARROW)
    find_package(Arrow CONFIG REQUIRED)
    find_package(Parquet CONFIG REQUIRED
        PATHS /usr/local/lib/cmake/arrow
        NO_DEFAULT_PATH
    )
    link_libraries(arrow_shared parquet_shared)
    add_definitions(-DUSE_ARROW)
    message(STATUS "Arrow/Parquet enabled")
endif()

# *****************************************************************************
# Project-specific include directories
# *****************************************************************************

include_directories(${PROJECT_SOURCE_DIR}/src)
include_directories(${PROJECT_BINARY_DIR}/src)

# *****************************************************************************
# Descend to subdirectories
# *****************************************************************************

add_subdirectory(src/api/cli)
add_subdirectory(src/compiler/execution)
add_subdirectory(src/compiler/explanation)
add_subdirectory(src/compiler/inference)
add_subdirectory(src/compiler/lowering)
add_subdirectory(src/ir/daphneir)
add_subdirectory(src/parser)
add_subdirectory(src/parser/config)
add_subdirectory(src/parser/metadata)
add_subdirectory(src/runtime/distributed/proto)
add_subdirectory(src/runtime/distributed/worker)
add_subdirectory(src/runtime/local/datastructures)
add_subdirectory(src/runtime/local/io)
add_subdirectory(src/runtime/local/kernels)
add_subdirectory(src/util)

add_subdirectory(test)
